
EDBGUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  2000000c  00000cb0  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000090  00000d34  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015d63  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fec  00000000  00000000  00035df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009e60  00000000  00000000  00037ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000868  00000000  00000000  00041c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000938  00000000  00000000  000424a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c940  00000000  00000000  00042ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d5b9  00000000  00000000  0005f71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095fac  00000000  00000000  0006ccd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000158c  00000000  00000000  00102c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	90 20 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     . . -...)...)...
	...
  2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
  3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  6c:	29 01 00 00 29 01 00 00 65 0b 00 00 29 01 00 00     )...)...e...)...
  7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  ac:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...

000000bc <__do_global_dtors_aux>:
  bc:	b510      	push	{r4, lr}
  be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
  c0:	7823      	ldrb	r3, [r4, #0]
  c2:	2b00      	cmp	r3, #0
  c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
  c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
  c8:	2b00      	cmp	r3, #0
  ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
  cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
  ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
  d0:	bf00      	nop
  d2:	2301      	movs	r3, #1
  d4:	7023      	strb	r3, [r4, #0]
  d6:	bd10      	pop	{r4, pc}
  d8:	2000000c 	.word	0x2000000c
  dc:	00000000 	.word	0x00000000
  e0:	00000ca4 	.word	0x00000ca4

000000e4 <frame_dummy>:
  e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
  e6:	b510      	push	{r4, lr}
  e8:	2b00      	cmp	r3, #0
  ea:	d003      	beq.n	f4 <frame_dummy+0x10>
  ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
  ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
  f0:	e000      	b.n	f4 <frame_dummy+0x10>
  f2:	bf00      	nop
  f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
  f6:	6803      	ldr	r3, [r0, #0]
  f8:	2b00      	cmp	r3, #0
  fa:	d100      	bne.n	fe <frame_dummy+0x1a>
  fc:	bd10      	pop	{r4, pc}
  fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
 100:	2b00      	cmp	r3, #0
 102:	d0fb      	beq.n	fc <frame_dummy+0x18>
 104:	4798      	blx	r3
 106:	e7f9      	b.n	fc <frame_dummy+0x18>
 108:	00000000 	.word	0x00000000
 10c:	20000010 	.word	0x20000010
 110:	00000ca4 	.word	0x00000ca4
 114:	00000ca4 	.word	0x00000ca4
 118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 11c:	b510      	push	{r4, lr}
	system_init();
 11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
 120:	4798      	blx	r3
}
 122:	bd10      	pop	{r4, pc}
 124:	00000231 	.word	0x00000231

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
 12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 12e:	4a10      	ldr	r2, [pc, #64]	; (170 <Reset_Handler+0x44>)
 130:	4b10      	ldr	r3, [pc, #64]	; (174 <Reset_Handler+0x48>)
 132:	429a      	cmp	r2, r3
 134:	d009      	beq.n	14a <Reset_Handler+0x1e>
 136:	4b0f      	ldr	r3, [pc, #60]	; (174 <Reset_Handler+0x48>)
 138:	4a0d      	ldr	r2, [pc, #52]	; (170 <Reset_Handler+0x44>)
 13a:	e003      	b.n	144 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 13c:	6811      	ldr	r1, [r2, #0]
 13e:	6019      	str	r1, [r3, #0]
 140:	3304      	adds	r3, #4
 142:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 144:	490c      	ldr	r1, [pc, #48]	; (178 <Reset_Handler+0x4c>)
 146:	428b      	cmp	r3, r1
 148:	d3f8      	bcc.n	13c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 14a:	4b0c      	ldr	r3, [pc, #48]	; (17c <Reset_Handler+0x50>)
 14c:	e002      	b.n	154 <Reset_Handler+0x28>
                *pDest++ = 0;
 14e:	2200      	movs	r2, #0
 150:	601a      	str	r2, [r3, #0]
 152:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 154:	4a0a      	ldr	r2, [pc, #40]	; (180 <Reset_Handler+0x54>)
 156:	4293      	cmp	r3, r2
 158:	d3f9      	bcc.n	14e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <Reset_Handler+0x58>)
 15c:	21ff      	movs	r1, #255	; 0xff
 15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <Reset_Handler+0x5c>)
 160:	438b      	bics	r3, r1
 162:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 164:	4b09      	ldr	r3, [pc, #36]	; (18c <Reset_Handler+0x60>)
 166:	4798      	blx	r3
        main();
 168:	4b09      	ldr	r3, [pc, #36]	; (190 <Reset_Handler+0x64>)
 16a:	4798      	blx	r3
 16c:	e7fe      	b.n	16c <Reset_Handler+0x40>
 16e:	46c0      	nop			; (mov r8, r8)
 170:	00000ca4 	.word	0x00000ca4
 174:	20000000 	.word	0x20000000
 178:	2000000c 	.word	0x2000000c
 17c:	2000000c 	.word	0x2000000c
 180:	20000090 	.word	0x20000090
 184:	e000ed00 	.word	0xe000ed00
 188:	00000000 	.word	0x00000000
 18c:	00000b79 	.word	0x00000b79
 190:	000002b9 	.word	0x000002b9

00000194 <EDBG_COM_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 194:	4b05      	ldr	r3, [pc, #20]	; (1ac <EDBG_COM_CLOCK_init+0x18>)
 196:	2240      	movs	r2, #64	; 0x40
 198:	21dc      	movs	r1, #220	; 0xdc
 19a:	505a      	str	r2, [r3, r1]
 19c:	3914      	subs	r1, #20
 19e:	505a      	str	r2, [r3, r1]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
 1a0:	4a03      	ldr	r2, [pc, #12]	; (1b0 <EDBG_COM_CLOCK_init+0x1c>)
 1a2:	69d3      	ldr	r3, [r2, #28]
 1a4:	39a8      	subs	r1, #168	; 0xa8
 1a6:	430b      	orrs	r3, r1
 1a8:	61d3      	str	r3, [r2, #28]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
 1aa:	4770      	bx	lr
 1ac:	40001c00 	.word	0x40001c00
 1b0:	40000800 	.word	0x40000800

000001b4 <EDBG_COM_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void EDBG_COM_PORT_init()
{
 1b4:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1b6:	2382      	movs	r3, #130	; 0x82
 1b8:	05db      	lsls	r3, r3, #23
 1ba:	22ca      	movs	r2, #202	; 0xca
 1bc:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1be:	2501      	movs	r5, #1
 1c0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1c2:	2401      	movs	r4, #1
 1c4:	4321      	orrs	r1, r4
 1c6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1c8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1ca:	20b5      	movs	r0, #181	; 0xb5
 1cc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1ce:	3abb      	subs	r2, #187	; 0xbb
 1d0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
 1d2:	2203      	movs	r2, #3
 1d4:	4311      	orrs	r1, r2
 1d6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1d8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1da:	21cb      	movs	r1, #203	; 0xcb
 1dc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1de:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1e0:	4322      	orrs	r2, r4
 1e2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1e4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1e6:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 1e8:	39bc      	subs	r1, #188	; 0xbc
 1ea:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
 1ec:	2130      	movs	r1, #48	; 0x30
 1ee:	430a      	orrs	r2, r1
 1f0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1f2:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(EDBG_COM_TX, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(EDBG_COM_RX, PINMUX_PB11D_SERCOM4_PAD3);
}
 1f4:	bd30      	pop	{r4, r5, pc}
	...

000001f8 <EDBG_COM_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void EDBG_COM_init(void)
{
 1f8:	b510      	push	{r4, lr}
 1fa:	b082      	sub	sp, #8
	EDBG_COM_CLOCK_init();
 1fc:	4b06      	ldr	r3, [pc, #24]	; (218 <EDBG_COM_init+0x20>)
 1fe:	4798      	blx	r3
	usart_async_init(&EDBG_COM, SERCOM4, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, (void *)NULL);
 200:	2300      	movs	r3, #0
 202:	9300      	str	r3, [sp, #0]
 204:	3310      	adds	r3, #16
 206:	4a05      	ldr	r2, [pc, #20]	; (21c <EDBG_COM_init+0x24>)
 208:	4905      	ldr	r1, [pc, #20]	; (220 <EDBG_COM_init+0x28>)
 20a:	4806      	ldr	r0, [pc, #24]	; (224 <EDBG_COM_init+0x2c>)
 20c:	4c06      	ldr	r4, [pc, #24]	; (228 <EDBG_COM_init+0x30>)
 20e:	47a0      	blx	r4
	EDBG_COM_PORT_init();
 210:	4b06      	ldr	r3, [pc, #24]	; (22c <EDBG_COM_init+0x34>)
 212:	4798      	blx	r3
}
 214:	b002      	add	sp, #8
 216:	bd10      	pop	{r4, pc}
 218:	00000195 	.word	0x00000195
 21c:	20000028 	.word	0x20000028
 220:	42001400 	.word	0x42001400
 224:	20000040 	.word	0x20000040
 228:	00000545 	.word	0x00000545
 22c:	000001b5 	.word	0x000001b5

00000230 <system_init>:

void system_init(void)
{
 230:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 232:	4b0b      	ldr	r3, [pc, #44]	; (260 <system_init+0x30>)
 234:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 236:	23c0      	movs	r3, #192	; 0xc0
 238:	05db      	lsls	r3, r3, #23
 23a:	2280      	movs	r2, #128	; 0x80
 23c:	0212      	lsls	r2, r2, #8
 23e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 240:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 242:	2382      	movs	r3, #130	; 0x82
 244:	05db      	lsls	r3, r3, #23
 246:	4a07      	ldr	r2, [pc, #28]	; (264 <system_init+0x34>)
 248:	629a      	str	r2, [r3, #40]	; 0x28
 24a:	22c0      	movs	r2, #192	; 0xc0
 24c:	0612      	lsls	r2, r2, #24
 24e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 250:	214f      	movs	r1, #79	; 0x4f
 252:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 254:	2001      	movs	r0, #1
 256:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 258:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EDBG_COM_init();
 25a:	4b03      	ldr	r3, [pc, #12]	; (268 <system_init+0x38>)
 25c:	4798      	blx	r3
}
 25e:	bd10      	pop	{r4, pc}
 260:	00000789 	.word	0x00000789
 264:	40008000 	.word	0x40008000
 268:	000001f9 	.word	0x000001f9

0000026c <rx_cb_EDBG_COM>:
}

static void rx_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
	/* Receive completed */
	data_arrived = 1;
 26c:	2201      	movs	r2, #1
 26e:	4b01      	ldr	r3, [pc, #4]	; (274 <rx_cb_EDBG_COM+0x8>)
 270:	601a      	str	r2, [r3, #0]
}
 272:	4770      	bx	lr
 274:	20000038 	.word	0x20000038

00000278 <err_cb_EDBG_COM>:

static void err_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
 278:	b510      	push	{r4, lr}
	/* error handle */
	io_write(&EDBG_COM.io, example_hello_world, 12);
 27a:	220c      	movs	r2, #12
 27c:	4902      	ldr	r1, [pc, #8]	; (288 <err_cb_EDBG_COM+0x10>)
 27e:	4803      	ldr	r0, [pc, #12]	; (28c <err_cb_EDBG_COM+0x14>)
 280:	4b03      	ldr	r3, [pc, #12]	; (290 <err_cb_EDBG_COM+0x18>)
 282:	4798      	blx	r3
}
 284:	bd10      	pop	{r4, pc}
 286:	46c0      	nop			; (mov r8, r8)
 288:	20000000 	.word	0x20000000
 28c:	20000040 	.word	0x20000040
 290:	00000369 	.word	0x00000369

00000294 <tx_cb_EDBG_COM>:
{
 294:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 296:	2280      	movs	r2, #128	; 0x80
 298:	0212      	lsls	r2, r2, #8
 29a:	23c0      	movs	r3, #192	; 0xc0
 29c:	05db      	lsls	r3, r3, #23
 29e:	61da      	str	r2, [r3, #28]
	io_write(&EDBG_COM.io, example_hello_world, 12);
 2a0:	220c      	movs	r2, #12
 2a2:	4902      	ldr	r1, [pc, #8]	; (2ac <tx_cb_EDBG_COM+0x18>)
 2a4:	4802      	ldr	r0, [pc, #8]	; (2b0 <tx_cb_EDBG_COM+0x1c>)
 2a6:	4b03      	ldr	r3, [pc, #12]	; (2b4 <tx_cb_EDBG_COM+0x20>)
 2a8:	4798      	blx	r3
}
 2aa:	bd10      	pop	{r4, pc}
 2ac:	20000000 	.word	0x20000000
 2b0:	20000040 	.word	0x20000040
 2b4:	00000369 	.word	0x00000369

000002b8 <main>:

int main(void)
{
 2b8:	b530      	push	{r4, r5, lr}
 2ba:	b083      	sub	sp, #12
	uint8_t recv_char;

	atmel_start_init();
 2bc:	4b18      	ldr	r3, [pc, #96]	; (320 <main+0x68>)
 2be:	4798      	blx	r3

	usart_async_register_callback(&EDBG_COM, USART_ASYNC_TXC_CB, tx_cb_EDBG_COM);
 2c0:	4c18      	ldr	r4, [pc, #96]	; (324 <main+0x6c>)
 2c2:	4a19      	ldr	r2, [pc, #100]	; (328 <main+0x70>)
 2c4:	2101      	movs	r1, #1
 2c6:	0020      	movs	r0, r4
 2c8:	4d18      	ldr	r5, [pc, #96]	; (32c <main+0x74>)
 2ca:	47a8      	blx	r5
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_RXC_CB, rx_cb_EDBG_COM);
 2cc:	4a18      	ldr	r2, [pc, #96]	; (330 <main+0x78>)
 2ce:	2100      	movs	r1, #0
 2d0:	0020      	movs	r0, r4
 2d2:	47a8      	blx	r5
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_ERROR_CB, err_cb_EDBG_COM);
 2d4:	4a17      	ldr	r2, [pc, #92]	; (334 <main+0x7c>)
 2d6:	2102      	movs	r1, #2
 2d8:	0020      	movs	r0, r4
 2da:	47a8      	blx	r5
	usart_async_enable(&EDBG_COM);
 2dc:	0020      	movs	r0, r4
 2de:	4b16      	ldr	r3, [pc, #88]	; (338 <main+0x80>)
 2e0:	4798      	blx	r3

	io_write(&EDBG_COM.io, example_hello_world, 12);
 2e2:	220c      	movs	r2, #12
 2e4:	4915      	ldr	r1, [pc, #84]	; (33c <main+0x84>)
 2e6:	0020      	movs	r0, r4
 2e8:	4b15      	ldr	r3, [pc, #84]	; (340 <main+0x88>)
 2ea:	4798      	blx	r3
 2ec:	e012      	b.n	314 <main+0x5c>
		if (data_arrived == 0) {
			continue;
		}

		while (io_read(&EDBG_COM.io, &recv_char, 1) == 1) {
			while (io_write(&EDBG_COM.io, &recv_char, 1) != 1) {
 2ee:	2201      	movs	r2, #1
 2f0:	466b      	mov	r3, sp
 2f2:	1dd9      	adds	r1, r3, #7
 2f4:	480b      	ldr	r0, [pc, #44]	; (324 <main+0x6c>)
 2f6:	4b12      	ldr	r3, [pc, #72]	; (340 <main+0x88>)
 2f8:	4798      	blx	r3
 2fa:	2801      	cmp	r0, #1
 2fc:	d1f7      	bne.n	2ee <main+0x36>
		while (io_read(&EDBG_COM.io, &recv_char, 1) == 1) {
 2fe:	2201      	movs	r2, #1
 300:	466b      	mov	r3, sp
 302:	1dd9      	adds	r1, r3, #7
 304:	4807      	ldr	r0, [pc, #28]	; (324 <main+0x6c>)
 306:	4b0f      	ldr	r3, [pc, #60]	; (344 <main+0x8c>)
 308:	4798      	blx	r3
 30a:	2801      	cmp	r0, #1
 30c:	d0ef      	beq.n	2ee <main+0x36>
			}
		}
		data_arrived = 0;
 30e:	2200      	movs	r2, #0
 310:	4b0d      	ldr	r3, [pc, #52]	; (348 <main+0x90>)
 312:	601a      	str	r2, [r3, #0]
		if (data_arrived == 0) {
 314:	4b0c      	ldr	r3, [pc, #48]	; (348 <main+0x90>)
 316:	681b      	ldr	r3, [r3, #0]
 318:	2b00      	cmp	r3, #0
 31a:	d0fb      	beq.n	314 <main+0x5c>
 31c:	e7ef      	b.n	2fe <main+0x46>
 31e:	46c0      	nop			; (mov r8, r8)
 320:	0000011d 	.word	0x0000011d
 324:	20000040 	.word	0x20000040
 328:	00000295 	.word	0x00000295
 32c:	0000060d 	.word	0x0000060d
 330:	0000026d 	.word	0x0000026d
 334:	00000279 	.word	0x00000279
 338:	000005e1 	.word	0x000005e1
 33c:	20000000 	.word	0x20000000
 340:	00000369 	.word	0x00000369
 344:	000003a1 	.word	0x000003a1
 348:	20000038 	.word	0x20000038

0000034c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 34c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
 350:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 352:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 354:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
 358:	4770      	bx	lr

0000035a <atomic_leave_critical>:
 35a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
 35e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 360:	f383 8810 	msr	PRIMASK, r3
}
 364:	4770      	bx	lr
	...

00000368 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
 368:	b570      	push	{r4, r5, r6, lr}
 36a:	0004      	movs	r4, r0
 36c:	000d      	movs	r5, r1
 36e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
 370:	2800      	cmp	r0, #0
 372:	d00e      	beq.n	392 <io_write+0x2a>
 374:	2900      	cmp	r1, #0
 376:	d00a      	beq.n	38e <io_write+0x26>
 378:	2001      	movs	r0, #1
 37a:	2234      	movs	r2, #52	; 0x34
 37c:	4906      	ldr	r1, [pc, #24]	; (398 <io_write+0x30>)
 37e:	4b07      	ldr	r3, [pc, #28]	; (39c <io_write+0x34>)
 380:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
 382:	6823      	ldr	r3, [r4, #0]
 384:	0032      	movs	r2, r6
 386:	0029      	movs	r1, r5
 388:	0020      	movs	r0, r4
 38a:	4798      	blx	r3
}
 38c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
 38e:	2000      	movs	r0, #0
 390:	e7f3      	b.n	37a <io_write+0x12>
 392:	2000      	movs	r0, #0
 394:	e7f1      	b.n	37a <io_write+0x12>
 396:	46c0      	nop			; (mov r8, r8)
 398:	00000bc0 	.word	0x00000bc0
 39c:	00000685 	.word	0x00000685

000003a0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
 3a0:	b570      	push	{r4, r5, r6, lr}
 3a2:	0004      	movs	r4, r0
 3a4:	000d      	movs	r5, r1
 3a6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
 3a8:	2800      	cmp	r0, #0
 3aa:	d00e      	beq.n	3ca <io_read+0x2a>
 3ac:	2900      	cmp	r1, #0
 3ae:	d00a      	beq.n	3c6 <io_read+0x26>
 3b0:	2001      	movs	r0, #1
 3b2:	223d      	movs	r2, #61	; 0x3d
 3b4:	4906      	ldr	r1, [pc, #24]	; (3d0 <io_read+0x30>)
 3b6:	4b07      	ldr	r3, [pc, #28]	; (3d4 <io_read+0x34>)
 3b8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
 3ba:	6863      	ldr	r3, [r4, #4]
 3bc:	0032      	movs	r2, r6
 3be:	0029      	movs	r1, r5
 3c0:	0020      	movs	r0, r4
 3c2:	4798      	blx	r3
}
 3c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
 3c6:	2000      	movs	r0, #0
 3c8:	e7f3      	b.n	3b2 <io_read+0x12>
 3ca:	2000      	movs	r0, #0
 3cc:	e7f1      	b.n	3b2 <io_read+0x12>
 3ce:	46c0      	nop			; (mov r8, r8)
 3d0:	00000bc0 	.word	0x00000bc0
 3d4:	00000685 	.word	0x00000685

000003d8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
 3d8:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 3da:	3808      	subs	r0, #8

	descr->stat = 0;
 3dc:	2300      	movs	r3, #0
 3de:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
 3e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 3e2:	2b00      	cmp	r3, #0
 3e4:	d000      	beq.n	3e8 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
 3e6:	4798      	blx	r3
	}
}
 3e8:	bd10      	pop	{r4, pc}

000003ea <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
 3ea:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 3ec:	3808      	subs	r0, #8

	descr->stat = 0;
 3ee:	2300      	movs	r3, #0
 3f0:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
 3f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 3f4:	2b00      	cmp	r3, #0
 3f6:	d000      	beq.n	3fa <usart_error+0x10>
		descr->usart_cb.error(descr);
 3f8:	4798      	blx	r3
	}
}
 3fa:	bd10      	pop	{r4, pc}

000003fc <usart_fill_rx_buffer>:
{
 3fc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 3fe:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
 400:	302c      	adds	r0, #44	; 0x2c
 402:	4b04      	ldr	r3, [pc, #16]	; (414 <usart_fill_rx_buffer+0x18>)
 404:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
 406:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 408:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
 40a:	2b00      	cmp	r3, #0
 40c:	d001      	beq.n	412 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
 40e:	0020      	movs	r0, r4
 410:	4798      	blx	r3
}
 412:	bd10      	pop	{r4, pc}
 414:	00000725 	.word	0x00000725

00000418 <usart_async_write>:
{
 418:	b570      	push	{r4, r5, r6, lr}
 41a:	0004      	movs	r4, r0
 41c:	000e      	movs	r6, r1
 41e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
 420:	2800      	cmp	r0, #0
 422:	d01d      	beq.n	460 <usart_async_write+0x48>
 424:	2900      	cmp	r1, #0
 426:	d01d      	beq.n	464 <usart_async_write+0x4c>
 428:	2a00      	cmp	r2, #0
 42a:	d11d      	bne.n	468 <usart_async_write+0x50>
 42c:	2000      	movs	r0, #0
 42e:	223c      	movs	r2, #60	; 0x3c
 430:	32ff      	adds	r2, #255	; 0xff
 432:	4910      	ldr	r1, [pc, #64]	; (474 <usart_async_write+0x5c>)
 434:	4b10      	ldr	r3, [pc, #64]	; (478 <usart_async_write+0x60>)
 436:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
 438:	2344      	movs	r3, #68	; 0x44
 43a:	5ae2      	ldrh	r2, [r4, r3]
 43c:	3308      	adds	r3, #8
 43e:	5ae3      	ldrh	r3, [r4, r3]
 440:	429a      	cmp	r2, r3
 442:	d113      	bne.n	46c <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
 444:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
 446:	234c      	movs	r3, #76	; 0x4c
 448:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
 44a:	2200      	movs	r2, #0
 44c:	3b08      	subs	r3, #8
 44e:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
 450:	3b43      	subs	r3, #67	; 0x43
 452:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
 454:	0020      	movs	r0, r4
 456:	3008      	adds	r0, #8
 458:	4b08      	ldr	r3, [pc, #32]	; (47c <usart_async_write+0x64>)
 45a:	4798      	blx	r3
	return (int32_t)length;
 45c:	0028      	movs	r0, r5
}
 45e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
 460:	2000      	movs	r0, #0
 462:	e7e4      	b.n	42e <usart_async_write+0x16>
 464:	2000      	movs	r0, #0
 466:	e7e2      	b.n	42e <usart_async_write+0x16>
 468:	2001      	movs	r0, #1
 46a:	e7e0      	b.n	42e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
 46c:	201c      	movs	r0, #28
 46e:	4240      	negs	r0, r0
 470:	e7f5      	b.n	45e <usart_async_write+0x46>
 472:	46c0      	nop			; (mov r8, r8)
 474:	00000bd4 	.word	0x00000bd4
 478:	00000685 	.word	0x00000685
 47c:	00000adb 	.word	0x00000adb

00000480 <usart_process_byte_sent>:
{
 480:	b570      	push	{r4, r5, r6, lr}
 482:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
 484:	0002      	movs	r2, r0
 486:	3a08      	subs	r2, #8
 488:	2344      	movs	r3, #68	; 0x44
 48a:	5ad3      	ldrh	r3, [r2, r3]
 48c:	214c      	movs	r1, #76	; 0x4c
 48e:	5a52      	ldrh	r2, [r2, r1]
 490:	4293      	cmp	r3, r2
 492:	d00d      	beq.n	4b0 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
 494:	0002      	movs	r2, r0
 496:	6c01      	ldr	r1, [r0, #64]	; 0x40
 498:	3a08      	subs	r2, #8
 49a:	1c5d      	adds	r5, r3, #1
 49c:	2044      	movs	r0, #68	; 0x44
 49e:	5215      	strh	r5, [r2, r0]
 4a0:	5cc9      	ldrb	r1, [r1, r3]
 4a2:	0020      	movs	r0, r4
 4a4:	4b04      	ldr	r3, [pc, #16]	; (4b8 <usart_process_byte_sent+0x38>)
 4a6:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
 4a8:	0020      	movs	r0, r4
 4aa:	4b04      	ldr	r3, [pc, #16]	; (4bc <usart_process_byte_sent+0x3c>)
 4ac:	4798      	blx	r3
}
 4ae:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
 4b0:	4b03      	ldr	r3, [pc, #12]	; (4c0 <usart_process_byte_sent+0x40>)
 4b2:	4798      	blx	r3
}
 4b4:	e7fb      	b.n	4ae <usart_process_byte_sent+0x2e>
 4b6:	46c0      	nop			; (mov r8, r8)
 4b8:	00000ad3 	.word	0x00000ad3
 4bc:	00000adb 	.word	0x00000adb
 4c0:	00000ae3 	.word	0x00000ae3

000004c4 <usart_async_read>:
{
 4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 4c6:	b085      	sub	sp, #20
 4c8:	0004      	movs	r4, r0
 4ca:	000d      	movs	r5, r1
 4cc:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
 4ce:	2800      	cmp	r0, #0
 4d0:	d017      	beq.n	502 <usart_async_read+0x3e>
 4d2:	2900      	cmp	r1, #0
 4d4:	d017      	beq.n	506 <usart_async_read+0x42>
 4d6:	2a00      	cmp	r2, #0
 4d8:	d117      	bne.n	50a <usart_async_read+0x46>
 4da:	2000      	movs	r0, #0
 4dc:	22ac      	movs	r2, #172	; 0xac
 4de:	0052      	lsls	r2, r2, #1
 4e0:	4912      	ldr	r1, [pc, #72]	; (52c <usart_async_read+0x68>)
 4e2:	4b13      	ldr	r3, [pc, #76]	; (530 <usart_async_read+0x6c>)
 4e4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
 4e6:	a803      	add	r0, sp, #12
 4e8:	4b12      	ldr	r3, [pc, #72]	; (534 <usart_async_read+0x70>)
 4ea:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
 4ec:	3434      	adds	r4, #52	; 0x34
 4ee:	0020      	movs	r0, r4
 4f0:	9401      	str	r4, [sp, #4]
 4f2:	4b11      	ldr	r3, [pc, #68]	; (538 <usart_async_read+0x74>)
 4f4:	4798      	blx	r3
 4f6:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
 4f8:	a803      	add	r0, sp, #12
 4fa:	4b10      	ldr	r3, [pc, #64]	; (53c <usart_async_read+0x78>)
 4fc:	4798      	blx	r3
	uint16_t                       was_read = 0;
 4fe:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
 500:	e00b      	b.n	51a <usart_async_read+0x56>
	ASSERT(descr && buf && length);
 502:	2000      	movs	r0, #0
 504:	e7ea      	b.n	4dc <usart_async_read+0x18>
 506:	2000      	movs	r0, #0
 508:	e7e8      	b.n	4dc <usart_async_read+0x18>
 50a:	2001      	movs	r0, #1
 50c:	e7e6      	b.n	4dc <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
 50e:	3401      	adds	r4, #1
 510:	b2a4      	uxth	r4, r4
 512:	1869      	adds	r1, r5, r1
 514:	9801      	ldr	r0, [sp, #4]
 516:	4b0a      	ldr	r3, [pc, #40]	; (540 <usart_async_read+0x7c>)
 518:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
 51a:	0021      	movs	r1, r4
 51c:	42a7      	cmp	r7, r4
 51e:	d901      	bls.n	524 <usart_async_read+0x60>
 520:	42b4      	cmp	r4, r6
 522:	d3f4      	bcc.n	50e <usart_async_read+0x4a>
}
 524:	0020      	movs	r0, r4
 526:	b005      	add	sp, #20
 528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 52a:	46c0      	nop			; (mov r8, r8)
 52c:	00000bd4 	.word	0x00000bd4
 530:	00000685 	.word	0x00000685
 534:	0000034d 	.word	0x0000034d
 538:	00000765 	.word	0x00000765
 53c:	0000035b 	.word	0x0000035b
 540:	000006d9 	.word	0x000006d9

00000544 <usart_async_init>:
{
 544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 546:	0004      	movs	r4, r0
 548:	000d      	movs	r5, r1
 54a:	0016      	movs	r6, r2
 54c:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
 54e:	2800      	cmp	r0, #0
 550:	d026      	beq.n	5a0 <usart_async_init+0x5c>
 552:	2900      	cmp	r1, #0
 554:	d026      	beq.n	5a4 <usart_async_init+0x60>
 556:	2a00      	cmp	r2, #0
 558:	d026      	beq.n	5a8 <usart_async_init+0x64>
 55a:	2b00      	cmp	r3, #0
 55c:	d126      	bne.n	5ac <usart_async_init+0x68>
 55e:	2000      	movs	r0, #0
 560:	223a      	movs	r2, #58	; 0x3a
 562:	4915      	ldr	r1, [pc, #84]	; (5b8 <usart_async_init+0x74>)
 564:	4b15      	ldr	r3, [pc, #84]	; (5bc <usart_async_init+0x78>)
 566:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
 568:	0020      	movs	r0, r4
 56a:	3034      	adds	r0, #52	; 0x34
 56c:	003a      	movs	r2, r7
 56e:	0031      	movs	r1, r6
 570:	4b13      	ldr	r3, [pc, #76]	; (5c0 <usart_async_init+0x7c>)
 572:	4798      	blx	r3
 574:	2800      	cmp	r0, #0
 576:	d11b      	bne.n	5b0 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
 578:	0020      	movs	r0, r4
 57a:	3008      	adds	r0, #8
 57c:	0029      	movs	r1, r5
 57e:	4b11      	ldr	r3, [pc, #68]	; (5c4 <usart_async_init+0x80>)
 580:	4798      	blx	r3
	if (init_status) {
 582:	2800      	cmp	r0, #0
 584:	d10b      	bne.n	59e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
 586:	4b10      	ldr	r3, [pc, #64]	; (5c8 <usart_async_init+0x84>)
 588:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
 58a:	4b10      	ldr	r3, [pc, #64]	; (5cc <usart_async_init+0x88>)
 58c:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
 58e:	4b10      	ldr	r3, [pc, #64]	; (5d0 <usart_async_init+0x8c>)
 590:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
 592:	4b10      	ldr	r3, [pc, #64]	; (5d4 <usart_async_init+0x90>)
 594:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
 596:	4b10      	ldr	r3, [pc, #64]	; (5d8 <usart_async_init+0x94>)
 598:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
 59a:	4b10      	ldr	r3, [pc, #64]	; (5dc <usart_async_init+0x98>)
 59c:	6163      	str	r3, [r4, #20]
}
 59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
 5a0:	2000      	movs	r0, #0
 5a2:	e7dd      	b.n	560 <usart_async_init+0x1c>
 5a4:	2000      	movs	r0, #0
 5a6:	e7db      	b.n	560 <usart_async_init+0x1c>
 5a8:	2000      	movs	r0, #0
 5aa:	e7d9      	b.n	560 <usart_async_init+0x1c>
 5ac:	2001      	movs	r0, #1
 5ae:	e7d7      	b.n	560 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
 5b0:	200d      	movs	r0, #13
 5b2:	4240      	negs	r0, r0
 5b4:	e7f3      	b.n	59e <usart_async_init+0x5a>
 5b6:	46c0      	nop			; (mov r8, r8)
 5b8:	00000bd4 	.word	0x00000bd4
 5bc:	00000685 	.word	0x00000685
 5c0:	0000068d 	.word	0x0000068d
 5c4:	00000a35 	.word	0x00000a35
 5c8:	000004c5 	.word	0x000004c5
 5cc:	00000419 	.word	0x00000419
 5d0:	00000481 	.word	0x00000481
 5d4:	000003fd 	.word	0x000003fd
 5d8:	000003d9 	.word	0x000003d9
 5dc:	000003eb 	.word	0x000003eb

000005e0 <usart_async_enable>:
{
 5e0:	b510      	push	{r4, lr}
 5e2:	0004      	movs	r4, r0
	ASSERT(descr);
 5e4:	1e43      	subs	r3, r0, #1
 5e6:	4198      	sbcs	r0, r3
 5e8:	b2c0      	uxtb	r0, r0
 5ea:	2261      	movs	r2, #97	; 0x61
 5ec:	4904      	ldr	r1, [pc, #16]	; (600 <usart_async_enable+0x20>)
 5ee:	4b05      	ldr	r3, [pc, #20]	; (604 <usart_async_enable+0x24>)
 5f0:	4798      	blx	r3
	_usart_async_enable(&descr->device);
 5f2:	0020      	movs	r0, r4
 5f4:	3008      	adds	r0, #8
 5f6:	4b04      	ldr	r3, [pc, #16]	; (608 <usart_async_enable+0x28>)
 5f8:	4798      	blx	r3
}
 5fa:	2000      	movs	r0, #0
 5fc:	bd10      	pop	{r4, pc}
 5fe:	46c0      	nop			; (mov r8, r8)
 600:	00000bd4 	.word	0x00000bd4
 604:	00000685 	.word	0x00000685
 608:	00000ac1 	.word	0x00000ac1

0000060c <usart_async_register_callback>:
{
 60c:	b570      	push	{r4, r5, r6, lr}
 60e:	0005      	movs	r5, r0
 610:	000e      	movs	r6, r1
 612:	0014      	movs	r4, r2
	ASSERT(descr);
 614:	1e43      	subs	r3, r0, #1
 616:	4198      	sbcs	r0, r3
 618:	b2c0      	uxtb	r0, r0
 61a:	2283      	movs	r2, #131	; 0x83
 61c:	4916      	ldr	r1, [pc, #88]	; (678 <usart_async_register_callback+0x6c>)
 61e:	4b17      	ldr	r3, [pc, #92]	; (67c <usart_async_register_callback+0x70>)
 620:	4798      	blx	r3
	switch (type) {
 622:	2e01      	cmp	r6, #1
 624:	d011      	beq.n	64a <usart_async_register_callback+0x3e>
 626:	2e00      	cmp	r6, #0
 628:	d004      	beq.n	634 <usart_async_register_callback+0x28>
 62a:	2e02      	cmp	r6, #2
 62c:	d018      	beq.n	660 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
 62e:	200d      	movs	r0, #13
 630:	4240      	negs	r0, r0
 632:	e009      	b.n	648 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
 634:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
 636:	1e62      	subs	r2, r4, #1
 638:	4194      	sbcs	r4, r2
 63a:	b2e2      	uxtb	r2, r4
 63c:	0028      	movs	r0, r5
 63e:	3008      	adds	r0, #8
 640:	2101      	movs	r1, #1
 642:	4b0f      	ldr	r3, [pc, #60]	; (680 <usart_async_register_callback+0x74>)
 644:	4798      	blx	r3
	return ERR_NONE;
 646:	2000      	movs	r0, #0
}
 648:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
 64a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
 64c:	1e62      	subs	r2, r4, #1
 64e:	4194      	sbcs	r4, r2
 650:	b2e2      	uxtb	r2, r4
 652:	0028      	movs	r0, r5
 654:	3008      	adds	r0, #8
 656:	2102      	movs	r1, #2
 658:	4b09      	ldr	r3, [pc, #36]	; (680 <usart_async_register_callback+0x74>)
 65a:	4798      	blx	r3
	return ERR_NONE;
 65c:	2000      	movs	r0, #0
		break;
 65e:	e7f3      	b.n	648 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
 660:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
 662:	1e62      	subs	r2, r4, #1
 664:	4194      	sbcs	r4, r2
 666:	b2e2      	uxtb	r2, r4
 668:	0028      	movs	r0, r5
 66a:	3008      	adds	r0, #8
 66c:	2103      	movs	r1, #3
 66e:	4b04      	ldr	r3, [pc, #16]	; (680 <usart_async_register_callback+0x74>)
 670:	4798      	blx	r3
	return ERR_NONE;
 672:	2000      	movs	r0, #0
		break;
 674:	e7e8      	b.n	648 <usart_async_register_callback+0x3c>
 676:	46c0      	nop			; (mov r8, r8)
 678:	00000bd4 	.word	0x00000bd4
 67c:	00000685 	.word	0x00000685
 680:	00000aed 	.word	0x00000aed

00000684 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 684:	2800      	cmp	r0, #0
 686:	d100      	bne.n	68a <assert+0x6>
		__asm("BKPT #0");
 688:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 68a:	4770      	bx	lr

0000068c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
 68c:	b570      	push	{r4, r5, r6, lr}
 68e:	0004      	movs	r4, r0
 690:	000e      	movs	r6, r1
 692:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
 694:	2800      	cmp	r0, #0
 696:	d012      	beq.n	6be <ringbuffer_init+0x32>
 698:	2900      	cmp	r1, #0
 69a:	d012      	beq.n	6c2 <ringbuffer_init+0x36>
 69c:	2a00      	cmp	r2, #0
 69e:	d112      	bne.n	6c6 <ringbuffer_init+0x3a>
 6a0:	2000      	movs	r0, #0
 6a2:	2228      	movs	r2, #40	; 0x28
 6a4:	490a      	ldr	r1, [pc, #40]	; (6d0 <ringbuffer_init+0x44>)
 6a6:	4b0b      	ldr	r3, [pc, #44]	; (6d4 <ringbuffer_init+0x48>)
 6a8:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
 6aa:	1e6b      	subs	r3, r5, #1
 6ac:	422b      	tst	r3, r5
 6ae:	d10c      	bne.n	6ca <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
 6b0:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
 6b2:	2300      	movs	r3, #0
 6b4:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
 6b6:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
 6b8:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
 6ba:	2000      	movs	r0, #0
}
 6bc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
 6be:	2000      	movs	r0, #0
 6c0:	e7ef      	b.n	6a2 <ringbuffer_init+0x16>
 6c2:	2000      	movs	r0, #0
 6c4:	e7ed      	b.n	6a2 <ringbuffer_init+0x16>
 6c6:	2001      	movs	r0, #1
 6c8:	e7eb      	b.n	6a2 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
 6ca:	200d      	movs	r0, #13
 6cc:	4240      	negs	r0, r0
 6ce:	e7f5      	b.n	6bc <ringbuffer_init+0x30>
 6d0:	00000bf4 	.word	0x00000bf4
 6d4:	00000685 	.word	0x00000685

000006d8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
 6d8:	b570      	push	{r4, r5, r6, lr}
 6da:	0004      	movs	r4, r0
 6dc:	000d      	movs	r5, r1
	ASSERT(rb && data);
 6de:	2800      	cmp	r0, #0
 6e0:	d016      	beq.n	710 <ringbuffer_get+0x38>
 6e2:	2900      	cmp	r1, #0
 6e4:	d012      	beq.n	70c <ringbuffer_get+0x34>
 6e6:	2001      	movs	r0, #1
 6e8:	2240      	movs	r2, #64	; 0x40
 6ea:	490c      	ldr	r1, [pc, #48]	; (71c <ringbuffer_get+0x44>)
 6ec:	4b0c      	ldr	r3, [pc, #48]	; (720 <ringbuffer_get+0x48>)
 6ee:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
 6f0:	68a3      	ldr	r3, [r4, #8]
 6f2:	68e2      	ldr	r2, [r4, #12]
 6f4:	429a      	cmp	r2, r3
 6f6:	d00d      	beq.n	714 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
 6f8:	6862      	ldr	r2, [r4, #4]
 6fa:	4013      	ands	r3, r2
 6fc:	6822      	ldr	r2, [r4, #0]
 6fe:	5cd3      	ldrb	r3, [r2, r3]
 700:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
 702:	68a3      	ldr	r3, [r4, #8]
 704:	3301      	adds	r3, #1
 706:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
 708:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
 70a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
 70c:	2000      	movs	r0, #0
 70e:	e7eb      	b.n	6e8 <ringbuffer_get+0x10>
 710:	2000      	movs	r0, #0
 712:	e7e9      	b.n	6e8 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
 714:	200a      	movs	r0, #10
 716:	4240      	negs	r0, r0
 718:	e7f7      	b.n	70a <ringbuffer_get+0x32>
 71a:	46c0      	nop			; (mov r8, r8)
 71c:	00000bf4 	.word	0x00000bf4
 720:	00000685 	.word	0x00000685

00000724 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
 724:	b570      	push	{r4, r5, r6, lr}
 726:	0004      	movs	r4, r0
 728:	000d      	movs	r5, r1
	ASSERT(rb);
 72a:	1e43      	subs	r3, r0, #1
 72c:	4198      	sbcs	r0, r3
 72e:	b2c0      	uxtb	r0, r0
 730:	2251      	movs	r2, #81	; 0x51
 732:	490a      	ldr	r1, [pc, #40]	; (75c <ringbuffer_put+0x38>)
 734:	4b0a      	ldr	r3, [pc, #40]	; (760 <ringbuffer_put+0x3c>)
 736:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
 738:	6863      	ldr	r3, [r4, #4]
 73a:	68e2      	ldr	r2, [r4, #12]
 73c:	4013      	ands	r3, r2
 73e:	6822      	ldr	r2, [r4, #0]
 740:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
 742:	68e3      	ldr	r3, [r4, #12]
 744:	68a2      	ldr	r2, [r4, #8]
 746:	1a9a      	subs	r2, r3, r2
 748:	6861      	ldr	r1, [r4, #4]
 74a:	428a      	cmp	r2, r1
 74c:	d901      	bls.n	752 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
 74e:	1a59      	subs	r1, r3, r1
 750:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
 752:	3301      	adds	r3, #1
 754:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
 756:	2000      	movs	r0, #0
 758:	bd70      	pop	{r4, r5, r6, pc}
 75a:	46c0      	nop			; (mov r8, r8)
 75c:	00000bf4 	.word	0x00000bf4
 760:	00000685 	.word	0x00000685

00000764 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
 764:	b510      	push	{r4, lr}
 766:	0004      	movs	r4, r0
	ASSERT(rb);
 768:	1e43      	subs	r3, r0, #1
 76a:	4198      	sbcs	r0, r3
 76c:	b2c0      	uxtb	r0, r0
 76e:	2267      	movs	r2, #103	; 0x67
 770:	4903      	ldr	r1, [pc, #12]	; (780 <ringbuffer_num+0x1c>)
 772:	4b04      	ldr	r3, [pc, #16]	; (784 <ringbuffer_num+0x20>)
 774:	4798      	blx	r3

	return rb->write_index - rb->read_index;
 776:	68e0      	ldr	r0, [r4, #12]
 778:	68a3      	ldr	r3, [r4, #8]
 77a:	1ac0      	subs	r0, r0, r3
}
 77c:	bd10      	pop	{r4, pc}
 77e:	46c0      	nop			; (mov r8, r8)
 780:	00000bf4 	.word	0x00000bf4
 784:	00000685 	.word	0x00000685

00000788 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 788:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 78a:	4b08      	ldr	r3, [pc, #32]	; (7ac <_init_chip+0x24>)
 78c:	685a      	ldr	r2, [r3, #4]
 78e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
 790:	4b07      	ldr	r3, [pc, #28]	; (7b0 <_init_chip+0x28>)
 792:	4798      	blx	r3
	_oscctrl_init_sources();
 794:	4b07      	ldr	r3, [pc, #28]	; (7b4 <_init_chip+0x2c>)
 796:	4798      	blx	r3
	_mclk_init();
 798:	4b07      	ldr	r3, [pc, #28]	; (7b8 <_init_chip+0x30>)
 79a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <_init_chip+0x34>)
 79e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 7a0:	20ff      	movs	r0, #255	; 0xff
 7a2:	4b07      	ldr	r3, [pc, #28]	; (7c0 <_init_chip+0x38>)
 7a4:	4798      	blx	r3

	_div_init();
 7a6:	4b07      	ldr	r3, [pc, #28]	; (7c4 <_init_chip+0x3c>)
 7a8:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 7aa:	bd10      	pop	{r4, pc}
 7ac:	41004000 	.word	0x41004000
 7b0:	00000809 	.word	0x00000809
 7b4:	00000825 	.word	0x00000825
 7b8:	000007fd 	.word	0x000007fd
 7bc:	00000861 	.word	0x00000861
 7c0:	000007d9 	.word	0x000007d9
 7c4:	000007c9 	.word	0x000007c9

000007c8 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
 7c8:	2290      	movs	r2, #144	; 0x90
 7ca:	05d2      	lsls	r2, r2, #23
 7cc:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
 7ce:	2102      	movs	r1, #2
 7d0:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
 7d2:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
 7d4:	4770      	bx	lr
	...

000007d8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 7d8:	07c3      	lsls	r3, r0, #31
 7da:	d507      	bpl.n	7ec <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 7dc:	4a04      	ldr	r2, [pc, #16]	; (7f0 <_gclk_init_generators_by_fref+0x18>)
 7de:	4b05      	ldr	r3, [pc, #20]	; (7f4 <_gclk_init_generators_by_fref+0x1c>)
 7e0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 7e2:	4b04      	ldr	r3, [pc, #16]	; (7f4 <_gclk_init_generators_by_fref+0x1c>)
 7e4:	685a      	ldr	r2, [r3, #4]
 7e6:	4b04      	ldr	r3, [pc, #16]	; (7f8 <_gclk_init_generators_by_fref+0x20>)
 7e8:	421a      	tst	r2, r3
 7ea:	d1fa      	bne.n	7e2 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 7ec:	4770      	bx	lr
 7ee:	46c0      	nop			; (mov r8, r8)
 7f0:	00010106 	.word	0x00010106
 7f4:	40001c00 	.word	0x40001c00
 7f8:	000007fd 	.word	0x000007fd

000007fc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
 7fc:	2201      	movs	r2, #1
 7fe:	4b01      	ldr	r3, [pc, #4]	; (804 <_mclk_init+0x8>)
 800:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 802:	4770      	bx	lr
 804:	40000800 	.word	0x40000800

00000808 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 808:	4a05      	ldr	r2, [pc, #20]	; (820 <_osc32kctrl_init_sources+0x18>)
 80a:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
 80c:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 80e:	021b      	lsls	r3, r3, #8
 810:	21f8      	movs	r1, #248	; 0xf8
 812:	0149      	lsls	r1, r1, #5
 814:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 816:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 818:	2301      	movs	r3, #1
 81a:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 81c:	4770      	bx	lr
 81e:	46c0      	nop			; (mov r8, r8)
 820:	40001400 	.word	0x40001400

00000824 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
 824:	4b0d      	ldr	r3, [pc, #52]	; (85c <_oscctrl_init_sources+0x38>)
 826:	2202      	movs	r2, #2
 828:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
 82a:	3209      	adds	r2, #9
 82c:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
 82e:	4b0b      	ldr	r3, [pc, #44]	; (85c <_oscctrl_init_sources+0x38>)
 830:	699b      	ldr	r3, [r3, #24]
 832:	075b      	lsls	r3, r3, #29
 834:	d4fb      	bmi.n	82e <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
 836:	4b09      	ldr	r3, [pc, #36]	; (85c <_oscctrl_init_sources+0x38>)
 838:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
 83a:	075b      	lsls	r3, r3, #29
 83c:	d4fb      	bmi.n	836 <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
 83e:	2207      	movs	r2, #7
 840:	4b06      	ldr	r3, [pc, #24]	; (85c <_oscctrl_init_sources+0x38>)
 842:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
 844:	4b05      	ldr	r3, [pc, #20]	; (85c <_oscctrl_init_sources+0x38>)
 846:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
 848:	06db      	lsls	r3, r3, #27
 84a:	d5fb      	bpl.n	844 <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
 84c:	4a03      	ldr	r2, [pc, #12]	; (85c <_oscctrl_init_sources+0x38>)
 84e:	7d13      	ldrb	r3, [r2, #20]
 850:	2180      	movs	r1, #128	; 0x80
 852:	4249      	negs	r1, r1
 854:	430b      	orrs	r3, r1
 856:	b2db      	uxtb	r3, r3
 858:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 85a:	4770      	bx	lr
 85c:	40001000 	.word	0x40001000

00000860 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 860:	4770      	bx	lr
	...

00000864 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
 864:	4b02      	ldr	r3, [pc, #8]	; (870 <_sercom_get_hardware_index+0xc>)
 866:	469c      	mov	ip, r3
 868:	4460      	add	r0, ip
 86a:	0a80      	lsrs	r0, r0, #10
 86c:	b2c0      	uxtb	r0, r0
}
 86e:	4770      	bx	lr
 870:	bdfffc00 	.word	0xbdfffc00

00000874 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
 874:	b510      	push	{r4, lr}
	void *hw = device->hw;
 876:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
 878:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
 87a:	07db      	lsls	r3, r3, #31
 87c:	d502      	bpl.n	884 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
 87e:	7da3      	ldrb	r3, [r4, #22]
 880:	07db      	lsls	r3, r3, #31
 882:	d40f      	bmi.n	8a4 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
 884:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
 886:	079b      	lsls	r3, r3, #30
 888:	d502      	bpl.n	890 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
 88a:	7da3      	ldrb	r3, [r4, #22]
 88c:	079b      	lsls	r3, r3, #30
 88e:	d40e      	bmi.n	8ae <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
 890:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
 892:	075b      	lsls	r3, r3, #29
 894:	d515      	bpl.n	8c2 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
 896:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
 898:	2337      	movs	r3, #55	; 0x37
 89a:	421a      	tst	r2, r3
 89c:	d00c      	beq.n	8b8 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
 89e:	3348      	adds	r3, #72	; 0x48
 8a0:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
 8a2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
 8a4:	2301      	movs	r3, #1
 8a6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
 8a8:	6803      	ldr	r3, [r0, #0]
 8aa:	4798      	blx	r3
 8ac:	e7f9      	b.n	8a2 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
 8ae:	2302      	movs	r3, #2
 8b0:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
 8b2:	6883      	ldr	r3, [r0, #8]
 8b4:	4798      	blx	r3
 8b6:	e7f4      	b.n	8a2 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
 8b8:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
 8ba:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8bc:	b2c9      	uxtb	r1, r1
 8be:	4798      	blx	r3
 8c0:	e7ef      	b.n	8a2 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
 8c2:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
 8c4:	09db      	lsrs	r3, r3, #7
 8c6:	d0ec      	beq.n	8a2 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
 8c8:	2380      	movs	r3, #128	; 0x80
 8ca:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
 8cc:	68c3      	ldr	r3, [r0, #12]
 8ce:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
 8d0:	8b63      	ldrh	r3, [r4, #26]
 8d2:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
 8d4:	8363      	strh	r3, [r4, #26]
 8d6:	e7e4      	b.n	8a2 <_sercom_usart_interrupt_handler+0x2e>

000008d8 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
 8d8:	4b03      	ldr	r3, [pc, #12]	; (8e8 <_sercom_init_irq_param+0x10>)
 8da:	4298      	cmp	r0, r3
 8dc:	d000      	beq.n	8e0 <_sercom_init_irq_param+0x8>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}
}
 8de:	4770      	bx	lr
		_sercom4_dev = (struct _usart_async_device *)dev;
 8e0:	4b02      	ldr	r3, [pc, #8]	; (8ec <_sercom_init_irq_param+0x14>)
 8e2:	6019      	str	r1, [r3, #0]
}
 8e4:	e7fb      	b.n	8de <_sercom_init_irq_param+0x6>
 8e6:	46c0      	nop			; (mov r8, r8)
 8e8:	42001400 	.word	0x42001400
 8ec:	2000003c 	.word	0x2000003c

000008f0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
 8f0:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
 8f2:	4b02      	ldr	r3, [pc, #8]	; (8fc <_sercom_get_irq_num+0xc>)
 8f4:	4798      	blx	r3
 8f6:	3009      	adds	r0, #9
 8f8:	b2c0      	uxtb	r0, r0
}
 8fa:	bd10      	pop	{r4, pc}
 8fc:	00000865 	.word	0x00000865

00000900 <_get_sercom_index>:
{
 900:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
 902:	4b0b      	ldr	r3, [pc, #44]	; (930 <_get_sercom_index+0x30>)
 904:	4798      	blx	r3
 906:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
 908:	2000      	movs	r0, #0
 90a:	2800      	cmp	r0, #0
 90c:	d006      	beq.n	91c <_get_sercom_index+0x1c>
	ASSERT(false);
 90e:	4a09      	ldr	r2, [pc, #36]	; (934 <_get_sercom_index+0x34>)
 910:	4909      	ldr	r1, [pc, #36]	; (938 <_get_sercom_index+0x38>)
 912:	2000      	movs	r0, #0
 914:	4b09      	ldr	r3, [pc, #36]	; (93c <_get_sercom_index+0x3c>)
 916:	4798      	blx	r3
	return 0;
 918:	2000      	movs	r0, #0
}
 91a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
 91c:	0083      	lsls	r3, r0, #2
 91e:	181b      	adds	r3, r3, r0
 920:	0099      	lsls	r1, r3, #2
 922:	4b07      	ldr	r3, [pc, #28]	; (940 <_get_sercom_index+0x40>)
 924:	5ccb      	ldrb	r3, [r1, r3]
 926:	429a      	cmp	r2, r3
 928:	d0f7      	beq.n	91a <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
 92a:	3001      	adds	r0, #1
 92c:	b2c0      	uxtb	r0, r0
 92e:	e7ec      	b.n	90a <_get_sercom_index+0xa>
 930:	00000865 	.word	0x00000865
 934:	0000025e 	.word	0x0000025e
 938:	00000c68 	.word	0x00000c68
 93c:	00000685 	.word	0x00000685
 940:	00000c18 	.word	0x00000c18

00000944 <_usart_init>:
{
 944:	b570      	push	{r4, r5, r6, lr}
 946:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
 948:	4b38      	ldr	r3, [pc, #224]	; (a2c <_usart_init+0xe8>)
 94a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
 94c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
 94e:	07db      	lsls	r3, r3, #31
 950:	d41d      	bmi.n	98e <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
 952:	0083      	lsls	r3, r0, #2
 954:	181b      	adds	r3, r3, r0
 956:	009a      	lsls	r2, r3, #2
 958:	4b35      	ldr	r3, [pc, #212]	; (a30 <_usart_init+0xec>)
 95a:	189b      	adds	r3, r3, r2
 95c:	685a      	ldr	r2, [r3, #4]
 95e:	231c      	movs	r3, #28
 960:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 962:	69e3      	ldr	r3, [r4, #28]
 964:	079b      	lsls	r3, r3, #30
 966:	d1fc      	bne.n	962 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
 968:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
 96a:	079b      	lsls	r3, r3, #30
 96c:	d509      	bpl.n	982 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
 96e:	6823      	ldr	r3, [r4, #0]
 970:	2102      	movs	r1, #2
 972:	438b      	bics	r3, r1
 974:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 976:	69e3      	ldr	r3, [r4, #28]
 978:	079b      	lsls	r3, r3, #30
 97a:	d1fc      	bne.n	976 <_usart_init+0x32>
 97c:	69e3      	ldr	r3, [r4, #28]
 97e:	079b      	lsls	r3, r3, #30
 980:	d4fc      	bmi.n	97c <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
 982:	2301      	movs	r3, #1
 984:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
 986:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 988:	69e3      	ldr	r3, [r4, #28]
 98a:	079b      	lsls	r3, r3, #30
 98c:	d1fc      	bne.n	988 <_usart_init+0x44>
 98e:	69e3      	ldr	r3, [r4, #28]
 990:	07db      	lsls	r3, r3, #31
 992:	d4fc      	bmi.n	98e <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
 994:	0083      	lsls	r3, r0, #2
 996:	181b      	adds	r3, r3, r0
 998:	009a      	lsls	r2, r3, #2
 99a:	4b25      	ldr	r3, [pc, #148]	; (a30 <_usart_init+0xec>)
 99c:	189b      	adds	r3, r3, r2
 99e:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
 9a0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 9a2:	69e3      	ldr	r3, [r4, #28]
 9a4:	079b      	lsls	r3, r3, #30
 9a6:	d1fc      	bne.n	9a2 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
 9a8:	0083      	lsls	r3, r0, #2
 9aa:	181b      	adds	r3, r3, r0
 9ac:	009a      	lsls	r2, r3, #2
 9ae:	4b20      	ldr	r3, [pc, #128]	; (a30 <_usart_init+0xec>)
 9b0:	189b      	adds	r3, r3, r2
 9b2:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
 9b4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 9b6:	69e3      	ldr	r3, [r4, #28]
 9b8:	075b      	lsls	r3, r3, #29
 9ba:	d1fc      	bne.n	9b6 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
 9bc:	0083      	lsls	r3, r0, #2
 9be:	181b      	adds	r3, r3, r0
 9c0:	009a      	lsls	r2, r3, #2
 9c2:	4b1b      	ldr	r3, [pc, #108]	; (a30 <_usart_init+0xec>)
 9c4:	189b      	adds	r3, r3, r2
 9c6:	685b      	ldr	r3, [r3, #4]
 9c8:	049a      	lsls	r2, r3, #18
 9ca:	d40b      	bmi.n	9e4 <_usart_init+0xa0>
 9cc:	22c0      	movs	r2, #192	; 0xc0
 9ce:	01d2      	lsls	r2, r2, #7
 9d0:	4213      	tst	r3, r2
 9d2:	d107      	bne.n	9e4 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
 9d4:	0083      	lsls	r3, r0, #2
 9d6:	181b      	adds	r3, r3, r0
 9d8:	009a      	lsls	r2, r3, #2
 9da:	4b15      	ldr	r3, [pc, #84]	; (a30 <_usart_init+0xec>)
 9dc:	189b      	adds	r3, r3, r2
 9de:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
 9e0:	81a3      	strh	r3, [r4, #12]
 9e2:	e015      	b.n	a10 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
 9e4:	0083      	lsls	r3, r0, #2
 9e6:	181b      	adds	r3, r3, r0
 9e8:	009a      	lsls	r2, r3, #2
 9ea:	4911      	ldr	r1, [pc, #68]	; (a30 <_usart_init+0xec>)
 9ec:	1889      	adds	r1, r1, r2
 9ee:	898a      	ldrh	r2, [r1, #12]
 9f0:	89a3      	ldrh	r3, [r4, #12]
 9f2:	04d2      	lsls	r2, r2, #19
 9f4:	0cd2      	lsrs	r2, r2, #19
 9f6:	0b5b      	lsrs	r3, r3, #13
 9f8:	035b      	lsls	r3, r3, #13
 9fa:	4313      	orrs	r3, r2
 9fc:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
 9fe:	7b8b      	ldrb	r3, [r1, #14]
 a00:	2207      	movs	r2, #7
 a02:	401a      	ands	r2, r3
 a04:	89a3      	ldrh	r3, [r4, #12]
 a06:	0352      	lsls	r2, r2, #13
 a08:	04db      	lsls	r3, r3, #19
 a0a:	0cdb      	lsrs	r3, r3, #19
 a0c:	4313      	orrs	r3, r2
 a0e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
 a10:	4a07      	ldr	r2, [pc, #28]	; (a30 <_usart_init+0xec>)
 a12:	0083      	lsls	r3, r0, #2
 a14:	181d      	adds	r5, r3, r0
 a16:	00a9      	lsls	r1, r5, #2
 a18:	000d      	movs	r5, r1
 a1a:	1851      	adds	r1, r2, r1
 a1c:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
 a1e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
 a20:	1952      	adds	r2, r2, r5
 a22:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
 a24:	2330      	movs	r3, #48	; 0x30
 a26:	54e2      	strb	r2, [r4, r3]
}
 a28:	2000      	movs	r0, #0
 a2a:	bd70      	pop	{r4, r5, r6, pc}
 a2c:	00000901 	.word	0x00000901
 a30:	00000c18 	.word	0x00000c18

00000a34 <_usart_async_init>:
{
 a34:	b570      	push	{r4, r5, r6, lr}
 a36:	0006      	movs	r6, r0
 a38:	000c      	movs	r4, r1
	ASSERT(device);
 a3a:	1e43      	subs	r3, r0, #1
 a3c:	4198      	sbcs	r0, r3
 a3e:	b2c0      	uxtb	r0, r0
 a40:	22c4      	movs	r2, #196	; 0xc4
 a42:	4919      	ldr	r1, [pc, #100]	; (aa8 <_usart_async_init+0x74>)
 a44:	4b19      	ldr	r3, [pc, #100]	; (aac <_usart_async_init+0x78>)
 a46:	4798      	blx	r3
	init_status = _usart_init(hw);
 a48:	0020      	movs	r0, r4
 a4a:	4b19      	ldr	r3, [pc, #100]	; (ab0 <_usart_async_init+0x7c>)
 a4c:	4798      	blx	r3
 a4e:	1e05      	subs	r5, r0, #0
	if (init_status) {
 a50:	d001      	beq.n	a56 <_usart_async_init+0x22>
}
 a52:	0028      	movs	r0, r5
 a54:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
 a56:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
 a58:	0031      	movs	r1, r6
 a5a:	0020      	movs	r0, r4
 a5c:	4b15      	ldr	r3, [pc, #84]	; (ab4 <_usart_async_init+0x80>)
 a5e:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
 a60:	0020      	movs	r0, r4
 a62:	4b15      	ldr	r3, [pc, #84]	; (ab8 <_usart_async_init+0x84>)
 a64:	4798      	blx	r3
 a66:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 a68:	2b00      	cmp	r3, #0
 a6a:	db0a      	blt.n	a82 <_usart_async_init+0x4e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 a6c:	211f      	movs	r1, #31
 a6e:	4001      	ands	r1, r0
 a70:	2201      	movs	r2, #1
 a72:	408a      	lsls	r2, r1
 a74:	2180      	movs	r1, #128	; 0x80
 a76:	4c11      	ldr	r4, [pc, #68]	; (abc <_usart_async_init+0x88>)
 a78:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
 a7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 a7e:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 a82:	2b00      	cmp	r3, #0
 a84:	db07      	blt.n	a96 <_usart_async_init+0x62>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 a86:	211f      	movs	r1, #31
 a88:	4001      	ands	r1, r0
 a8a:	2201      	movs	r2, #1
 a8c:	408a      	lsls	r2, r1
 a8e:	21c0      	movs	r1, #192	; 0xc0
 a90:	0049      	lsls	r1, r1, #1
 a92:	4c0a      	ldr	r4, [pc, #40]	; (abc <_usart_async_init+0x88>)
 a94:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
 a96:	2b00      	cmp	r3, #0
 a98:	dbdb      	blt.n	a52 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 a9a:	231f      	movs	r3, #31
 a9c:	4018      	ands	r0, r3
 a9e:	3b1e      	subs	r3, #30
 aa0:	4083      	lsls	r3, r0
 aa2:	4a06      	ldr	r2, [pc, #24]	; (abc <_usart_async_init+0x88>)
 aa4:	6013      	str	r3, [r2, #0]
 aa6:	e7d4      	b.n	a52 <_usart_async_init+0x1e>
 aa8:	00000c68 	.word	0x00000c68
 aac:	00000685 	.word	0x00000685
 ab0:	00000945 	.word	0x00000945
 ab4:	000008d9 	.word	0x000008d9
 ab8:	000008f1 	.word	0x000008f1
 abc:	e000e100 	.word	0xe000e100

00000ac0 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
 ac0:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 ac2:	6813      	ldr	r3, [r2, #0]
 ac4:	2102      	movs	r1, #2
 ac6:	430b      	orrs	r3, r1
 ac8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 aca:	69d3      	ldr	r3, [r2, #28]
 acc:	079b      	lsls	r3, r3, #30
 ace:	d1fc      	bne.n	aca <_usart_async_enable+0xa>
}
 ad0:	4770      	bx	lr

00000ad2 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
 ad2:	6983      	ldr	r3, [r0, #24]
 ad4:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
 ad6:	8519      	strh	r1, [r3, #40]	; 0x28
}
 ad8:	4770      	bx	lr

00000ada <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
 ada:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
 adc:	2201      	movs	r2, #1
 ade:	759a      	strb	r2, [r3, #22]
}
 ae0:	4770      	bx	lr

00000ae2 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
 ae2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
 ae4:	2202      	movs	r2, #2
 ae6:	759a      	strb	r2, [r3, #22]
}
 ae8:	4770      	bx	lr
	...

00000aec <_usart_async_set_irq_state>:
{
 aec:	b570      	push	{r4, r5, r6, lr}
 aee:	0004      	movs	r4, r0
 af0:	000d      	movs	r5, r1
 af2:	0016      	movs	r6, r2
	ASSERT(device);
 af4:	1e43      	subs	r3, r0, #1
 af6:	4198      	sbcs	r0, r3
 af8:	b2c0      	uxtb	r0, r0
 afa:	4a17      	ldr	r2, [pc, #92]	; (b58 <_usart_async_set_irq_state+0x6c>)
 afc:	4917      	ldr	r1, [pc, #92]	; (b5c <_usart_async_set_irq_state+0x70>)
 afe:	4b18      	ldr	r3, [pc, #96]	; (b60 <_usart_async_set_irq_state+0x74>)
 b00:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
 b02:	2d00      	cmp	r5, #0
 b04:	d00b      	beq.n	b1e <_usart_async_set_irq_state+0x32>
 b06:	2d02      	cmp	r5, #2
 b08:	d009      	beq.n	b1e <_usart_async_set_irq_state+0x32>
	} else if (USART_ASYNC_RX_DONE == type) {
 b0a:	2d01      	cmp	r5, #1
 b0c:	d018      	beq.n	b40 <_usart_async_set_irq_state+0x54>
	} else if (USART_ASYNC_ERROR == type) {
 b0e:	2d03      	cmp	r5, #3
 b10:	d10f      	bne.n	b32 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
 b12:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 b14:	2e00      	cmp	r6, #0
 b16:	d01c      	beq.n	b52 <_usart_async_set_irq_state+0x66>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
 b18:	2280      	movs	r2, #128	; 0x80
 b1a:	759a      	strb	r2, [r3, #22]
}
 b1c:	e009      	b.n	b32 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
 b1e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 b20:	2e00      	cmp	r6, #0
 b22:	d107      	bne.n	b34 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
 b24:	2201      	movs	r2, #1
 b26:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
 b28:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 b2a:	2e00      	cmp	r6, #0
 b2c:	d105      	bne.n	b3a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
 b2e:	2202      	movs	r2, #2
 b30:	751a      	strb	r2, [r3, #20]
}
 b32:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
 b34:	2201      	movs	r2, #1
 b36:	759a      	strb	r2, [r3, #22]
 b38:	e7f6      	b.n	b28 <_usart_async_set_irq_state+0x3c>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
 b3a:	2202      	movs	r2, #2
 b3c:	759a      	strb	r2, [r3, #22]
 b3e:	e7f8      	b.n	b32 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
 b40:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 b42:	2e00      	cmp	r6, #0
 b44:	d102      	bne.n	b4c <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
 b46:	2204      	movs	r2, #4
 b48:	751a      	strb	r2, [r3, #20]
 b4a:	e7f2      	b.n	b32 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
 b4c:	2204      	movs	r2, #4
 b4e:	759a      	strb	r2, [r3, #22]
 b50:	e7ef      	b.n	b32 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
 b52:	2280      	movs	r2, #128	; 0x80
 b54:	751a      	strb	r2, [r3, #20]
 b56:	e7ec      	b.n	b32 <_usart_async_set_irq_state+0x46>
 b58:	0000021e 	.word	0x0000021e
 b5c:	00000c68 	.word	0x00000c68
 b60:	00000685 	.word	0x00000685

00000b64 <SERCOM4_Handler>:

	return NULL;
}

void SERCOM4_Handler(void)
{
 b64:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
 b66:	4b02      	ldr	r3, [pc, #8]	; (b70 <SERCOM4_Handler+0xc>)
 b68:	6818      	ldr	r0, [r3, #0]
 b6a:	4b02      	ldr	r3, [pc, #8]	; (b74 <SERCOM4_Handler+0x10>)
 b6c:	4798      	blx	r3
}
 b6e:	bd10      	pop	{r4, pc}
 b70:	2000003c 	.word	0x2000003c
 b74:	00000875 	.word	0x00000875

00000b78 <__libc_init_array>:
 b78:	b570      	push	{r4, r5, r6, lr}
 b7a:	2600      	movs	r6, #0
 b7c:	4d0c      	ldr	r5, [pc, #48]	; (bb0 <__libc_