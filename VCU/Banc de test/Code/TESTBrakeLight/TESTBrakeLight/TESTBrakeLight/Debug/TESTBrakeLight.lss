
TESTBrakeLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000282c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  0000282c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20000068  00002894  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000128  00002954  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002672e  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c40  00000000  00000000  00046817  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e380  00000000  00000000  0004a457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000da8  00000000  00000000  000587d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e00  00000000  00000000  0005957f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002309e  00000000  00000000  0005a37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016cc0  00000000  00000000  0007d41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a1184  00000000  00000000  000940dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000028f4  00000000  00000000  00135264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 21 00 20 35 01 00 00 31 01 00 00 31 01 00 00     (!. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 11 12 00 00     1...1...1.......
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 21 0f 00 00 31 01 00 00     1...1...!...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000068 	.word	0x20000068
      dc:	00000000 	.word	0x00000000
      e0:	0000282c 	.word	0x0000282c

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000006c 	.word	0x2000006c
     110:	0000282c 	.word	0x0000282c
     114:	0000282c 	.word	0x0000282c
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	00000365 	.word	0x00000365
     12c:	00001561 	.word	0x00001561

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	0000282c 	.word	0x0000282c
     17c:	20000000 	.word	0x20000000
     180:	20000068 	.word	0x20000068
     184:	20000068 	.word	0x20000068
     188:	20000128 	.word	0x20000128
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	00001581 	.word	0x00001581
     198:	000013e5 	.word	0x000013e5

0000019c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     19c:	b510      	push	{r4, lr}
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     19e:	4a07      	ldr	r2, [pc, #28]	; (1bc <TIMER_0_init+0x20>)
     1a0:	6951      	ldr	r1, [r2, #20]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	009b      	lsls	r3, r3, #2
     1a6:	430b      	orrs	r3, r1
     1a8:	6153      	str	r3, [r2, #20]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     1aa:	4b05      	ldr	r3, [pc, #20]	; (1c0 <TIMER_0_init+0x24>)
     1ac:	4798      	blx	r3
     1ae:	0002      	movs	r2, r0
     1b0:	4904      	ldr	r1, [pc, #16]	; (1c4 <TIMER_0_init+0x28>)
     1b2:	4805      	ldr	r0, [pc, #20]	; (1c8 <TIMER_0_init+0x2c>)
     1b4:	4b05      	ldr	r3, [pc, #20]	; (1cc <TIMER_0_init+0x30>)
     1b6:	4798      	blx	r3
}
     1b8:	bd10      	pop	{r4, pc}
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	40000800 	.word	0x40000800
     1c0:	0000120d 	.word	0x0000120d
     1c4:	40002400 	.word	0x40002400
     1c8:	20000104 	.word	0x20000104
     1cc:	00000885 	.word	0x00000885

000001d0 <ADC_0_init>:
{
     1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1d2:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     1d4:	4a29      	ldr	r2, [pc, #164]	; (27c <ADC_0_init+0xac>)
     1d6:	69d1      	ldr	r1, [r2, #28]
     1d8:	2380      	movs	r3, #128	; 0x80
     1da:	029b      	lsls	r3, r3, #10
     1dc:	430b      	orrs	r3, r1
     1de:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1e0:	2140      	movs	r1, #64	; 0x40
     1e2:	2382      	movs	r3, #130	; 0x82
     1e4:	005b      	lsls	r3, r3, #1
     1e6:	4a26      	ldr	r2, [pc, #152]	; (280 <ADC_0_init+0xb0>)
     1e8:	50d1      	str	r1, [r2, r3]
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], _adc_get_adc_async());
     1ea:	4b26      	ldr	r3, [pc, #152]	; (284 <ADC_0_init+0xb4>)
     1ec:	4798      	blx	r3
     1ee:	4d26      	ldr	r5, [pc, #152]	; (288 <ADC_0_init+0xb8>)
     1f0:	4e26      	ldr	r6, [pc, #152]	; (28c <ADC_0_init+0xbc>)
     1f2:	9002      	str	r0, [sp, #8]
     1f4:	4b26      	ldr	r3, [pc, #152]	; (290 <ADC_0_init+0xc0>)
     1f6:	9301      	str	r3, [sp, #4]
     1f8:	2401      	movs	r4, #1
     1fa:	9400      	str	r4, [sp, #0]
     1fc:	2300      	movs	r3, #0
     1fe:	002a      	movs	r2, r5
     200:	4924      	ldr	r1, [pc, #144]	; (294 <ADC_0_init+0xc4>)
     202:	0030      	movs	r0, r6
     204:	4f24      	ldr	r7, [pc, #144]	; (298 <ADC_0_init+0xc8>)
     206:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     208:	1d2a      	adds	r2, r5, #4
     20a:	2310      	movs	r3, #16
     20c:	2100      	movs	r1, #0
     20e:	0030      	movs	r0, r6
     210:	4d22      	ldr	r5, [pc, #136]	; (29c <ADC_0_init+0xcc>)
     212:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     214:	23c0      	movs	r3, #192	; 0xc0
     216:	05db      	lsls	r3, r3, #23
     218:	469c      	mov	ip, r3
     21a:	2280      	movs	r2, #128	; 0x80
     21c:	0092      	lsls	r2, r2, #2
     21e:	2384      	movs	r3, #132	; 0x84
     220:	4661      	mov	r1, ip
     222:	50ca      	str	r2, [r1, r3]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     224:	2382      	movs	r3, #130	; 0x82
     226:	05db      	lsls	r3, r3, #23
     228:	3a59      	subs	r2, #89	; 0x59
     22a:	3aff      	subs	r2, #255	; 0xff
     22c:	491c      	ldr	r1, [pc, #112]	; (2a0 <ADC_0_init+0xd0>)
     22e:	5099      	str	r1, [r3, r2]
     230:	21c0      	movs	r1, #192	; 0xc0
     232:	0609      	lsls	r1, r1, #24
     234:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     236:	20c9      	movs	r0, #201	; 0xc9
     238:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23c:	2701      	movs	r7, #1
     23e:	433a      	orrs	r2, r7
     240:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     242:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     244:	22b4      	movs	r2, #180	; 0xb4
     246:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     248:	260f      	movs	r6, #15
     24a:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     24c:	2510      	movs	r5, #16
     24e:	4328      	orrs	r0, r5
     250:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     252:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     254:	3aac      	subs	r2, #172	; 0xac
     256:	4660      	mov	r0, ip
     258:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     25a:	4a12      	ldr	r2, [pc, #72]	; (2a4 <ADC_0_init+0xd4>)
     25c:	629a      	str	r2, [r3, #40]	; 0x28
     25e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     260:	2243      	movs	r2, #67	; 0x43
     262:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     264:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     266:	4339      	orrs	r1, r7
     268:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     26a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     26c:	2131      	movs	r1, #49	; 0x31
     26e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     270:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     272:	432a      	orrs	r2, r5
     274:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     276:	545a      	strb	r2, [r3, r1]
}
     278:	b005      	add	sp, #20
     27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     27c:	40000800 	.word	0x40000800
     280:	40001c00 	.word	0x40001c00
     284:	00000f35 	.word	0x00000f35
     288:	20000084 	.word	0x20000084
     28c:	200000c0 	.word	0x200000c0
     290:	200000ec 	.word	0x200000ec
     294:	42004400 	.word	0x42004400
     298:	00000431 	.word	0x00000431
     29c:	000004e5 	.word	0x000004e5
     2a0:	40000200 	.word	0x40000200
     2a4:	40000008 	.word	0x40000008

000002a8 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     2a8:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2aa:	2382      	movs	r3, #130	; 0x82
     2ac:	05db      	lsls	r3, r3, #23
     2ae:	22ca      	movs	r2, #202	; 0xca
     2b0:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b2:	2501      	movs	r5, #1
     2b4:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b6:	2401      	movs	r4, #1
     2b8:	4321      	orrs	r1, r4
     2ba:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2bc:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2be:	20b5      	movs	r0, #181	; 0xb5
     2c0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2c2:	3abb      	subs	r2, #187	; 0xbb
     2c4:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2c6:	2203      	movs	r2, #3
     2c8:	4311      	orrs	r1, r2
     2ca:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2cc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ce:	21cb      	movs	r1, #203	; 0xcb
     2d0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2d4:	4322      	orrs	r2, r4
     2d6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2d8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2da:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2dc:	39bc      	subs	r1, #188	; 0xbc
     2de:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2e0:	2130      	movs	r1, #48	; 0x30
     2e2:	430a      	orrs	r2, r1
     2e4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2e6:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     2e8:	bd30      	pop	{r4, r5, pc}
	...

000002ec <TARGET_IO_CLOCK_init>:
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <TARGET_IO_CLOCK_init+0x1c>)
     2ee:	2140      	movs	r1, #64	; 0x40
     2f0:	22dc      	movs	r2, #220	; 0xdc
     2f2:	5099      	str	r1, [r3, r2]
     2f4:	3103      	adds	r1, #3
     2f6:	3a14      	subs	r2, #20
     2f8:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     2fa:	4a04      	ldr	r2, [pc, #16]	; (30c <TARGET_IO_CLOCK_init+0x20>)
     2fc:	69d3      	ldr	r3, [r2, #28]
     2fe:	3923      	subs	r1, #35	; 0x23
     300:	430b      	orrs	r3, r1
     302:	61d3      	str	r3, [r2, #28]
void TARGET_IO_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     304:	4770      	bx	lr
     306:	46c0      	nop			; (mov r8, r8)
     308:	40001c00 	.word	0x40001c00
     30c:	40000800 	.word	0x40000800

00000310 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     310:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     312:	4b05      	ldr	r3, [pc, #20]	; (328 <TARGET_IO_init+0x18>)
     314:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     316:	2200      	movs	r2, #0
     318:	4904      	ldr	r1, [pc, #16]	; (32c <TARGET_IO_init+0x1c>)
     31a:	4805      	ldr	r0, [pc, #20]	; (330 <TARGET_IO_init+0x20>)
     31c:	4b05      	ldr	r3, [pc, #20]	; (334 <TARGET_IO_init+0x24>)
     31e:	4798      	blx	r3
	TARGET_IO_PORT_init();
     320:	4b05      	ldr	r3, [pc, #20]	; (338 <TARGET_IO_init+0x28>)
     322:	4798      	blx	r3
}
     324:	bd10      	pop	{r4, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	000002ed 	.word	0x000002ed
     32c:	42001400 	.word	0x42001400
     330:	200000b4 	.word	0x200000b4
     334:	000009e5 	.word	0x000009e5
     338:	000002a9 	.word	0x000002a9

0000033c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     33c:	b510      	push	{r4, lr}
     33e:	2140      	movs	r1, #64	; 0x40
     340:	2398      	movs	r3, #152	; 0x98
     342:	4a05      	ldr	r2, [pc, #20]	; (358 <EVENT_SYSTEM_0_init+0x1c>)
     344:	50d1      	str	r1, [r2, r3]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_EVSYS;
     346:	4a05      	ldr	r2, [pc, #20]	; (35c <EVENT_SYSTEM_0_init+0x20>)
     348:	69d3      	ldr	r3, [r2, #28]
     34a:	393f      	subs	r1, #63	; 0x3f
     34c:	430b      	orrs	r3, r1
     34e:	61d3      	str	r3, [r2, #28]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_EVSYS_bit(MCLK);

	event_system_init();
     350:	4b03      	ldr	r3, [pc, #12]	; (360 <EVENT_SYSTEM_0_init+0x24>)
     352:	4798      	blx	r3
}
     354:	bd10      	pop	{r4, pc}
     356:	46c0      	nop			; (mov r8, r8)
     358:	40001c00 	.word	0x40001c00
     35c:	40000800 	.word	0x40000800
     360:	0000074d 	.word	0x0000074d

00000364 <system_init>:

void system_init(void)
{
     364:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     366:	4b0e      	ldr	r3, [pc, #56]	; (3a0 <system_init+0x3c>)
     368:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     36a:	23c0      	movs	r3, #192	; 0xc0
     36c:	05db      	lsls	r3, r3, #23
     36e:	2280      	movs	r2, #128	; 0x80
     370:	0212      	lsls	r2, r2, #8
     372:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     374:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     376:	2382      	movs	r3, #130	; 0x82
     378:	05db      	lsls	r3, r3, #23
     37a:	4a0a      	ldr	r2, [pc, #40]	; (3a4 <system_init+0x40>)
     37c:	629a      	str	r2, [r3, #40]	; 0x28
     37e:	22c0      	movs	r2, #192	; 0xc0
     380:	0612      	lsls	r2, r2, #24
     382:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     384:	214f      	movs	r1, #79	; 0x4f
     386:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     388:	2001      	movs	r0, #1
     38a:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38c:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     38e:	4b06      	ldr	r3, [pc, #24]	; (3a8 <system_init+0x44>)
     390:	4798      	blx	r3

	TIMER_0_init();
     392:	4b06      	ldr	r3, [pc, #24]	; (3ac <system_init+0x48>)
     394:	4798      	blx	r3

	TARGET_IO_init();
     396:	4b06      	ldr	r3, [pc, #24]	; (3b0 <system_init+0x4c>)
     398:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     39a:	4b06      	ldr	r3, [pc, #24]	; (3b4 <system_init+0x50>)
     39c:	4798      	blx	r3
}
     39e:	bd10      	pop	{r4, pc}
     3a0:	00000f39 	.word	0x00000f39
     3a4:	40008000 	.word	0x40008000
     3a8:	000001d1 	.word	0x000001d1
     3ac:	0000019d 	.word	0x0000019d
     3b0:	00000311 	.word	0x00000311
     3b4:	0000033d 	.word	0x0000033d

000003b8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     3b8:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     3ba:	6983      	ldr	r3, [r0, #24]
     3bc:	2b00      	cmp	r3, #0
     3be:	d000      	beq.n	3c2 <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     3c0:	4798      	blx	r3
	}
}
     3c2:	bd10      	pop	{r4, pc}

000003c4 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     3c4:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     3c6:	69c3      	ldr	r3, [r0, #28]
     3c8:	2b00      	cmp	r3, #0
     3ca:	d000      	beq.n	3ce <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     3cc:	4798      	blx	r3
	}
}
     3ce:	bd10      	pop	{r4, pc}

000003d0 <adc_async_channel_conversion_done>:
{
     3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3d2:	b083      	sub	sp, #12
     3d4:	0005      	movs	r5, r0
     3d6:	000e      	movs	r6, r1
     3d8:	0011      	movs	r1, r2
	uint8_t                              index    = descr->channel_map[channel];
     3da:	6a03      	ldr	r3, [r0, #32]
     3dc:	5d9a      	ldrb	r2, [r3, r6]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     3de:	0053      	lsls	r3, r2, #1
     3e0:	189b      	adds	r3, r3, r2
     3e2:	00dc      	lsls	r4, r3, #3
     3e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
     3e6:	469c      	mov	ip, r3
     3e8:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     3ea:	1d27      	adds	r7, r4, #4
     3ec:	9101      	str	r1, [sp, #4]
     3ee:	466b      	mov	r3, sp
     3f0:	7919      	ldrb	r1, [r3, #4]
     3f2:	0038      	movs	r0, r7
     3f4:	4b0c      	ldr	r3, [pc, #48]	; (428 <adc_async_channel_conversion_done+0x58>)
     3f6:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     3f8:	0028      	movs	r0, r5
     3fa:	4b0c      	ldr	r3, [pc, #48]	; (42c <adc_async_channel_conversion_done+0x5c>)
     3fc:	4798      	blx	r3
     3fe:	2801      	cmp	r0, #1
     400:	d907      	bls.n	412 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     402:	9b01      	ldr	r3, [sp, #4]
     404:	0a19      	lsrs	r1, r3, #8
     406:	0038      	movs	r0, r7
     408:	4b07      	ldr	r3, [pc, #28]	; (428 <adc_async_channel_conversion_done+0x58>)
     40a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     40c:	8aa3      	ldrh	r3, [r4, #20]
     40e:	3301      	adds	r3, #1
     410:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     412:	8aa3      	ldrh	r3, [r4, #20]
     414:	3301      	adds	r3, #1
     416:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     418:	6823      	ldr	r3, [r4, #0]
     41a:	2b00      	cmp	r3, #0
     41c:	d002      	beq.n	424 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     41e:	0031      	movs	r1, r6
     420:	0028      	movs	r0, r5
     422:	4798      	blx	r3
}
     424:	b003      	add	sp, #12
     426:	bdf0      	pop	{r4, r5, r6, r7, pc}
     428:	00000b5d 	.word	0x00000b5d
     42c:	00000ecd 	.word	0x00000ecd

00000430 <adc_async_init>:
{
     430:	b5f0      	push	{r4, r5, r6, r7, lr}
     432:	46d6      	mov	lr, sl
     434:	b500      	push	{lr}
     436:	b082      	sub	sp, #8
     438:	0005      	movs	r5, r0
     43a:	9101      	str	r1, [sp, #4]
     43c:	0016      	movs	r6, r2
     43e:	001c      	movs	r4, r3
     440:	ab08      	add	r3, sp, #32
     442:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     444:	2800      	cmp	r0, #0
     446:	d00c      	beq.n	462 <adc_async_init+0x32>
     448:	2900      	cmp	r1, #0
     44a:	d00c      	beq.n	466 <adc_async_init+0x36>
     44c:	2a00      	cmp	r2, #0
     44e:	d00c      	beq.n	46a <adc_async_init+0x3a>
     450:	2f00      	cmp	r7, #0
     452:	d00c      	beq.n	46e <adc_async_init+0x3e>
     454:	9b09      	ldr	r3, [sp, #36]	; 0x24
     456:	2b00      	cmp	r3, #0
     458:	d001      	beq.n	45e <adc_async_init+0x2e>
     45a:	2001      	movs	r0, #1
     45c:	e008      	b.n	470 <adc_async_init+0x40>
     45e:	2000      	movs	r0, #0
     460:	e006      	b.n	470 <adc_async_init+0x40>
     462:	2000      	movs	r0, #0
     464:	e004      	b.n	470 <adc_async_init+0x40>
     466:	2000      	movs	r0, #0
     468:	e002      	b.n	470 <adc_async_init+0x40>
     46a:	2000      	movs	r0, #0
     46c:	e000      	b.n	470 <adc_async_init+0x40>
     46e:	2000      	movs	r0, #0
     470:	223f      	movs	r2, #63	; 0x3f
     472:	4916      	ldr	r1, [pc, #88]	; (4cc <adc_async_init+0x9c>)
     474:	4b16      	ldr	r3, [pc, #88]	; (4d0 <adc_async_init+0xa0>)
     476:	469a      	mov	sl, r3
     478:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     47a:	1c62      	adds	r2, r4, #1
     47c:	0ffb      	lsrs	r3, r7, #31
     47e:	17d0      	asrs	r0, r2, #31
     480:	42ba      	cmp	r2, r7
     482:	4158      	adcs	r0, r3
     484:	b2c0      	uxtb	r0, r0
     486:	2240      	movs	r2, #64	; 0x40
     488:	4910      	ldr	r1, [pc, #64]	; (4cc <adc_async_init+0x9c>)
     48a:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     48c:	2300      	movs	r3, #0
     48e:	e003      	b.n	498 <adc_async_init+0x68>
		channel_map[i] = 0xFF;
     490:	22ff      	movs	r2, #255	; 0xff
     492:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     494:	3301      	adds	r3, #1
     496:	b2db      	uxtb	r3, r3
     498:	42a3      	cmp	r3, r4
     49a:	d9f9      	bls.n	490 <adc_async_init+0x60>
	descr->channel_map    = channel_map;
     49c:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     49e:	2324      	movs	r3, #36	; 0x24
     4a0:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     4a2:	3301      	adds	r3, #1
     4a4:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4a8:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     4aa:	9901      	ldr	r1, [sp, #4]
     4ac:	0028      	movs	r0, r5
     4ae:	4b09      	ldr	r3, [pc, #36]	; (4d4 <adc_async_init+0xa4>)
     4b0:	4798      	blx	r3
	if (init_status) {
     4b2:	2800      	cmp	r0, #0
     4b4:	d105      	bne.n	4c2 <adc_async_init+0x92>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     4b6:	4b08      	ldr	r3, [pc, #32]	; (4d8 <adc_async_init+0xa8>)
     4b8:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     4ba:	4b08      	ldr	r3, [pc, #32]	; (4dc <adc_async_init+0xac>)
     4bc:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     4be:	4b08      	ldr	r3, [pc, #32]	; (4e0 <adc_async_init+0xb0>)
     4c0:	606b      	str	r3, [r5, #4]
}
     4c2:	b002      	add	sp, #8
     4c4:	bc04      	pop	{r2}
     4c6:	4692      	mov	sl, r2
     4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	000025bc 	.word	0x000025bc
     4d0:	00000a5d 	.word	0x00000a5d
     4d4:	00000e15 	.word	0x00000e15
     4d8:	000003d1 	.word	0x000003d1
     4dc:	000003b9 	.word	0x000003b9
     4e0:	000003c5 	.word	0x000003c5

000004e4 <adc_async_register_channel_buffer>:
{
     4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e6:	b083      	sub	sp, #12
     4e8:	0007      	movs	r7, r0
     4ea:	000c      	movs	r4, r1
     4ec:	9200      	str	r2, [sp, #0]
     4ee:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     4f0:	2800      	cmp	r0, #0
     4f2:	d019      	beq.n	528 <adc_async_register_channel_buffer+0x44>
     4f4:	2a00      	cmp	r2, #0
     4f6:	d019      	beq.n	52c <adc_async_register_channel_buffer+0x48>
     4f8:	2b00      	cmp	r3, #0
     4fa:	d119      	bne.n	530 <adc_async_register_channel_buffer+0x4c>
     4fc:	2000      	movs	r0, #0
     4fe:	4e24      	ldr	r6, [pc, #144]	; (590 <adc_async_register_channel_buffer+0xac>)
     500:	2266      	movs	r2, #102	; 0x66
     502:	0031      	movs	r1, r6
     504:	4d23      	ldr	r5, [pc, #140]	; (594 <adc_async_register_channel_buffer+0xb0>)
     506:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     508:	2324      	movs	r3, #36	; 0x24
     50a:	5cfb      	ldrb	r3, [r7, r3]
     50c:	2000      	movs	r0, #0
     50e:	42a3      	cmp	r3, r4
     510:	4140      	adcs	r0, r0
     512:	b2c0      	uxtb	r0, r0
     514:	2267      	movs	r2, #103	; 0x67
     516:	0031      	movs	r1, r6
     518:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     51a:	6a39      	ldr	r1, [r7, #32]
     51c:	5d0b      	ldrb	r3, [r1, r4]
     51e:	2bff      	cmp	r3, #255	; 0xff
     520:	d12c      	bne.n	57c <adc_async_register_channel_buffer+0x98>
     522:	2600      	movs	r6, #0
     524:	2300      	movs	r3, #0
     526:	e007      	b.n	538 <adc_async_register_channel_buffer+0x54>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     528:	2000      	movs	r0, #0
     52a:	e7e8      	b.n	4fe <adc_async_register_channel_buffer+0x1a>
     52c:	2000      	movs	r0, #0
     52e:	e7e6      	b.n	4fe <adc_async_register_channel_buffer+0x1a>
     530:	2001      	movs	r0, #1
     532:	e7e4      	b.n	4fe <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     534:	3301      	adds	r3, #1
     536:	b2db      	uxtb	r3, r3
     538:	2224      	movs	r2, #36	; 0x24
     53a:	5cba      	ldrb	r2, [r7, r2]
     53c:	4293      	cmp	r3, r2
     53e:	d805      	bhi.n	54c <adc_async_register_channel_buffer+0x68>
		if (descr->channel_map[i] != 0xFF) {
     540:	5cca      	ldrb	r2, [r1, r3]
     542:	2aff      	cmp	r2, #255	; 0xff
     544:	d0f6      	beq.n	534 <adc_async_register_channel_buffer+0x50>
			index++;
     546:	3601      	adds	r6, #1
     548:	b2f6      	uxtb	r6, r6
     54a:	e7f3      	b.n	534 <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     54c:	2325      	movs	r3, #37	; 0x25
     54e:	5cfb      	ldrb	r3, [r7, r3]
     550:	429e      	cmp	r6, r3
     552:	d816      	bhi.n	582 <adc_async_register_channel_buffer+0x9e>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     554:	0073      	lsls	r3, r6, #1
     556:	199b      	adds	r3, r3, r6
     558:	00dd      	lsls	r5, r3, #3
     55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     55c:	1958      	adds	r0, r3, r5
     55e:	3004      	adds	r0, #4
     560:	9a01      	ldr	r2, [sp, #4]
     562:	9900      	ldr	r1, [sp, #0]
     564:	4b0c      	ldr	r3, [pc, #48]	; (598 <adc_async_register_channel_buffer+0xb4>)
     566:	4798      	blx	r3
     568:	2800      	cmp	r0, #0
     56a:	d10d      	bne.n	588 <adc_async_register_channel_buffer+0xa4>
	descr->channel_map[channel]            = index;
     56c:	6a3b      	ldr	r3, [r7, #32]
     56e:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     570:	6abb      	ldr	r3, [r7, #40]	; 0x28
     572:	195b      	adds	r3, r3, r5
     574:	2200      	movs	r2, #0
     576:	829a      	strh	r2, [r3, #20]
}
     578:	b003      	add	sp, #12
     57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     57c:	200d      	movs	r0, #13
     57e:	4240      	negs	r0, r0
     580:	e7fa      	b.n	578 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
     582:	201c      	movs	r0, #28
     584:	4240      	negs	r0, r0
     586:	e7f7      	b.n	578 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
     588:	200d      	movs	r0, #13
     58a:	4240      	negs	r0, r0
     58c:	e7f4      	b.n	578 <adc_async_register_channel_buffer+0x94>
     58e:	46c0      	nop			; (mov r8, r8)
     590:	000025bc 	.word	0x000025bc
     594:	00000a5d 	.word	0x00000a5d
     598:	00000ac5 	.word	0x00000ac5

0000059c <adc_async_enable_channel>:
{
     59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     59e:	0006      	movs	r6, r0
     5a0:	000c      	movs	r4, r1
	ASSERT(descr);
     5a2:	4d0b      	ldr	r5, [pc, #44]	; (5d0 <adc_async_enable_channel+0x34>)
     5a4:	1e43      	subs	r3, r0, #1
     5a6:	4198      	sbcs	r0, r3
     5a8:	b2c0      	uxtb	r0, r0
     5aa:	2283      	movs	r2, #131	; 0x83
     5ac:	0029      	movs	r1, r5
     5ae:	4f09      	ldr	r7, [pc, #36]	; (5d4 <adc_async_enable_channel+0x38>)
     5b0:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     5b2:	2324      	movs	r3, #36	; 0x24
     5b4:	5cf3      	ldrb	r3, [r6, r3]
     5b6:	2000      	movs	r0, #0
     5b8:	42a3      	cmp	r3, r4
     5ba:	4140      	adcs	r0, r0
     5bc:	b2c0      	uxtb	r0, r0
     5be:	2284      	movs	r2, #132	; 0x84
     5c0:	0029      	movs	r1, r5
     5c2:	47b8      	blx	r7
	_adc_async_enable_channel(&descr->device, channel);
     5c4:	0021      	movs	r1, r4
     5c6:	0030      	movs	r0, r6
     5c8:	4b03      	ldr	r3, [pc, #12]	; (5d8 <adc_async_enable_channel+0x3c>)
     5ca:	4798      	blx	r3
}
     5cc:	2000      	movs	r0, #0
     5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5d0:	000025bc 	.word	0x000025bc
     5d4:	00000a5d 	.word	0x00000a5d
     5d8:	00000eb9 	.word	0x00000eb9

000005dc <adc_async_register_callback>:
{
     5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5de:	46ce      	mov	lr, r9
     5e0:	b500      	push	{lr}
     5e2:	0004      	movs	r4, r0
     5e4:	000d      	movs	r5, r1
     5e6:	0017      	movs	r7, r2
     5e8:	001e      	movs	r6, r3
	ASSERT(descr);
     5ea:	1e43      	subs	r3, r0, #1
     5ec:	4198      	sbcs	r0, r3
     5ee:	b2c0      	uxtb	r0, r0
     5f0:	229c      	movs	r2, #156	; 0x9c
     5f2:	4916      	ldr	r1, [pc, #88]	; (64c <adc_async_register_callback+0x70>)
     5f4:	4b16      	ldr	r3, [pc, #88]	; (650 <adc_async_register_callback+0x74>)
     5f6:	4699      	mov	r9, r3
     5f8:	4798      	blx	r3
	ASSERT(descr->channel_max >= channel);
     5fa:	2324      	movs	r3, #36	; 0x24
     5fc:	5ce3      	ldrb	r3, [r4, r3]
     5fe:	2000      	movs	r0, #0
     600:	42ab      	cmp	r3, r5
     602:	4140      	adcs	r0, r0
     604:	b2c0      	uxtb	r0, r0
     606:	229d      	movs	r2, #157	; 0x9d
     608:	4910      	ldr	r1, [pc, #64]	; (64c <adc_async_register_callback+0x70>)
     60a:	47c8      	blx	r9
	uint8_t index = descr->channel_map[channel];
     60c:	6a23      	ldr	r3, [r4, #32]
     60e:	5d5b      	ldrb	r3, [r3, r5]
	switch (type) {
     610:	2f01      	cmp	r7, #1
     612:	d017      	beq.n	644 <adc_async_register_callback+0x68>
     614:	2f00      	cmp	r7, #0
     616:	d004      	beq.n	622 <adc_async_register_callback+0x46>
     618:	2f02      	cmp	r7, #2
     61a:	d015      	beq.n	648 <adc_async_register_callback+0x6c>
		return ERR_INVALID_ARG;
     61c:	200d      	movs	r0, #13
     61e:	4240      	negs	r0, r0
     620:	e00d      	b.n	63e <adc_async_register_callback+0x62>
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     622:	005a      	lsls	r2, r3, #1
     624:	18d3      	adds	r3, r2, r3
     626:	00da      	lsls	r2, r3, #3
     628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     62a:	509e      	str	r6, [r3, r2]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     62c:	1e73      	subs	r3, r6, #1
     62e:	419e      	sbcs	r6, r3
     630:	b2f3      	uxtb	r3, r6
     632:	003a      	movs	r2, r7
     634:	0029      	movs	r1, r5
     636:	0020      	movs	r0, r4
     638:	4c06      	ldr	r4, [pc, #24]	; (654 <adc_async_register_callback+0x78>)
     63a:	47a0      	blx	r4
	return ERR_NONE;
     63c:	2000      	movs	r0, #0
}
     63e:	bc04      	pop	{r2}
     640:	4691      	mov	r9, r2
     642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		descr->adc_async_cb.monitor = cb;
     644:	61a6      	str	r6, [r4, #24]
		break;
     646:	e7f1      	b.n	62c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     648:	61e6      	str	r6, [r4, #28]
		break;
     64a:	e7ef      	b.n	62c <adc_async_register_callback+0x50>
     64c:	000025bc 	.word	0x000025bc
     650:	00000a5d 	.word	0x00000a5d
     654:	00000ee3 	.word	0x00000ee3

00000658 <adc_async_read_channel>:
{
     658:	b5f0      	push	{r4, r5, r6, r7, lr}
     65a:	46ce      	mov	lr, r9
     65c:	4647      	mov	r7, r8
     65e:	b580      	push	{r7, lr}
     660:	b083      	sub	sp, #12
     662:	0005      	movs	r5, r0
     664:	000c      	movs	r4, r1
     666:	4690      	mov	r8, r2
     668:	001e      	movs	r6, r3
	ASSERT(descr && buffer && length);
     66a:	2800      	cmp	r0, #0
     66c:	d034      	beq.n	6d8 <adc_async_read_channel+0x80>
     66e:	2a00      	cmp	r2, #0
     670:	d034      	beq.n	6dc <adc_async_read_channel+0x84>
     672:	2e00      	cmp	r6, #0
     674:	d134      	bne.n	6e0 <adc_async_read_channel+0x88>
     676:	2000      	movs	r0, #0
     678:	22bc      	movs	r2, #188	; 0xbc
     67a:	4925      	ldr	r1, [pc, #148]	; (710 <adc_async_read_channel+0xb8>)
     67c:	4f25      	ldr	r7, [pc, #148]	; (714 <adc_async_read_channel+0xbc>)
     67e:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     680:	2324      	movs	r3, #36	; 0x24
     682:	5ceb      	ldrb	r3, [r5, r3]
     684:	2000      	movs	r0, #0
     686:	42a3      	cmp	r3, r4
     688:	4140      	adcs	r0, r0
     68a:	b2c0      	uxtb	r0, r0
     68c:	22bd      	movs	r2, #189	; 0xbd
     68e:	4920      	ldr	r1, [pc, #128]	; (710 <adc_async_read_channel+0xb8>)
     690:	47b8      	blx	r7
	data_size = _adc_async_get_data_size(&descr->device);
     692:	0028      	movs	r0, r5
     694:	4b20      	ldr	r3, [pc, #128]	; (718 <adc_async_read_channel+0xc0>)
     696:	4798      	blx	r3
     698:	0001      	movs	r1, r0
	ASSERT(!(length % data_size));
     69a:	0030      	movs	r0, r6
     69c:	4b1f      	ldr	r3, [pc, #124]	; (71c <adc_async_read_channel+0xc4>)
     69e:	4798      	blx	r3
     6a0:	4248      	negs	r0, r1
     6a2:	4148      	adcs	r0, r1
     6a4:	b2c0      	uxtb	r0, r0
     6a6:	22bf      	movs	r2, #191	; 0xbf
     6a8:	4919      	ldr	r1, [pc, #100]	; (710 <adc_async_read_channel+0xb8>)
     6aa:	47b8      	blx	r7
	index                                         = descr->channel_map[channel];
     6ac:	6a2b      	ldr	r3, [r5, #32]
     6ae:	5d1a      	ldrb	r2, [r3, r4]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     6b0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     6b2:	0053      	lsls	r3, r2, #1
     6b4:	189b      	adds	r3, r3, r2
     6b6:	00da      	lsls	r2, r3, #3
     6b8:	4689      	mov	r9, r1
     6ba:	4491      	add	r9, r2
	CRITICAL_SECTION_ENTER()
     6bc:	a801      	add	r0, sp, #4
     6be:	4b18      	ldr	r3, [pc, #96]	; (720 <adc_async_read_channel+0xc8>)
     6c0:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     6c2:	464b      	mov	r3, r9
     6c4:	1d1d      	adds	r5, r3, #4
     6c6:	0028      	movs	r0, r5
     6c8:	4b16      	ldr	r3, [pc, #88]	; (724 <adc_async_read_channel+0xcc>)
     6ca:	4798      	blx	r3
     6cc:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     6ce:	a801      	add	r0, sp, #4
     6d0:	4b15      	ldr	r3, [pc, #84]	; (728 <adc_async_read_channel+0xd0>)
     6d2:	4798      	blx	r3
	uint16_t was_read = 0;
     6d4:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     6d6:	e00b      	b.n	6f0 <adc_async_read_channel+0x98>
	ASSERT(descr && buffer && length);
     6d8:	2000      	movs	r0, #0
     6da:	e7cd      	b.n	678 <adc_async_read_channel+0x20>
     6dc:	2000      	movs	r0, #0
     6de:	e7cb      	b.n	678 <adc_async_read_channel+0x20>
     6e0:	2001      	movs	r0, #1
     6e2:	e7c9      	b.n	678 <adc_async_read_channel+0x20>
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     6e4:	3401      	adds	r4, #1
     6e6:	b2a4      	uxth	r4, r4
     6e8:	4441      	add	r1, r8
     6ea:	0028      	movs	r0, r5
     6ec:	4b0f      	ldr	r3, [pc, #60]	; (72c <adc_async_read_channel+0xd4>)
     6ee:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     6f0:	0021      	movs	r1, r4
     6f2:	42a7      	cmp	r7, r4
     6f4:	d901      	bls.n	6fa <adc_async_read_channel+0xa2>
     6f6:	42b4      	cmp	r4, r6
     6f8:	d3f4      	bcc.n	6e4 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
     6fa:	464b      	mov	r3, r9
     6fc:	8a9b      	ldrh	r3, [r3, #20]
     6fe:	1b1b      	subs	r3, r3, r4
     700:	464a      	mov	r2, r9
     702:	8293      	strh	r3, [r2, #20]
}
     704:	0020      	movs	r0, r4
     706:	b003      	add	sp, #12
     708:	bc0c      	pop	{r2, r3}
     70a:	4690      	mov	r8, r2
     70c:	4699      	mov	r9, r3
     70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     710:	000025bc 	.word	0x000025bc
     714:	00000a5d 	.word	0x00000a5d
     718:	00000ecd 	.word	0x00000ecd
     71c:	00000fbd 	.word	0x00000fbd
     720:	00000731 	.word	0x00000731
     724:	00000b9d 	.word	0x00000b9d
     728:	0000073f 	.word	0x0000073f
     72c:	00000b11 	.word	0x00000b11

00000730 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     730:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     734:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     736:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     738:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     73c:	4770      	bx	lr

0000073e <atomic_leave_critical>:
     73e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     742:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     744:	f383 8810 	msr	PRIMASK, r3
}
     748:	4770      	bx	lr
	...

0000074c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     74c:	b510      	push	{r4, lr}
	return _event_system_init();
     74e:	4b01      	ldr	r3, [pc, #4]	; (754 <event_system_init+0x8>)
     750:	4798      	blx	r3
}
     752:	bd10      	pop	{r4, pc}
     754:	00001035 	.word	0x00001035

00000758 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     758:	b570      	push	{r4, r5, r6, lr}
     75a:	0004      	movs	r4, r0
     75c:	000d      	movs	r5, r1
     75e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     760:	2800      	cmp	r0, #0
     762:	d00e      	beq.n	782 <io_write+0x2a>
     764:	2900      	cmp	r1, #0
     766:	d00a      	beq.n	77e <io_write+0x26>
     768:	2001      	movs	r0, #1
     76a:	2234      	movs	r2, #52	; 0x34
     76c:	4906      	ldr	r1, [pc, #24]	; (788 <io_write+0x30>)
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <io_write+0x34>)
     770:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     772:	6823      	ldr	r3, [r4, #0]
     774:	0032      	movs	r2, r6
     776:	0029      	movs	r1, r5
     778:	0020      	movs	r0, r4
     77a:	4798      	blx	r3
}
     77c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     77e:	2000      	movs	r0, #0
     780:	e7f3      	b.n	76a <io_write+0x12>
     782:	2000      	movs	r0, #0
     784:	e7f1      	b.n	76a <io_write+0x12>
     786:	46c0      	nop			; (mov r8, r8)
     788:	000025d8 	.word	0x000025d8
     78c:	00000a5d 	.word	0x00000a5d

00000790 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     790:	b570      	push	{r4, r5, r6, lr}
     792:	0004      	movs	r4, r0
     794:	000d      	movs	r5, r1
     796:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     798:	2800      	cmp	r0, #0
     79a:	d00e      	beq.n	7ba <io_read+0x2a>
     79c:	2900      	cmp	r1, #0
     79e:	d00a      	beq.n	7b6 <io_read+0x26>
     7a0:	2001      	movs	r0, #1
     7a2:	223d      	movs	r2, #61	; 0x3d
     7a4:	4906      	ldr	r1, [pc, #24]	; (7c0 <io_read+0x30>)
     7a6:	4b07      	ldr	r3, [pc, #28]	; (7c4 <io_read+0x34>)
     7a8:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     7aa:	6863      	ldr	r3, [r4, #4]
     7ac:	0032      	movs	r2, r6
     7ae:	0029      	movs	r1, r5
     7b0:	0020      	movs	r0, r4
     7b2:	4798      	blx	r3
}
     7b4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     7b6:	2000      	movs	r0, #0
     7b8:	e7f3      	b.n	7a2 <io_read+0x12>
     7ba:	2000      	movs	r0, #0
     7bc:	e7f1      	b.n	7a2 <io_read+0x12>
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	000025d8 	.word	0x000025d8
     7c4:	00000a5d 	.word	0x00000a5d

000007c8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     7ca:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     7cc:	2e00      	cmp	r6, #0
     7ce:	d002      	beq.n	7d6 <timer_add_timer_task+0xe>
     7d0:	0033      	movs	r3, r6
     7d2:	2500      	movs	r5, #0
     7d4:	e00c      	b.n	7f0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     7d6:	4b10      	ldr	r3, [pc, #64]	; (818 <timer_add_timer_task+0x50>)
     7d8:	4798      	blx	r3
		return;
     7da:	e018      	b.n	80e <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     7dc:	689f      	ldr	r7, [r3, #8]
     7de:	46bc      	mov	ip, r7
     7e0:	4464      	add	r4, ip
     7e2:	1aa4      	subs	r4, r4, r2
     7e4:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     7e6:	688f      	ldr	r7, [r1, #8]
     7e8:	42bc      	cmp	r4, r7
     7ea:	d20b      	bcs.n	804 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     7ec:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     7ee:	681b      	ldr	r3, [r3, #0]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d007      	beq.n	804 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     7f4:	685c      	ldr	r4, [r3, #4]
     7f6:	4294      	cmp	r4, r2
     7f8:	d8f0      	bhi.n	7dc <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     7fa:	1aa4      	subs	r4, r4, r2
     7fc:	689f      	ldr	r7, [r3, #8]
     7fe:	46bc      	mov	ip, r7
     800:	4464      	add	r4, ip
     802:	e7f0      	b.n	7e6 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     804:	42b3      	cmp	r3, r6
     806:	d003      	beq.n	810 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     808:	0028      	movs	r0, r5
     80a:	4b04      	ldr	r3, [pc, #16]	; (81c <timer_add_timer_task+0x54>)
     80c:	4798      	blx	r3
	}
}
     80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     810:	4b01      	ldr	r3, [pc, #4]	; (818 <timer_add_timer_task+0x50>)
     812:	4798      	blx	r3
     814:	e7fb      	b.n	80e <timer_add_timer_task+0x46>
     816:	46c0      	nop			; (mov r8, r8)
     818:	00000a7d 	.word	0x00000a7d
     81c:	00000aa9 	.word	0x00000aa9

00000820 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     822:	0005      	movs	r5, r0
     824:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     826:	6903      	ldr	r3, [r0, #16]
     828:	1c5e      	adds	r6, r3, #1
     82a:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     82c:	7e03      	ldrb	r3, [r0, #24]
     82e:	07db      	lsls	r3, r3, #31
     830:	d402      	bmi.n	838 <timer_process_counted+0x18>
     832:	7e03      	ldrb	r3, [r0, #24]
     834:	079b      	lsls	r3, r3, #30
     836:	d50a      	bpl.n	84e <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     838:	7e2b      	ldrb	r3, [r5, #24]
     83a:	2202      	movs	r2, #2
     83c:	4313      	orrs	r3, r2
     83e:	b2db      	uxtb	r3, r3
     840:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     844:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     846:	68e3      	ldr	r3, [r4, #12]
     848:	0020      	movs	r0, r4
     84a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     84c:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     84e:	2c00      	cmp	r4, #0
     850:	d0f7      	beq.n	842 <timer_process_counted+0x22>
     852:	6863      	ldr	r3, [r4, #4]
     854:	1af3      	subs	r3, r6, r3
     856:	68a2      	ldr	r2, [r4, #8]
     858:	4293      	cmp	r3, r2
     85a:	d3f2      	bcc.n	842 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     85c:	002f      	movs	r7, r5
     85e:	3714      	adds	r7, #20
     860:	0038      	movs	r0, r7
     862:	4b06      	ldr	r3, [pc, #24]	; (87c <timer_process_counted+0x5c>)
     864:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     866:	7c23      	ldrb	r3, [r4, #16]
     868:	2b01      	cmp	r3, #1
     86a:	d1eb      	bne.n	844 <timer_process_counted+0x24>
			tmp->time_label = time;
     86c:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     86e:	0032      	movs	r2, r6
     870:	0021      	movs	r1, r4
     872:	0038      	movs	r0, r7
     874:	4b02      	ldr	r3, [pc, #8]	; (880 <timer_process_counted+0x60>)
     876:	4798      	blx	r3
     878:	e7e4      	b.n	844 <timer_process_counted+0x24>
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	00000ab1 	.word	0x00000ab1
     880:	000007c9 	.word	0x000007c9

00000884 <timer_init>:
{
     884:	b570      	push	{r4, r5, r6, lr}
     886:	0004      	movs	r4, r0
     888:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     88a:	2800      	cmp	r0, #0
     88c:	d012      	beq.n	8b4 <timer_init+0x30>
     88e:	2900      	cmp	r1, #0
     890:	d00e      	beq.n	8b0 <timer_init+0x2c>
     892:	2001      	movs	r0, #1
     894:	223b      	movs	r2, #59	; 0x3b
     896:	4908      	ldr	r1, [pc, #32]	; (8b8 <timer_init+0x34>)
     898:	4b08      	ldr	r3, [pc, #32]	; (8bc <timer_init+0x38>)
     89a:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     89c:	0029      	movs	r1, r5
     89e:	0020      	movs	r0, r4
     8a0:	4b07      	ldr	r3, [pc, #28]	; (8c0 <timer_init+0x3c>)
     8a2:	4798      	blx	r3
	descr->time                           = 0;
     8a4:	2300      	movs	r3, #0
     8a6:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     8a8:	4b06      	ldr	r3, [pc, #24]	; (8c4 <timer_init+0x40>)
     8aa:	6023      	str	r3, [r4, #0]
}
     8ac:	2000      	movs	r0, #0
     8ae:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     8b0:	2000      	movs	r0, #0
     8b2:	e7ef      	b.n	894 <timer_init+0x10>
     8b4:	2000      	movs	r0, #0
     8b6:	e7ed      	b.n	894 <timer_init+0x10>
     8b8:	000025ec 	.word	0x000025ec
     8bc:	00000a5d 	.word	0x00000a5d
     8c0:	0000112d 	.word	0x0000112d
     8c4:	00000821 	.word	0x00000821

000008c8 <timer_start>:
{
     8c8:	b510      	push	{r4, lr}
     8ca:	0004      	movs	r4, r0
	ASSERT(descr);
     8cc:	1e43      	subs	r3, r0, #1
     8ce:	4198      	sbcs	r0, r3
     8d0:	b2c0      	uxtb	r0, r0
     8d2:	2253      	movs	r2, #83	; 0x53
     8d4:	4907      	ldr	r1, [pc, #28]	; (8f4 <timer_start+0x2c>)
     8d6:	4b08      	ldr	r3, [pc, #32]	; (8f8 <timer_start+0x30>)
     8d8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     8da:	0020      	movs	r0, r4
     8dc:	4b07      	ldr	r3, [pc, #28]	; (8fc <timer_start+0x34>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	d104      	bne.n	8ee <timer_start+0x26>
	_timer_start(&descr->device);
     8e4:	0020      	movs	r0, r4
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <timer_start+0x38>)
     8e8:	4798      	blx	r3
	return ERR_NONE;
     8ea:	2000      	movs	r0, #0
}
     8ec:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     8ee:	2011      	movs	r0, #17
     8f0:	4240      	negs	r0, r0
     8f2:	e7fb      	b.n	8ec <timer_start+0x24>
     8f4:	000025ec 	.word	0x000025ec
     8f8:	00000a5d 	.word	0x00000a5d
     8fc:	000011f5 	.word	0x000011f5
     900:	00001199 	.word	0x00001199

00000904 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     906:	0005      	movs	r5, r0
     908:	000e      	movs	r6, r1
     90a:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     90c:	2800      	cmp	r0, #0
     90e:	d023      	beq.n	958 <usart_sync_write+0x54>
     910:	2900      	cmp	r1, #0
     912:	d023      	beq.n	95c <usart_sync_write+0x58>
     914:	2a00      	cmp	r2, #0
     916:	d123      	bne.n	960 <usart_sync_write+0x5c>
     918:	2000      	movs	r0, #0
     91a:	22f1      	movs	r2, #241	; 0xf1
     91c:	4911      	ldr	r1, [pc, #68]	; (964 <usart_sync_write+0x60>)
     91e:	4b12      	ldr	r3, [pc, #72]	; (968 <usart_sync_write+0x64>)
     920:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     922:	002c      	movs	r4, r5
     924:	3408      	adds	r4, #8
     926:	0020      	movs	r0, r4
     928:	4b10      	ldr	r3, [pc, #64]	; (96c <usart_sync_write+0x68>)
     92a:	4798      	blx	r3
     92c:	2800      	cmp	r0, #0
     92e:	d0f8      	beq.n	922 <usart_sync_write+0x1e>
     930:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     932:	5d71      	ldrb	r1, [r6, r5]
     934:	0020      	movs	r0, r4
     936:	4b0e      	ldr	r3, [pc, #56]	; (970 <usart_sync_write+0x6c>)
     938:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     93a:	0020      	movs	r0, r4
     93c:	4b0b      	ldr	r3, [pc, #44]	; (96c <usart_sync_write+0x68>)
     93e:	4798      	blx	r3
     940:	2800      	cmp	r0, #0
     942:	d0fa      	beq.n	93a <usart_sync_write+0x36>
			;
	} while (++offset < length);
     944:	3501      	adds	r5, #1
     946:	42bd      	cmp	r5, r7
     948:	d3f3      	bcc.n	932 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     94a:	0020      	movs	r0, r4
     94c:	4b09      	ldr	r3, [pc, #36]	; (974 <usart_sync_write+0x70>)
     94e:	4798      	blx	r3
     950:	2800      	cmp	r0, #0
     952:	d0fa      	beq.n	94a <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     954:	0028      	movs	r0, r5
     956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     958:	2000      	movs	r0, #0
     95a:	e7de      	b.n	91a <usart_sync_write+0x16>
     95c:	2000      	movs	r0, #0
     95e:	e7dc      	b.n	91a <usart_sync_write+0x16>
     960:	2001      	movs	r0, #1
     962:	e7da      	b.n	91a <usart_sync_write+0x16>
     964:	00002604 	.word	0x00002604
     968:	00000a5d 	.word	0x00000a5d
     96c:	000013b7 	.word	0x000013b7
     970:	000013a7 	.word	0x000013a7
     974:	000013c1 	.word	0x000013c1

00000978 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     97a:	46ce      	mov	lr, r9
     97c:	4647      	mov	r7, r8
     97e:	b580      	push	{r7, lr}
     980:	1e05      	subs	r5, r0, #0
     982:	4688      	mov	r8, r1
     984:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     986:	d01f      	beq.n	9c8 <usart_sync_read+0x50>
     988:	2900      	cmp	r1, #0
     98a:	d01f      	beq.n	9cc <usart_sync_read+0x54>
     98c:	2a00      	cmp	r2, #0
     98e:	d11f      	bne.n	9d0 <usart_sync_read+0x58>
     990:	2000      	movs	r0, #0
     992:	2286      	movs	r2, #134	; 0x86
     994:	0052      	lsls	r2, r2, #1
     996:	490f      	ldr	r1, [pc, #60]	; (9d4 <usart_sync_read+0x5c>)
     998:	4b0f      	ldr	r3, [pc, #60]	; (9d8 <usart_sync_read+0x60>)
     99a:	4798      	blx	r3
	uint32_t                      offset = 0;
     99c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     99e:	002c      	movs	r4, r5
     9a0:	3408      	adds	r4, #8
     9a2:	0020      	movs	r0, r4
     9a4:	4b0d      	ldr	r3, [pc, #52]	; (9dc <usart_sync_read+0x64>)
     9a6:	4798      	blx	r3
     9a8:	2800      	cmp	r0, #0
     9aa:	d0f8      	beq.n	99e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     9ac:	4643      	mov	r3, r8
     9ae:	199f      	adds	r7, r3, r6
     9b0:	0020      	movs	r0, r4
     9b2:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <usart_sync_read+0x68>)
     9b4:	4798      	blx	r3
     9b6:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     9b8:	3601      	adds	r6, #1
     9ba:	454e      	cmp	r6, r9
     9bc:	d3ef      	bcc.n	99e <usart_sync_read+0x26>

	return (int32_t)offset;
}
     9be:	0030      	movs	r0, r6
     9c0:	bc0c      	pop	{r2, r3}
     9c2:	4690      	mov	r8, r2
     9c4:	4699      	mov	r9, r3
     9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     9c8:	2000      	movs	r0, #0
     9ca:	e7e2      	b.n	992 <usart_sync_read+0x1a>
     9cc:	2000      	movs	r0, #0
     9ce:	e7e0      	b.n	992 <usart_sync_read+0x1a>
     9d0:	2001      	movs	r0, #1
     9d2:	e7de      	b.n	992 <usart_sync_read+0x1a>
     9d4:	00002604 	.word	0x00002604
     9d8:	00000a5d 	.word	0x00000a5d
     9dc:	000013cd 	.word	0x000013cd
     9e0:	000013af 	.word	0x000013af

000009e4 <usart_sync_init>:
{
     9e4:	b570      	push	{r4, r5, r6, lr}
     9e6:	0004      	movs	r4, r0
     9e8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     9ea:	2800      	cmp	r0, #0
     9ec:	d014      	beq.n	a18 <usart_sync_init+0x34>
     9ee:	2900      	cmp	r1, #0
     9f0:	d010      	beq.n	a14 <usart_sync_init+0x30>
     9f2:	2001      	movs	r0, #1
     9f4:	2234      	movs	r2, #52	; 0x34
     9f6:	4909      	ldr	r1, [pc, #36]	; (a1c <usart_sync_init+0x38>)
     9f8:	4b09      	ldr	r3, [pc, #36]	; (a20 <usart_sync_init+0x3c>)
     9fa:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     9fc:	0020      	movs	r0, r4
     9fe:	3008      	adds	r0, #8
     a00:	0029      	movs	r1, r5
     a02:	4b08      	ldr	r3, [pc, #32]	; (a24 <usart_sync_init+0x40>)
     a04:	4798      	blx	r3
	if (init_status) {
     a06:	2800      	cmp	r0, #0
     a08:	d103      	bne.n	a12 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     a0a:	4b07      	ldr	r3, [pc, #28]	; (a28 <usart_sync_init+0x44>)
     a0c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     a0e:	4b07      	ldr	r3, [pc, #28]	; (a2c <usart_sync_init+0x48>)
     a10:	6023      	str	r3, [r4, #0]
}
     a12:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     a14:	2000      	movs	r0, #0
     a16:	e7ed      	b.n	9f4 <usart_sync_init+0x10>
     a18:	2000      	movs	r0, #0
     a1a:	e7eb      	b.n	9f4 <usart_sync_init+0x10>
     a1c:	00002604 	.word	0x00002604
     a20:	00000a5d 	.word	0x00000a5d
     a24:	00001369 	.word	0x00001369
     a28:	00000979 	.word	0x00000979
     a2c:	00000905 	.word	0x00000905

00000a30 <usart_sync_enable>:
{
     a30:	b510      	push	{r4, lr}
     a32:	0004      	movs	r4, r0
	ASSERT(descr);
     a34:	1e43      	subs	r3, r0, #1
     a36:	4198      	sbcs	r0, r3
     a38:	b2c0      	uxtb	r0, r0
     a3a:	2253      	movs	r2, #83	; 0x53
     a3c:	4904      	ldr	r1, [pc, #16]	; (a50 <usart_sync_enable+0x20>)
     a3e:	4b05      	ldr	r3, [pc, #20]	; (a54 <usart_sync_enable+0x24>)
     a40:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     a42:	0020      	movs	r0, r4
     a44:	3008      	adds	r0, #8
     a46:	4b04      	ldr	r3, [pc, #16]	; (a58 <usart_sync_enable+0x28>)
     a48:	4798      	blx	r3
}
     a4a:	2000      	movs	r0, #0
     a4c:	bd10      	pop	{r4, pc}
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	00002604 	.word	0x00002604
     a54:	00000a5d 	.word	0x00000a5d
     a58:	00001395 	.word	0x00001395

00000a5c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a5c:	2800      	cmp	r0, #0
     a5e:	d100      	bne.n	a62 <assert+0x6>
		__asm("BKPT #0");
     a60:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a62:	4770      	bx	lr

00000a64 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a64:	6803      	ldr	r3, [r0, #0]
     a66:	2b00      	cmp	r3, #0
     a68:	d003      	beq.n	a72 <is_list_element+0xe>
		if (it == element) {
     a6a:	428b      	cmp	r3, r1
     a6c:	d003      	beq.n	a76 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     a6e:	681b      	ldr	r3, [r3, #0]
     a70:	e7f9      	b.n	a66 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     a72:	2000      	movs	r0, #0
}
     a74:	4770      	bx	lr
			return true;
     a76:	2001      	movs	r0, #1
     a78:	e7fc      	b.n	a74 <is_list_element+0x10>
	...

00000a7c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     a7c:	b570      	push	{r4, r5, r6, lr}
     a7e:	0004      	movs	r4, r0
     a80:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <list_insert_as_head+0x20>)
     a84:	4798      	blx	r3
     a86:	2301      	movs	r3, #1
     a88:	4058      	eors	r0, r3
     a8a:	b2c0      	uxtb	r0, r0
     a8c:	2239      	movs	r2, #57	; 0x39
     a8e:	4904      	ldr	r1, [pc, #16]	; (aa0 <list_insert_as_head+0x24>)
     a90:	4b04      	ldr	r3, [pc, #16]	; (aa4 <list_insert_as_head+0x28>)
     a92:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     a94:	6823      	ldr	r3, [r4, #0]
     a96:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     a98:	6025      	str	r5, [r4, #0]
}
     a9a:	bd70      	pop	{r4, r5, r6, pc}
     a9c:	00000a65 	.word	0x00000a65
     aa0:	00002620 	.word	0x00002620
     aa4:	00000a5d 	.word	0x00000a5d

00000aa8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     aa8:	6803      	ldr	r3, [r0, #0]
     aaa:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     aac:	6001      	str	r1, [r0, #0]
}
     aae:	4770      	bx	lr

00000ab0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     ab0:	6803      	ldr	r3, [r0, #0]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d003      	beq.n	abe <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     ab6:	681a      	ldr	r2, [r3, #0]
     ab8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     aba:	0018      	movs	r0, r3
	}

	return NULL;
}
     abc:	4770      	bx	lr
	return NULL;
     abe:	2000      	movs	r0, #0
     ac0:	e7fc      	b.n	abc <list_remove_head+0xc>
	...

00000ac4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     ac4:	b570      	push	{r4, r5, r6, lr}
     ac6:	0004      	movs	r4, r0
     ac8:	000e      	movs	r6, r1
     aca:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     acc:	2800      	cmp	r0, #0
     ace:	d012      	beq.n	af6 <ringbuffer_init+0x32>
     ad0:	2900      	cmp	r1, #0
     ad2:	d012      	beq.n	afa <ringbuffer_init+0x36>
     ad4:	2a00      	cmp	r2, #0
     ad6:	d112      	bne.n	afe <ringbuffer_init+0x3a>
     ad8:	2000      	movs	r0, #0
     ada:	2228      	movs	r2, #40	; 0x28
     adc:	490a      	ldr	r1, [pc, #40]	; (b08 <ringbuffer_init+0x44>)
     ade:	4b0b      	ldr	r3, [pc, #44]	; (b0c <ringbuffer_init+0x48>)
     ae0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     ae2:	1e6b      	subs	r3, r5, #1
     ae4:	422b      	tst	r3, r5
     ae6:	d10c      	bne.n	b02 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     ae8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     aea:	2300      	movs	r3, #0
     aec:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     aee:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     af0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     af2:	2000      	movs	r0, #0
}
     af4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     af6:	2000      	movs	r0, #0
     af8:	e7ef      	b.n	ada <ringbuffer_init+0x16>
     afa:	2000      	movs	r0, #0
     afc:	e7ed      	b.n	ada <ringbuffer_init+0x16>
     afe:	2001      	movs	r0, #1
     b00:	e7eb      	b.n	ada <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     b02:	200d      	movs	r0, #13
     b04:	4240      	negs	r0, r0
     b06:	e7f5      	b.n	af4 <ringbuffer_init+0x30>
     b08:	00002640 	.word	0x00002640
     b0c:	00000a5d 	.word	0x00000a5d

00000b10 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	0004      	movs	r4, r0
     b14:	000d      	movs	r5, r1
	ASSERT(rb && data);
     b16:	2800      	cmp	r0, #0
     b18:	d016      	beq.n	b48 <ringbuffer_get+0x38>
     b1a:	2900      	cmp	r1, #0
     b1c:	d012      	beq.n	b44 <ringbuffer_get+0x34>
     b1e:	2001      	movs	r0, #1
     b20:	2240      	movs	r2, #64	; 0x40
     b22:	490c      	ldr	r1, [pc, #48]	; (b54 <ringbuffer_get+0x44>)
     b24:	4b0c      	ldr	r3, [pc, #48]	; (b58 <ringbuffer_get+0x48>)
     b26:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     b28:	68a3      	ldr	r3, [r4, #8]
     b2a:	68e2      	ldr	r2, [r4, #12]
     b2c:	429a      	cmp	r2, r3
     b2e:	d00d      	beq.n	b4c <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     b30:	6862      	ldr	r2, [r4, #4]
     b32:	4013      	ands	r3, r2
     b34:	6822      	ldr	r2, [r4, #0]
     b36:	5cd3      	ldrb	r3, [r2, r3]
     b38:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     b3a:	68a3      	ldr	r3, [r4, #8]
     b3c:	3301      	adds	r3, #1
     b3e:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     b40:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     b42:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     b44:	2000      	movs	r0, #0
     b46:	e7eb      	b.n	b20 <ringbuffer_get+0x10>
     b48:	2000      	movs	r0, #0
     b4a:	e7e9      	b.n	b20 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     b4c:	200a      	movs	r0, #10
     b4e:	4240      	negs	r0, r0
     b50:	e7f7      	b.n	b42 <ringbuffer_get+0x32>
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	00002640 	.word	0x00002640
     b58:	00000a5d 	.word	0x00000a5d

00000b5c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     b5c:	b570      	push	{r4, r5, r6, lr}
     b5e:	0004      	movs	r4, r0
     b60:	000d      	movs	r5, r1
	ASSERT(rb);
     b62:	1e43      	subs	r3, r0, #1
     b64:	4198      	sbcs	r0, r3
     b66:	b2c0      	uxtb	r0, r0
     b68:	2251      	movs	r2, #81	; 0x51
     b6a:	490a      	ldr	r1, [pc, #40]	; (b94 <ringbuffer_put+0x38>)
     b6c:	4b0a      	ldr	r3, [pc, #40]	; (b98 <ringbuffer_put+0x3c>)
     b6e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     b70:	6863      	ldr	r3, [r4, #4]
     b72:	68e2      	ldr	r2, [r4, #12]
     b74:	4013      	ands	r3, r2
     b76:	6822      	ldr	r2, [r4, #0]
     b78:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     b7a:	68e3      	ldr	r3, [r4, #12]
     b7c:	68a2      	ldr	r2, [r4, #8]
     b7e:	1a9a      	subs	r2, r3, r2
     b80:	6861      	ldr	r1, [r4, #4]
     b82:	428a      	cmp	r2, r1
     b84:	d901      	bls.n	b8a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     b86:	1a59      	subs	r1, r3, r1
     b88:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     b8a:	3301      	adds	r3, #1
     b8c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     b8e:	2000      	movs	r0, #0
     b90:	bd70      	pop	{r4, r5, r6, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	00002640 	.word	0x00002640
     b98:	00000a5d 	.word	0x00000a5d

00000b9c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     b9c:	b510      	push	{r4, lr}
     b9e:	0004      	movs	r4, r0
	ASSERT(rb);
     ba0:	1e43      	subs	r3, r0, #1
     ba2:	4198      	sbcs	r0, r3
     ba4:	b2c0      	uxtb	r0, r0
     ba6:	2267      	movs	r2, #103	; 0x67
     ba8:	4903      	ldr	r1, [pc, #12]	; (bb8 <ringbuffer_num+0x1c>)
     baa:	4b04      	ldr	r3, [pc, #16]	; (bbc <ringbuffer_num+0x20>)
     bac:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     bae:	68e0      	ldr	r0, [r4, #12]
     bb0:	68a3      	ldr	r3, [r4, #8]
     bb2:	1ac0      	subs	r0, r0, r3
}
     bb4:	bd10      	pop	{r4, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00002640 	.word	0x00002640
     bbc:	00000a5d 	.word	0x00000a5d

00000bc0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     bc0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     bc2:	4a06      	ldr	r2, [pc, #24]	; (bdc <_sbrk+0x1c>)
     bc4:	6812      	ldr	r2, [r2, #0]
     bc6:	2a00      	cmp	r2, #0
     bc8:	d004      	beq.n	bd4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     bca:	4a04      	ldr	r2, [pc, #16]	; (bdc <_sbrk+0x1c>)
     bcc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     bce:	18c3      	adds	r3, r0, r3
     bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     bd2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     bd4:	4902      	ldr	r1, [pc, #8]	; (be0 <_sbrk+0x20>)
     bd6:	4a01      	ldr	r2, [pc, #4]	; (bdc <_sbrk+0x1c>)
     bd8:	6011      	str	r1, [r2, #0]
     bda:	e7f6      	b.n	bca <_sbrk+0xa>
     bdc:	20000098 	.word	0x20000098
     be0:	20002128 	.word	0x20002128

00000be4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     be4:	2001      	movs	r0, #1
     be6:	4240      	negs	r0, r0
     be8:	4770      	bx	lr

00000bea <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     bea:	2380      	movs	r3, #128	; 0x80
     bec:	019b      	lsls	r3, r3, #6
     bee:	604b      	str	r3, [r1, #4]

	return 0;
}
     bf0:	2000      	movs	r0, #0
     bf2:	4770      	bx	lr

00000bf4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     bf4:	2001      	movs	r0, #1
     bf6:	4770      	bx	lr

00000bf8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     bf8:	2000      	movs	r0, #0
     bfa:	4770      	bx	lr

00000bfc <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     bfc:	4b02      	ldr	r3, [pc, #8]	; (c08 <_adc_get_hardware_index+0xc>)
     bfe:	469c      	mov	ip, r3
     c00:	4460      	add	r0, ip
     c02:	0a80      	lsrs	r0, r0, #10
     c04:	b2c0      	uxtb	r0, r0
}
     c06:	4770      	bx	lr
     c08:	bdffbc00 	.word	0xbdffbc00

00000c0c <_adc_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{
     c0c:	b510      	push	{r4, lr}
	return ADC0_IRQn + _adc_get_hardware_index(device->hw);
     c0e:	6940      	ldr	r0, [r0, #20]
     c10:	4b02      	ldr	r3, [pc, #8]	; (c1c <_adc_get_irq_num+0x10>)
     c12:	4798      	blx	r3
     c14:	3019      	adds	r0, #25
     c16:	b2c0      	uxtb	r0, r0
}
     c18:	bd10      	pop	{r4, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	00000bfd 	.word	0x00000bfd

00000c20 <_adc_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _adc_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == ADC0) {
     c20:	4b03      	ldr	r3, [pc, #12]	; (c30 <_adc_init_irq_param+0x10>)
     c22:	4298      	cmp	r0, r3
     c24:	d000      	beq.n	c28 <_adc_init_irq_param+0x8>
		_adc0_dev = dev;
	}
}
     c26:	4770      	bx	lr
		_adc0_dev = dev;
     c28:	4b02      	ldr	r3, [pc, #8]	; (c34 <_adc_init_irq_param+0x14>)
     c2a:	6019      	str	r1, [r3, #0]
}
     c2c:	e7fb      	b.n	c26 <_adc_init_irq_param+0x6>
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	42004400 	.word	0x42004400
     c34:	2000009c 	.word	0x2000009c

00000c38 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     c38:	b530      	push	{r4, r5, lr}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
     c3a:	4b52      	ldr	r3, [pc, #328]	; (d84 <_adc_init+0x14c>)
     c3c:	4298      	cmp	r0, r3
     c3e:	d100      	bne.n	c42 <_adc_init+0xa>
     c40:	e088      	b.n	d54 <_adc_init+0x11c>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
     c42:	4b51      	ldr	r3, [pc, #324]	; (d88 <_adc_init+0x150>)
     c44:	4298      	cmp	r0, r3
     c46:	d100      	bne.n	c4a <_adc_init+0x12>
     c48:	e08f      	b.n	d6a <_adc_init+0x132>
	uint16_t calib_reg = 0;
     c4a:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     c4c:	8c03      	ldrh	r3, [r0, #32]
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     c4e:	07db      	lsls	r3, r3, #31
     c50:	d414      	bmi.n	c7c <_adc_init+0x44>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c52:	8c03      	ldrh	r3, [r0, #32]
     c54:	079b      	lsls	r3, r3, #30
     c56:	d1fc      	bne.n	c52 <_adc_init+0x1a>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     c58:	7803      	ldrb	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     c5a:	079b      	lsls	r3, r3, #30
     c5c:	d509      	bpl.n	c72 <_adc_init+0x3a>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     c5e:	7803      	ldrb	r3, [r0, #0]
     c60:	2402      	movs	r4, #2
     c62:	43a3      	bics	r3, r4
     c64:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c66:	8c03      	ldrh	r3, [r0, #32]
     c68:	079b      	lsls	r3, r3, #30
     c6a:	d1fc      	bne.n	c66 <_adc_init+0x2e>
     c6c:	8c03      	ldrh	r3, [r0, #32]
     c6e:	079b      	lsls	r3, r3, #30
     c70:	d4fc      	bmi.n	c6c <_adc_init+0x34>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     c72:	2301      	movs	r3, #1
     c74:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c76:	8c03      	ldrh	r3, [r0, #32]
     c78:	079b      	lsls	r3, r3, #30
     c7a:	d1fc      	bne.n	c76 <_adc_init+0x3e>
     c7c:	8c03      	ldrh	r3, [r0, #32]
     c7e:	07db      	lsls	r3, r3, #31
     c80:	d4fc      	bmi.n	c7c <_adc_init+0x44>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     c82:	8582      	strh	r2, [r0, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     c84:	00ca      	lsls	r2, r1, #3
     c86:	1a52      	subs	r2, r2, r1
     c88:	0094      	lsls	r4, r2, #2
     c8a:	4b40      	ldr	r3, [pc, #256]	; (d8c <_adc_init+0x154>)
     c8c:	191b      	adds	r3, r3, r4
     c8e:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
     c90:	7042      	strb	r2, [r0, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     c92:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
     c94:	7082      	strb	r2, [r0, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     c96:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
     c98:	70c2      	strb	r2, [r0, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     c9a:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
     c9c:	8103      	strh	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c9e:	8c03      	ldrh	r3, [r0, #32]
     ca0:	055b      	lsls	r3, r3, #21
     ca2:	d1fc      	bne.n	c9e <_adc_init+0x66>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     ca4:	00cb      	lsls	r3, r1, #3
     ca6:	1a5b      	subs	r3, r3, r1
     ca8:	009a      	lsls	r2, r3, #2
     caa:	4b38      	ldr	r3, [pc, #224]	; (d8c <_adc_init+0x154>)
     cac:	189b      	adds	r3, r3, r2
     cae:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
     cb0:	8143      	strh	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cb2:	8c03      	ldrh	r3, [r0, #32]
     cb4:	055b      	lsls	r3, r3, #21
     cb6:	d1fc      	bne.n	cb2 <_adc_init+0x7a>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     cb8:	00cb      	lsls	r3, r1, #3
     cba:	1a5b      	subs	r3, r3, r1
     cbc:	009a      	lsls	r2, r3, #2
     cbe:	4b33      	ldr	r3, [pc, #204]	; (d8c <_adc_init+0x154>)
     cc0:	189b      	adds	r3, r3, r2
     cc2:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     cc4:	7303      	strb	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cc6:	8c03      	ldrh	r3, [r0, #32]
     cc8:	055b      	lsls	r3, r3, #21
     cca:	d1fc      	bne.n	cc6 <_adc_init+0x8e>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     ccc:	00cb      	lsls	r3, r1, #3
     cce:	1a5b      	subs	r3, r3, r1
     cd0:	009a      	lsls	r2, r3, #2
     cd2:	4b2e      	ldr	r3, [pc, #184]	; (d8c <_adc_init+0x154>)
     cd4:	189b      	adds	r3, r3, r2
     cd6:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     cd8:	7343      	strb	r3, [r0, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cda:	8c03      	ldrh	r3, [r0, #32]
     cdc:	055b      	lsls	r3, r3, #21
     cde:	d1fc      	bne.n	cda <_adc_init+0xa2>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     ce0:	00cb      	lsls	r3, r1, #3
     ce2:	1a5b      	subs	r3, r3, r1
     ce4:	009a      	lsls	r2, r3, #2
     ce6:	4b29      	ldr	r3, [pc, #164]	; (d8c <_adc_init+0x154>)
     ce8:	189b      	adds	r3, r3, r2
     cea:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     cec:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cee:	8c03      	ldrh	r3, [r0, #32]
     cf0:	065b      	lsls	r3, r3, #25
     cf2:	d4fc      	bmi.n	cee <_adc_init+0xb6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     cf4:	00cb      	lsls	r3, r1, #3
     cf6:	1a5b      	subs	r3, r3, r1
     cf8:	009a      	lsls	r2, r3, #2
     cfa:	4b24      	ldr	r3, [pc, #144]	; (d8c <_adc_init+0x154>)
     cfc:	189b      	adds	r3, r3, r2
     cfe:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     d00:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d02:	8c03      	ldrh	r3, [r0, #32]
     d04:	061b      	lsls	r3, r3, #24
     d06:	d4fc      	bmi.n	d02 <_adc_init+0xca>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     d08:	00cb      	lsls	r3, r1, #3
     d0a:	1a5b      	subs	r3, r3, r1
     d0c:	009a      	lsls	r2, r3, #2
     d0e:	4b1f      	ldr	r3, [pc, #124]	; (d8c <_adc_init+0x154>)
     d10:	189b      	adds	r3, r3, r2
     d12:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     d14:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d16:	8c03      	ldrh	r3, [r0, #32]
     d18:	05db      	lsls	r3, r3, #23
     d1a:	d4fc      	bmi.n	d16 <_adc_init+0xde>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     d1c:	00cb      	lsls	r3, r1, #3
     d1e:	1a5b      	subs	r3, r3, r1
     d20:	009a      	lsls	r2, r3, #2
     d22:	4b1a      	ldr	r3, [pc, #104]	; (d8c <_adc_init+0x154>)
     d24:	189b      	adds	r3, r3, r2
     d26:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     d28:	8283      	strh	r3, [r0, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d2a:	8c03      	ldrh	r3, [r0, #32]
     d2c:	059b      	lsls	r3, r3, #22
     d2e:	d4fc      	bmi.n	d2a <_adc_init+0xf2>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     d30:	4a16      	ldr	r2, [pc, #88]	; (d8c <_adc_init+0x154>)
     d32:	00cb      	lsls	r3, r1, #3
     d34:	1a5d      	subs	r5, r3, r1
     d36:	00ac      	lsls	r4, r5, #2
     d38:	0025      	movs	r5, r4
     d3a:	1914      	adds	r4, r2, r4
     d3c:	7d24      	ldrb	r4, [r4, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     d3e:	7704      	strb	r4, [r0, #28]
	((Adc *)hw)->SEQCTRL.reg = data;
     d40:	2400      	movs	r4, #0
     d42:	6284      	str	r4, [r0, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     d44:	1952      	adds	r2, r2, r5
     d46:	7853      	ldrb	r3, [r2, #1]
	((Adc *)hw)->CTRLA.reg = data;
     d48:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     d4a:	8c03      	ldrh	r3, [r0, #32]
     d4c:	079b      	lsls	r3, r3, #30
     d4e:	d1fc      	bne.n	d4a <_adc_init+0x112>

	return ERR_NONE;
}
     d50:	2000      	movs	r0, #0
     d52:	bd30      	pop	{r4, r5, pc}
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     d54:	4b0e      	ldr	r3, [pc, #56]	; (d90 <_adc_init+0x158>)
     d56:	681b      	ldr	r3, [r3, #0]
     d58:	021a      	lsls	r2, r3, #8
     d5a:	24e0      	movs	r4, #224	; 0xe0
     d5c:	00e4      	lsls	r4, r4, #3
     d5e:	4014      	ands	r4, r2
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
     d60:	08db      	lsrs	r3, r3, #3
     d62:	2207      	movs	r2, #7
     d64:	401a      	ands	r2, r3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     d66:	4322      	orrs	r2, r4
     d68:	e770      	b.n	c4c <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     d6a:	4b09      	ldr	r3, [pc, #36]	; (d90 <_adc_init+0x158>)
     d6c:	681b      	ldr	r3, [r3, #0]
     d6e:	099a      	lsrs	r2, r3, #6
     d70:	0212      	lsls	r2, r2, #8
     d72:	24e0      	movs	r4, #224	; 0xe0
     d74:	00e4      	lsls	r4, r4, #3
     d76:	4022      	ands	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
     d78:	0a5b      	lsrs	r3, r3, #9
     d7a:	2407      	movs	r4, #7
     d7c:	4023      	ands	r3, r4
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     d7e:	431a      	orrs	r2, r3
     d80:	e764      	b.n	c4c <_adc_init+0x14>
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	42004400 	.word	0x42004400
     d88:	42004800 	.word	0x42004800
     d8c:	00002664 	.word	0x00002664
     d90:	00806020 	.word	0x00806020

00000d94 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
     d94:	b510      	push	{r4, lr}
	void *const hw      = device->hw;
     d96:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
     d98:	7991      	ldrb	r1, [r2, #6]
	return ((Adc *)hw)->INTENSET.reg;
     d9a:	7953      	ldrb	r3, [r2, #5]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
     d9c:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
     d9e:	07d9      	lsls	r1, r3, #31
     da0:	d404      	bmi.n	dac <_adc_interrupt_handler+0x18>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
     da2:	0799      	lsls	r1, r3, #30
     da4:	d40a      	bmi.n	dbc <_adc_interrupt_handler+0x28>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
     da6:	075b      	lsls	r3, r3, #29
     da8:	d40e      	bmi.n	dc8 <_adc_interrupt_handler+0x34>
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
     daa:	bd10      	pop	{r4, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     dac:	2301      	movs	r3, #1
     dae:	7193      	strb	r3, [r2, #6]
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
     db0:	6883      	ldr	r3, [r0, #8]
	return ((Adc *)hw)->RESULT.reg;
     db2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     db4:	b292      	uxth	r2, r2
     db6:	2100      	movs	r1, #0
     db8:	4798      	blx	r3
     dba:	e7f6      	b.n	daa <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     dbc:	2302      	movs	r3, #2
     dbe:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.error_cb(device, 0);
     dc0:	6843      	ldr	r3, [r0, #4]
     dc2:	2100      	movs	r1, #0
     dc4:	4798      	blx	r3
     dc6:	e7f0      	b.n	daa <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
     dc8:	2304      	movs	r3, #4
     dca:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.window_cb(device, 0);
     dcc:	6803      	ldr	r3, [r0, #0]
     dce:	2100      	movs	r1, #0
     dd0:	4798      	blx	r3
}
     dd2:	e7ea      	b.n	daa <_adc_interrupt_handler+0x16>

00000dd4 <_adc_get_regs>:
{
     dd4:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     dd6:	4b0b      	ldr	r3, [pc, #44]	; (e04 <_adc_get_regs+0x30>)
     dd8:	4798      	blx	r3
     dda:	0002      	movs	r2, r0
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     ddc:	2000      	movs	r0, #0
     dde:	2800      	cmp	r0, #0
     de0:	d006      	beq.n	df0 <_adc_get_regs+0x1c>
	ASSERT(false);
     de2:	228f      	movs	r2, #143	; 0x8f
     de4:	4908      	ldr	r1, [pc, #32]	; (e08 <_adc_get_regs+0x34>)
     de6:	2000      	movs	r0, #0
     de8:	4b08      	ldr	r3, [pc, #32]	; (e0c <_adc_get_regs+0x38>)
     dea:	4798      	blx	r3
	return 0;
     dec:	2000      	movs	r0, #0
}
     dee:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     df0:	00c3      	lsls	r3, r0, #3
     df2:	1a1b      	subs	r3, r3, r0
     df4:	0099      	lsls	r1, r3, #2
     df6:	4b06      	ldr	r3, [pc, #24]	; (e10 <_adc_get_regs+0x3c>)
     df8:	5ccb      	ldrb	r3, [r1, r3]
     dfa:	429a      	cmp	r2, r3
     dfc:	d0f7      	beq.n	dee <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     dfe:	3001      	adds	r0, #1
     e00:	b2c0      	uxtb	r0, r0
     e02:	e7ec      	b.n	dde <_adc_get_regs+0xa>
     e04:	00000bfd 	.word	0x00000bfd
     e08:	00002680 	.word	0x00002680
     e0c:	00000a5d 	.word	0x00000a5d
     e10:	00002664 	.word	0x00002664

00000e14 <_adc_async_init>:
{
     e14:	b570      	push	{r4, r5, r6, lr}
     e16:	0004      	movs	r4, r0
     e18:	000d      	movs	r5, r1
	ASSERT(device);
     e1a:	1e43      	subs	r3, r0, #1
     e1c:	4198      	sbcs	r0, r3
     e1e:	b2c0      	uxtb	r0, r0
     e20:	22f0      	movs	r2, #240	; 0xf0
     e22:	491e      	ldr	r1, [pc, #120]	; (e9c <_adc_async_init+0x88>)
     e24:	4b1e      	ldr	r3, [pc, #120]	; (ea0 <_adc_async_init+0x8c>)
     e26:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
     e28:	0028      	movs	r0, r5
     e2a:	4b1e      	ldr	r3, [pc, #120]	; (ea4 <_adc_async_init+0x90>)
     e2c:	4798      	blx	r3
     e2e:	0001      	movs	r1, r0
     e30:	0028      	movs	r0, r5
     e32:	4b1d      	ldr	r3, [pc, #116]	; (ea8 <_adc_async_init+0x94>)
     e34:	4798      	blx	r3
     e36:	1e06      	subs	r6, r0, #0
	if (init_status) {
     e38:	d001      	beq.n	e3e <_adc_async_init+0x2a>
}
     e3a:	0030      	movs	r0, r6
     e3c:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     e3e:	6165      	str	r5, [r4, #20]
	_adc_init_irq_param(hw, device);
     e40:	0021      	movs	r1, r4
     e42:	0028      	movs	r0, r5
     e44:	4b19      	ldr	r3, [pc, #100]	; (eac <_adc_async_init+0x98>)
     e46:	4798      	blx	r3
	NVIC_DisableIRQ(_adc_get_irq_num(device));
     e48:	0020      	movs	r0, r4
     e4a:	4b19      	ldr	r3, [pc, #100]	; (eb0 <_adc_async_init+0x9c>)
     e4c:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e4e:	0603      	lsls	r3, r0, #24
     e50:	d40a      	bmi.n	e68 <_adc_async_init+0x54>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e52:	231f      	movs	r3, #31
     e54:	4018      	ands	r0, r3
     e56:	3b1e      	subs	r3, #30
     e58:	4083      	lsls	r3, r0
     e5a:	2280      	movs	r2, #128	; 0x80
     e5c:	4915      	ldr	r1, [pc, #84]	; (eb4 <_adc_async_init+0xa0>)
     e5e:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
     e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e64:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device));
     e68:	0020      	movs	r0, r4
     e6a:	4b11      	ldr	r3, [pc, #68]	; (eb0 <_adc_async_init+0x9c>)
     e6c:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e6e:	0603      	lsls	r3, r0, #24
     e70:	d407      	bmi.n	e82 <_adc_async_init+0x6e>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e72:	231f      	movs	r3, #31
     e74:	4018      	ands	r0, r3
     e76:	3b1e      	subs	r3, #30
     e78:	4083      	lsls	r3, r0
     e7a:	22c0      	movs	r2, #192	; 0xc0
     e7c:	0052      	lsls	r2, r2, #1
     e7e:	490d      	ldr	r1, [pc, #52]	; (eb4 <_adc_async_init+0xa0>)
     e80:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ(_adc_get_irq_num(device));
     e82:	0020      	movs	r0, r4
     e84:	4b0a      	ldr	r3, [pc, #40]	; (eb0 <_adc_async_init+0x9c>)
     e86:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
     e88:	0603      	lsls	r3, r0, #24
     e8a:	d4d6      	bmi.n	e3a <_adc_async_init+0x26>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e8c:	231f      	movs	r3, #31
     e8e:	4018      	ands	r0, r3
     e90:	3b1e      	subs	r3, #30
     e92:	4083      	lsls	r3, r0
     e94:	4a07      	ldr	r2, [pc, #28]	; (eb4 <_adc_async_init+0xa0>)
     e96:	6013      	str	r3, [r2, #0]
     e98:	e7cf      	b.n	e3a <_adc_async_init+0x26>
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	00002680 	.word	0x00002680
     ea0:	00000a5d 	.word	0x00000a5d
     ea4:	00000dd5 	.word	0x00000dd5
     ea8:	00000c39 	.word	0x00000c39
     eac:	00000c21 	.word	0x00000c21
     eb0:	00000c0d 	.word	0x00000c0d
     eb4:	e000e100 	.word	0xe000e100

00000eb8 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     eb8:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     eba:	7813      	ldrb	r3, [r2, #0]
     ebc:	2102      	movs	r1, #2
     ebe:	430b      	orrs	r3, r1
     ec0:	b2db      	uxtb	r3, r3
     ec2:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ec4:	8c13      	ldrh	r3, [r2, #32]
     ec6:	079b      	lsls	r3, r3, #30
     ec8:	d1fc      	bne.n	ec4 <_adc_async_enable_channel+0xc>
}
     eca:	4770      	bx	lr

00000ecc <_adc_async_get_data_size>:
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     ecc:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLC.reg;
     ece:	895a      	ldrh	r2, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     ed0:	0912      	lsrs	r2, r2, #4
     ed2:	2303      	movs	r3, #3
     ed4:	4013      	ands	r3, r2
     ed6:	2b03      	cmp	r3, #3
     ed8:	d001      	beq.n	ede <_adc_async_get_data_size+0x12>
     eda:	2002      	movs	r0, #2
}
     edc:	4770      	bx	lr
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     ede:	2001      	movs	r0, #1
     ee0:	e7fc      	b.n	edc <_adc_async_get_data_size+0x10>

00000ee2 <_adc_async_set_irq_state>:
	void *const hw = device->hw;
     ee2:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
     ee4:	2a01      	cmp	r2, #1
     ee6:	d008      	beq.n	efa <_adc_async_set_irq_state+0x18>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
     ee8:	2a02      	cmp	r2, #2
     eea:	d00e      	beq.n	f0a <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
     eec:	2a00      	cmp	r2, #0
     eee:	d103      	bne.n	ef8 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
     ef0:	2b00      	cmp	r3, #0
     ef2:	d012      	beq.n	f1a <_adc_async_set_irq_state+0x38>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
     ef4:	2301      	movs	r3, #1
     ef6:	714b      	strb	r3, [r1, #5]
}
     ef8:	4770      	bx	lr
	if (value == 0x0) {
     efa:	2b00      	cmp	r3, #0
     efc:	d102      	bne.n	f04 <_adc_async_set_irq_state+0x22>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
     efe:	3304      	adds	r3, #4
     f00:	710b      	strb	r3, [r1, #4]
     f02:	e7f9      	b.n	ef8 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
     f04:	2304      	movs	r3, #4
     f06:	714b      	strb	r3, [r1, #5]
     f08:	e7f6      	b.n	ef8 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
     f0a:	2b00      	cmp	r3, #0
     f0c:	d102      	bne.n	f14 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
     f0e:	3302      	adds	r3, #2
     f10:	710b      	strb	r3, [r1, #4]
     f12:	e7f1      	b.n	ef8 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
     f14:	2302      	movs	r3, #2
     f16:	714b      	strb	r3, [r1, #5]
     f18:	e7ee      	b.n	ef8 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
     f1a:	3301      	adds	r3, #1
     f1c:	710b      	strb	r3, [r1, #4]
     f1e:	e7eb      	b.n	ef8 <_adc_async_set_irq_state+0x16>

00000f20 <ADC0_Handler>:

void ADC0_Handler(void)
{
     f20:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
     f22:	4b02      	ldr	r3, [pc, #8]	; (f2c <ADC0_Handler+0xc>)
     f24:	6818      	ldr	r0, [r3, #0]
     f26:	4b02      	ldr	r3, [pc, #8]	; (f30 <ADC0_Handler+0x10>)
     f28:	4798      	blx	r3
}
     f2a:	bd10      	pop	{r4, pc}
     f2c:	2000009c 	.word	0x2000009c
     f30:	00000d95 	.word	0x00000d95

00000f34 <_adc_get_adc_async>:
 * \brief Retrieve ADC async helper functions
 */
void *_adc_get_adc_async(void)
{
	return (void *)NULL;
}
     f34:	2000      	movs	r0, #0
     f36:	4770      	bx	lr

00000f38 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f38:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     f3a:	4b08      	ldr	r3, [pc, #32]	; (f5c <_init_chip+0x24>)
     f3c:	685a      	ldr	r2, [r3, #4]
     f3e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f40:	4b07      	ldr	r3, [pc, #28]	; (f60 <_init_chip+0x28>)
     f42:	4798      	blx	r3
	_oscctrl_init_sources();
     f44:	4b07      	ldr	r3, [pc, #28]	; (f64 <_init_chip+0x2c>)
     f46:	4798      	blx	r3
	_mclk_init();
     f48:	4b07      	ldr	r3, [pc, #28]	; (f68 <_init_chip+0x30>)
     f4a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     f4c:	4b07      	ldr	r3, [pc, #28]	; (f6c <_init_chip+0x34>)
     f4e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f50:	20ff      	movs	r0, #255	; 0xff
     f52:	4b07      	ldr	r3, [pc, #28]	; (f70 <_init_chip+0x38>)
     f54:	4798      	blx	r3

	_div_init();
     f56:	4b07      	ldr	r3, [pc, #28]	; (f74 <_init_chip+0x3c>)
     f58:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     f5a:	bd10      	pop	{r4, pc}
     f5c:	41004000 	.word	0x41004000
     f60:	000010b5 	.word	0x000010b5
     f64:	000010d1 	.word	0x000010d1
     f68:	000010a9 	.word	0x000010a9
     f6c:	0000110d 	.word	0x0000110d
     f70:	00001085 	.word	0x00001085
     f74:	00000f79 	.word	0x00000f79

00000f78 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     f78:	2290      	movs	r2, #144	; 0x90
     f7a:	05d2      	lsls	r2, r2, #23
     f7c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     f7e:	2102      	movs	r1, #2
     f80:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     f82:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     f84:	4770      	bx	lr

00000f86 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     f86:	b510      	push	{r4, lr}
     f88:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f8a:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     f8e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     f90:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     f92:	2390      	movs	r3, #144	; 0x90
     f94:	05db      	lsls	r3, r3, #23
     f96:	781a      	ldrb	r2, [r3, #0]
     f98:	2401      	movs	r4, #1
     f9a:	43a2      	bics	r2, r4
     f9c:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     f9e:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     fa0:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     fa2:	2390      	movs	r3, #144	; 0x90
     fa4:	05db      	lsls	r3, r3, #23
     fa6:	791b      	ldrb	r3, [r3, #4]
     fa8:	07db      	lsls	r3, r3, #31
     faa:	d4fa      	bmi.n	fa2 <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     fac:	2390      	movs	r3, #144	; 0x90
     fae:	05db      	lsls	r3, r3, #23
     fb0:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     fb2:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     fb4:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     fb8:	b002      	add	sp, #8
     fba:	bd10      	pop	{r4, pc}

00000fbc <__aeabi_idivmod>:

/**
 * \brief Do signed division, return result and remainder
 */
uint64_t __aeabi_idivmod(int numerator, int denominator)
{
     fbc:	b510      	push	{r4, lr}
     fbe:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fc0:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     fc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     fc6:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     fc8:	2390      	movs	r3, #144	; 0x90
     fca:	05db      	lsls	r3, r3, #23
     fcc:	781a      	ldrb	r2, [r3, #0]
     fce:	2401      	movs	r4, #1
     fd0:	4322      	orrs	r2, r4
     fd2:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     fd4:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     fd6:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     fd8:	2390      	movs	r3, #144	; 0x90
     fda:	05db      	lsls	r3, r3, #23
     fdc:	791b      	ldrb	r3, [r3, #4]
     fde:	07db      	lsls	r3, r3, #31
     fe0:	d4fa      	bmi.n	fd8 <__aeabi_idivmod+0x1c>
	_divas_div(1, numerator, denominator);
	res = _divas_result64();
     fe2:	4b04      	ldr	r3, [pc, #16]	; (ff4 <__aeabi_idivmod+0x38>)
     fe4:	6818      	ldr	r0, [r3, #0]
     fe6:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     fe8:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     fea:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     fee:	b002      	add	sp, #8
     ff0:	bd10      	pop	{r4, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	48000010 	.word	0x48000010

00000ff8 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     ff8:	b510      	push	{r4, lr}
     ffa:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ffc:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    1000:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1002:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
    1004:	2390      	movs	r3, #144	; 0x90
    1006:	05db      	lsls	r3, r3, #23
    1008:	781a      	ldrb	r2, [r3, #0]
    100a:	2401      	movs	r4, #1
    100c:	43a2      	bics	r2, r4
    100e:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
    1010:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    1012:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    1014:	2390      	movs	r3, #144	; 0x90
    1016:	05db      	lsls	r3, r3, #23
    1018:	791b      	ldrb	r3, [r3, #4]
    101a:	07db      	lsls	r3, r3, #31
    101c:	d4fa      	bmi.n	1014 <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
    101e:	4b04      	ldr	r3, [pc, #16]	; (1030 <__aeabi_uidivmod+0x38>)
    1020:	6818      	ldr	r0, [r3, #0]
    1022:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
    1024:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1026:	f383 8810 	msr	PRIMASK, r3
	return res;
}
    102a:	b002      	add	sp, #8
    102c:	bd10      	pop	{r4, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	48000010 	.word	0x48000010

00001034 <_event_system_init>:
int32_t _event_system_init(void)
{
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1034:	2300      	movs	r3, #0
    1036:	e009      	b.n	104c <_event_system_init+0x18>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1038:	4a11      	ldr	r2, [pc, #68]	; (1080 <_event_system_init+0x4c>)
    103a:	5cd0      	ldrb	r0, [r2, r3]
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    103c:	001a      	movs	r2, r3
    103e:	3220      	adds	r2, #32
    1040:	0092      	lsls	r2, r2, #2
    1042:	2184      	movs	r1, #132	; 0x84
    1044:	05c9      	lsls	r1, r1, #23
    1046:	5050      	str	r0, [r2, r1]
	for (i = 0; i < EVSYS_USERS; i++) {
    1048:	3301      	adds	r3, #1
    104a:	b2db      	uxtb	r3, r3
    104c:	2b2e      	cmp	r3, #46	; 0x2e
    104e:	d9f3      	bls.n	1038 <_event_system_init+0x4>
    1050:	2300      	movs	r3, #0
    1052:	e00b      	b.n	106c <_event_system_init+0x38>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1054:	0059      	lsls	r1, r3, #1
    1056:	4a0a      	ldr	r2, [pc, #40]	; (1080 <_event_system_init+0x4c>)
    1058:	1852      	adds	r2, r2, r1
    105a:	8e10      	ldrh	r0, [r2, #48]	; 0x30
	((Evsys *)hw)->CHANNEL[index].reg = data;
    105c:	001a      	movs	r2, r3
    105e:	3208      	adds	r2, #8
    1060:	0092      	lsls	r2, r2, #2
    1062:	2184      	movs	r1, #132	; 0x84
    1064:	05c9      	lsls	r1, r1, #23
    1066:	5050      	str	r0, [r2, r1]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1068:	3301      	adds	r3, #1
    106a:	b2db      	uxtb	r3, r3
    106c:	2b0b      	cmp	r3, #11
    106e:	d9f1      	bls.n	1054 <_event_system_init+0x20>
	((Evsys *)hw)->INTENSET.reg = data;
    1070:	2384      	movs	r3, #132	; 0x84
    1072:	05db      	lsls	r3, r3, #23
    1074:	2200      	movs	r2, #0
    1076:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    1078:	3a01      	subs	r2, #1
    107a:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    107c:	2000      	movs	r0, #0
    107e:	4770      	bx	lr
    1080:	00002698 	.word	0x00002698

00001084 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1084:	07c3      	lsls	r3, r0, #31
    1086:	d507      	bpl.n	1098 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1088:	4a04      	ldr	r2, [pc, #16]	; (109c <_gclk_init_generators_by_fref+0x18>)
    108a:	4b05      	ldr	r3, [pc, #20]	; (10a0 <_gclk_init_generators_by_fref+0x1c>)
    108c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    108e:	4b04      	ldr	r3, [pc, #16]	; (10a0 <_gclk_init_generators_by_fref+0x1c>)
    1090:	685a      	ldr	r2, [r3, #4]
    1092:	4b04      	ldr	r3, [pc, #16]	; (10a4 <_gclk_init_generators_by_fref+0x20>)
    1094:	421a      	tst	r2, r3
    1096:	d1fa      	bne.n	108e <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    1098:	4770      	bx	lr
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	00010106 	.word	0x00010106
    10a0:	40001c00 	.word	0x40001c00
    10a4:	000007fd 	.word	0x000007fd

000010a8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    10a8:	2201      	movs	r2, #1
    10aa:	4b01      	ldr	r3, [pc, #4]	; (10b0 <_mclk_init+0x8>)
    10ac:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    10ae:	4770      	bx	lr
    10b0:	40000800 	.word	0x40000800

000010b4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10b4:	4a05      	ldr	r2, [pc, #20]	; (10cc <_osc32kctrl_init_sources+0x18>)
    10b6:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    10b8:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10ba:	021b      	lsls	r3, r3, #8
    10bc:	21f8      	movs	r1, #248	; 0xf8
    10be:	0149      	lsls	r1, r1, #5
    10c0:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    10c2:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    10c4:	2300      	movs	r3, #0
    10c6:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    10c8:	4770      	bx	lr
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	40001400 	.word	0x40001400

000010d0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    10d0:	4b0d      	ldr	r3, [pc, #52]	; (1108 <_oscctrl_init_sources+0x38>)
    10d2:	2202      	movs	r2, #2
    10d4:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    10d6:	3209      	adds	r2, #9
    10d8:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    10da:	4b0b      	ldr	r3, [pc, #44]	; (1108 <_oscctrl_init_sources+0x38>)
    10dc:	699b      	ldr	r3, [r3, #24]
    10de:	075b      	lsls	r3, r3, #29
    10e0:	d4fb      	bmi.n	10da <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    10e2:	4b09      	ldr	r3, [pc, #36]	; (1108 <_oscctrl_init_sources+0x38>)
    10e4:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    10e6:	075b      	lsls	r3, r3, #29
    10e8:	d4fb      	bmi.n	10e2 <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    10ea:	2207      	movs	r2, #7
    10ec:	4b06      	ldr	r3, [pc, #24]	; (1108 <_oscctrl_init_sources+0x38>)
    10ee:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    10f0:	4b05      	ldr	r3, [pc, #20]	; (1108 <_oscctrl_init_sources+0x38>)
    10f2:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    10f4:	06db      	lsls	r3, r3, #27
    10f6:	d5fb      	bpl.n	10f0 <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    10f8:	4a03      	ldr	r2, [pc, #12]	; (1108 <_oscctrl_init_sources+0x38>)
    10fa:	7d13      	ldrb	r3, [r2, #20]
    10fc:	2180      	movs	r1, #128	; 0x80
    10fe:	4249      	negs	r1, r1
    1100:	430b      	orrs	r3, r1
    1102:	b2db      	uxtb	r3, r3
    1104:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1106:	4770      	bx	lr
    1108:	40001000 	.word	0x40001000

0000110c <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    110c:	4770      	bx	lr

0000110e <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    110e:	b510      	push	{r4, lr}
    1110:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1112:	68c3      	ldr	r3, [r0, #12]
    1114:	899b      	ldrh	r3, [r3, #12]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1116:	05db      	lsls	r3, r3, #23
    1118:	d507      	bpl.n	112a <_rtc_timer_interrupt_handler+0x1c>
		if (dev->timer_cb.period_expired) {
    111a:	6803      	ldr	r3, [r0, #0]
    111c:	2b00      	cmp	r3, #0
    111e:	d000      	beq.n	1122 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
    1120:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1122:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1124:	2280      	movs	r2, #128	; 0x80
    1126:	0052      	lsls	r2, r2, #1
    1128:	819a      	strh	r2, [r3, #12]
	}
}
    112a:	bd10      	pop	{r4, pc}

0000112c <_timer_init>:
{
    112c:	b570      	push	{r4, r5, r6, lr}
    112e:	0005      	movs	r5, r0
    1130:	000c      	movs	r4, r1
	ASSERT(dev);
    1132:	1e43      	subs	r3, r0, #1
    1134:	4198      	sbcs	r0, r3
    1136:	b2c0      	uxtb	r0, r0
    1138:	2230      	movs	r2, #48	; 0x30
    113a:	4912      	ldr	r1, [pc, #72]	; (1184 <_timer_init+0x58>)
    113c:	4b12      	ldr	r3, [pc, #72]	; (1188 <_timer_init+0x5c>)
    113e:	4798      	blx	r3
	dev->hw = hw;
    1140:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1142:	2301      	movs	r3, #1
    1144:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1146:	6922      	ldr	r2, [r4, #16]
    1148:	4b10      	ldr	r3, [pc, #64]	; (118c <_timer_init+0x60>)
    114a:	421a      	tst	r2, r3
    114c:	d1fb      	bne.n	1146 <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    114e:	68ea      	ldr	r2, [r5, #12]
    1150:	6913      	ldr	r3, [r2, #16]
    1152:	07db      	lsls	r3, r3, #31
    1154:	d4fc      	bmi.n	1150 <_timer_init+0x24>
}

static inline void hri_rtcmode0_write_EVCTRL_reg(const void *const hw, hri_rtcmode0_evctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.EVCTRL.reg = data;
    1156:	2380      	movs	r3, #128	; 0x80
    1158:	6053      	str	r3, [r2, #4]
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    115a:	68e9      	ldr	r1, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    115c:	4b0c      	ldr	r3, [pc, #48]	; (1190 <_timer_init+0x64>)
    115e:	800b      	strh	r3, [r1, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1160:	690a      	ldr	r2, [r1, #16]
    1162:	4b0a      	ldr	r3, [pc, #40]	; (118c <_timer_init+0x60>)
    1164:	421a      	tst	r2, r3
    1166:	d1fb      	bne.n	1160 <_timer_init+0x34>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1168:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    116a:	2305      	movs	r3, #5
    116c:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    116e:	6913      	ldr	r3, [r2, #16]
    1170:	069b      	lsls	r3, r3, #26
    1172:	d4fc      	bmi.n	116e <_timer_init+0x42>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1174:	2380      	movs	r3, #128	; 0x80
    1176:	005b      	lsls	r3, r3, #1
    1178:	68ea      	ldr	r2, [r5, #12]
    117a:	8153      	strh	r3, [r2, #10]
	_rtc_dev = dev;
    117c:	4b05      	ldr	r3, [pc, #20]	; (1194 <_timer_init+0x68>)
    117e:	601d      	str	r5, [r3, #0]
}
    1180:	2000      	movs	r0, #0
    1182:	bd70      	pop	{r4, r5, r6, pc}
    1184:	000026e0 	.word	0x000026e0
    1188:	00000a5d 	.word	0x00000a5d
    118c:	00008003 	.word	0x00008003
    1190:	ffff8680 	.word	0xffff8680
    1194:	200000a0 	.word	0x200000a0

00001198 <_timer_start>:
{
    1198:	b510      	push	{r4, lr}
    119a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    119c:	d020      	beq.n	11e0 <_timer_start+0x48>
    119e:	68c3      	ldr	r3, [r0, #12]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d01b      	beq.n	11dc <_timer_start+0x44>
    11a4:	2001      	movs	r0, #1
    11a6:	225c      	movs	r2, #92	; 0x5c
    11a8:	490e      	ldr	r1, [pc, #56]	; (11e4 <_timer_start+0x4c>)
    11aa:	4b0f      	ldr	r3, [pc, #60]	; (11e8 <_timer_start+0x50>)
    11ac:	4798      	blx	r3
    11ae:	2204      	movs	r2, #4
    11b0:	4b0e      	ldr	r3, [pc, #56]	; (11ec <_timer_start+0x54>)
    11b2:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    11b4:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    11b6:	2300      	movs	r3, #0
    11b8:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    11ba:	6913      	ldr	r3, [r2, #16]
    11bc:	071b      	lsls	r3, r3, #28
    11be:	d4fc      	bmi.n	11ba <_timer_start+0x22>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    11c0:	68e3      	ldr	r3, [r4, #12]
    11c2:	691a      	ldr	r2, [r3, #16]
    11c4:	0712      	lsls	r2, r2, #28
    11c6:	d4fc      	bmi.n	11c2 <_timer_start+0x2a>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    11c8:	881a      	ldrh	r2, [r3, #0]
    11ca:	2102      	movs	r1, #2
    11cc:	430a      	orrs	r2, r1
    11ce:	b292      	uxth	r2, r2
    11d0:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    11d2:	6919      	ldr	r1, [r3, #16]
    11d4:	4a06      	ldr	r2, [pc, #24]	; (11f0 <_timer_start+0x58>)
    11d6:	4211      	tst	r1, r2
    11d8:	d1fb      	bne.n	11d2 <_timer_start+0x3a>
}
    11da:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    11dc:	2000      	movs	r0, #0
    11de:	e7e2      	b.n	11a6 <_timer_start+0xe>
    11e0:	2000      	movs	r0, #0
    11e2:	e7e0      	b.n	11a6 <_timer_start+0xe>
    11e4:	000026e0 	.word	0x000026e0
    11e8:	00000a5d 	.word	0x00000a5d
    11ec:	e000e100 	.word	0xe000e100
    11f0:	00008003 	.word	0x00008003

000011f4 <_timer_is_started>:
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    11f4:	68c1      	ldr	r1, [r0, #12]
    11f6:	690a      	ldr	r2, [r1, #16]
    11f8:	4b03      	ldr	r3, [pc, #12]	; (1208 <_timer_is_started+0x14>)
    11fa:	421a      	tst	r2, r3
    11fc:	d1fb      	bne.n	11f6 <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    11fe:	880b      	ldrh	r3, [r1, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    1200:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1202:	2001      	movs	r0, #1
    1204:	4018      	ands	r0, r3
}
    1206:	4770      	bx	lr
    1208:	00008003 	.word	0x00008003

0000120c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    120c:	2000      	movs	r0, #0
    120e:	4770      	bx	lr

00001210 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1210:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1212:	4b02      	ldr	r3, [pc, #8]	; (121c <RTC_Handler+0xc>)
    1214:	6818      	ldr	r0, [r3, #0]
    1216:	4b02      	ldr	r3, [pc, #8]	; (1220 <RTC_Handler+0x10>)
    1218:	4798      	blx	r3
}
    121a:	bd10      	pop	{r4, pc}
    121c:	200000a0 	.word	0x200000a0
    1220:	0000110f 	.word	0x0000110f

00001224 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1224:	4b02      	ldr	r3, [pc, #8]	; (1230 <_sercom_get_hardware_index+0xc>)
    1226:	469c      	mov	ip, r3
    1228:	4460      	add	r0, ip
    122a:	0a80      	lsrs	r0, r0, #10
    122c:	b2c0      	uxtb	r0, r0
}
    122e:	4770      	bx	lr
    1230:	bdfffc00 	.word	0xbdfffc00

00001234 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1234:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1236:	4b0b      	ldr	r3, [pc, #44]	; (1264 <_get_sercom_index+0x30>)
    1238:	4798      	blx	r3
    123a:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    123c:	2000      	movs	r0, #0
    123e:	2800      	cmp	r0, #0
    1240:	d006      	beq.n	1250 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1242:	4a09      	ldr	r2, [pc, #36]	; (1268 <_get_sercom_index+0x34>)
    1244:	4909      	ldr	r1, [pc, #36]	; (126c <_get_sercom_index+0x38>)
    1246:	2000      	movs	r0, #0
    1248:	4b09      	ldr	r3, [pc, #36]	; (1270 <_get_sercom_index+0x3c>)
    124a:	4798      	blx	r3
	return 0;
    124c:	2000      	movs	r0, #0
}
    124e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1250:	0083      	lsls	r3, r0, #2
    1252:	181b      	adds	r3, r3, r0
    1254:	0099      	lsls	r1, r3, #2
    1256:	4b07      	ldr	r3, [pc, #28]	; (1274 <_get_sercom_index+0x40>)
    1258:	5ccb      	ldrb	r3, [r1, r3]
    125a:	429a      	cmp	r2, r3
    125c:	d0f7      	beq.n	124e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    125e:	3001      	adds	r0, #1
    1260:	b2c0      	uxtb	r0, r0
    1262:	e7ec      	b.n	123e <_get_sercom_index+0xa>
    1264:	00001225 	.word	0x00001225
    1268:	0000023a 	.word	0x0000023a
    126c:	00002748 	.word	0x00002748
    1270:	00000a5d 	.word	0x00000a5d
    1274:	000026f8 	.word	0x000026f8

00001278 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1278:	b570      	push	{r4, r5, r6, lr}
    127a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    127c:	4b38      	ldr	r3, [pc, #224]	; (1360 <_usart_init+0xe8>)
    127e:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1280:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1282:	07db      	lsls	r3, r3, #31
    1284:	d41d      	bmi.n	12c2 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1286:	0083      	lsls	r3, r0, #2
    1288:	181b      	adds	r3, r3, r0
    128a:	009a      	lsls	r2, r3, #2
    128c:	4b35      	ldr	r3, [pc, #212]	; (1364 <_usart_init+0xec>)
    128e:	189b      	adds	r3, r3, r2
    1290:	685a      	ldr	r2, [r3, #4]
    1292:	231c      	movs	r3, #28
    1294:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1296:	69e3      	ldr	r3, [r4, #28]
    1298:	079b      	lsls	r3, r3, #30
    129a:	d1fc      	bne.n	1296 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    129c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    129e:	079b      	lsls	r3, r3, #30
    12a0:	d509      	bpl.n	12b6 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    12a2:	6823      	ldr	r3, [r4, #0]
    12a4:	2102      	movs	r1, #2
    12a6:	438b      	bics	r3, r1
    12a8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12aa:	69e3      	ldr	r3, [r4, #28]
    12ac:	079b      	lsls	r3, r3, #30
    12ae:	d1fc      	bne.n	12aa <_usart_init+0x32>
    12b0:	69e3      	ldr	r3, [r4, #28]
    12b2:	079b      	lsls	r3, r3, #30
    12b4:	d4fc      	bmi.n	12b0 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    12b6:	2301      	movs	r3, #1
    12b8:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12ba:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12bc:	69e3      	ldr	r3, [r4, #28]
    12be:	079b      	lsls	r3, r3, #30
    12c0:	d1fc      	bne.n	12bc <_usart_init+0x44>
    12c2:	69e3      	ldr	r3, [r4, #28]
    12c4:	07db      	lsls	r3, r3, #31
    12c6:	d4fc      	bmi.n	12c2 <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    12c8:	0083      	lsls	r3, r0, #2
    12ca:	181b      	adds	r3, r3, r0
    12cc:	009a      	lsls	r2, r3, #2
    12ce:	4b25      	ldr	r3, [pc, #148]	; (1364 <_usart_init+0xec>)
    12d0:	189b      	adds	r3, r3, r2
    12d2:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12d6:	69e3      	ldr	r3, [r4, #28]
    12d8:	079b      	lsls	r3, r3, #30
    12da:	d1fc      	bne.n	12d6 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    12dc:	0083      	lsls	r3, r0, #2
    12de:	181b      	adds	r3, r3, r0
    12e0:	009a      	lsls	r2, r3, #2
    12e2:	4b20      	ldr	r3, [pc, #128]	; (1364 <_usart_init+0xec>)
    12e4:	189b      	adds	r3, r3, r2
    12e6:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    12e8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12ea:	69e3      	ldr	r3, [r4, #28]
    12ec:	075b      	lsls	r3, r3, #29
    12ee:	d1fc      	bne.n	12ea <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    12f0:	0083      	lsls	r3, r0, #2
    12f2:	181b      	adds	r3, r3, r0
    12f4:	009a      	lsls	r2, r3, #2
    12f6:	4b1b      	ldr	r3, [pc, #108]	; (1364 <_usart_init+0xec>)
    12f8:	189b      	adds	r3, r3, r2
    12fa:	685b      	ldr	r3, [r3, #4]
    12fc:	049a      	lsls	r2, r3, #18
    12fe:	d40b      	bmi.n	1318 <_usart_init+0xa0>
    1300:	22c0      	movs	r2, #192	; 0xc0
    1302:	01d2      	lsls	r2, r2, #7
    1304:	4213      	tst	r3, r2
    1306:	d107      	bne.n	1318 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1308:	0083      	lsls	r3, r0, #2
    130a:	181b      	adds	r3, r3, r0
    130c:	009a      	lsls	r2, r3, #2
    130e:	4b15      	ldr	r3, [pc, #84]	; (1364 <_usart_init+0xec>)
    1310:	189b      	adds	r3, r3, r2
    1312:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1314:	81a3      	strh	r3, [r4, #12]
    1316:	e015      	b.n	1344 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1318:	0083      	lsls	r3, r0, #2
    131a:	181b      	adds	r3, r3, r0
    131c:	009a      	lsls	r2, r3, #2
    131e:	4911      	ldr	r1, [pc, #68]	; (1364 <_usart_init+0xec>)
    1320:	1889      	adds	r1, r1, r2
    1322:	898a      	ldrh	r2, [r1, #12]
    1324:	89a3      	ldrh	r3, [r4, #12]
    1326:	04d2      	lsls	r2, r2, #19
    1328:	0cd2      	lsrs	r2, r2, #19
    132a:	0b5b      	lsrs	r3, r3, #13
    132c:	035b      	lsls	r3, r3, #13
    132e:	4313      	orrs	r3, r2
    1330:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1332:	7b8b      	ldrb	r3, [r1, #14]
    1334:	2207      	movs	r2, #7
    1336:	401a      	ands	r2, r3
    1338:	89a3      	ldrh	r3, [r4, #12]
    133a:	0352      	lsls	r2, r2, #13
    133c:	04db      	lsls	r3, r3, #19
    133e:	0cdb      	lsrs	r3, r3, #19
    1340:	4313      	orrs	r3, r2
    1342:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1344:	4a07      	ldr	r2, [pc, #28]	; (1364 <_usart_init+0xec>)
    1346:	0083      	lsls	r3, r0, #2
    1348:	181d      	adds	r5, r3, r0
    134a:	00a9      	lsls	r1, r5, #2
    134c:	000d      	movs	r5, r1
    134e:	1851      	adds	r1, r2, r1
    1350:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1352:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1354:	1952      	adds	r2, r2, r5
    1356:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1358:	2330      	movs	r3, #48	; 0x30
    135a:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
    135c:	2000      	movs	r0, #0
    135e:	bd70      	pop	{r4, r5, r6, pc}
    1360:	00001235 	.word	0x00001235
    1364:	000026f8 	.word	0x000026f8

00001368 <_usart_sync_init>:
{
    1368:	b570      	push	{r4, r5, r6, lr}
    136a:	0005      	movs	r5, r0
    136c:	000c      	movs	r4, r1
	ASSERT(device);
    136e:	1e43      	subs	r3, r0, #1
    1370:	4198      	sbcs	r0, r3
    1372:	b2c0      	uxtb	r0, r0
    1374:	22b4      	movs	r2, #180	; 0xb4
    1376:	4904      	ldr	r1, [pc, #16]	; (1388 <_usart_sync_init+0x20>)
    1378:	4b04      	ldr	r3, [pc, #16]	; (138c <_usart_sync_init+0x24>)
    137a:	4798      	blx	r3
	device->hw = hw;
    137c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    137e:	0020      	movs	r0, r4
    1380:	4b03      	ldr	r3, [pc, #12]	; (1390 <_usart_sync_init+0x28>)
    1382:	4798      	blx	r3
}
    1384:	bd70      	pop	{r4, r5, r6, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	00002748 	.word	0x00002748
    138c:	00000a5d 	.word	0x00000a5d
    1390:	00001279 	.word	0x00001279

00001394 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1394:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1396:	6813      	ldr	r3, [r2, #0]
    1398:	2102      	movs	r1, #2
    139a:	430b      	orrs	r3, r1
    139c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    139e:	69d3      	ldr	r3, [r2, #28]
    13a0:	079b      	lsls	r3, r3, #30
    13a2:	d1fc      	bne.n	139e <_usart_sync_enable+0xa>
}
    13a4:	4770      	bx	lr

000013a6 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    13a6:	6803      	ldr	r3, [r0, #0]
    13a8:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    13aa:	8519      	strh	r1, [r3, #40]	; 0x28
}
    13ac:	4770      	bx	lr

000013ae <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    13ae:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    13b0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    13b2:	b2c0      	uxtb	r0, r0
}
    13b4:	4770      	bx	lr

000013b6 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    13b6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    13b8:	7e18      	ldrb	r0, [r3, #24]
    13ba:	2301      	movs	r3, #1
    13bc:	4018      	ands	r0, r3
}
    13be:	4770      	bx	lr

000013c0 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    13c0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    13c2:	7e1b      	ldrb	r3, [r3, #24]
    13c4:	085b      	lsrs	r3, r3, #1
    13c6:	2001      	movs	r0, #1
    13c8:	4018      	ands	r0, r3
}
    13ca:	4770      	bx	lr

000013cc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    13cc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    13ce:	7e1b      	ldrb	r3, [r3, #24]
    13d0:	089b      	lsrs	r3, r3, #2
    13d2:	2001      	movs	r0, #1
    13d4:	4018      	ands	r0, r3
}
    13d6:	4770      	bx	lr

000013d8 <convert_cb_ADC_0>:
uint16_t	  Brake_Threshold = 1000;
volatile bool adc_flag   = false;

static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	adc_flag = true;
    13d8:	2201      	movs	r2, #1
    13da:	4b01      	ldr	r3, [pc, #4]	; (13e0 <convert_cb_ADC_0+0x8>)
    13dc:	701a      	strb	r2, [r3, #0]
}
    13de:	4770      	bx	lr
    13e0:	200000a4 	.word	0x200000a4

000013e4 <main>:

int main(void)
{
    13e4:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
    13e6:	4b1f      	ldr	r3, [pc, #124]	; (1464 <main+0x80>)
    13e8:	4798      	blx	r3


	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    13ea:	4c1f      	ldr	r4, [pc, #124]	; (1468 <main+0x84>)
    13ec:	4b1f      	ldr	r3, [pc, #124]	; (146c <main+0x88>)
    13ee:	2200      	movs	r2, #0
    13f0:	2100      	movs	r1, #0
    13f2:	0020      	movs	r0, r4
    13f4:	4d1e      	ldr	r5, [pc, #120]	; (1470 <main+0x8c>)
    13f6:	47a8      	blx	r5
	adc_async_enable_channel(&ADC_0, 0);
    13f8:	2100      	movs	r1, #0
    13fa:	0020      	movs	r0, r4
    13fc:	4b1d      	ldr	r3, [pc, #116]	; (1474 <main+0x90>)
    13fe:	4798      	blx	r3
	/* Start timer */
	timer_start(&TIMER_0);
    1400:	481d      	ldr	r0, [pc, #116]	; (1478 <main+0x94>)
    1402:	4b1e      	ldr	r3, [pc, #120]	; (147c <main+0x98>)
    1404:	4798      	blx	r3
    1406:	e00a      	b.n	141e <main+0x3a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1408:	2280      	movs	r2, #128	; 0x80
    140a:	0212      	lsls	r2, r2, #8
    140c:	23c0      	movs	r3, #192	; 0xc0
    140e:	05db      	lsls	r3, r3, #23
    1410:	619a      	str	r2, [r3, #24]
			adc_value = adc_value * 5000 / 4096;
			if(adc_value>Brake_Threshold){
				gpio_set_pin_level(LED0,false);
			}
			else{gpio_set_pin_level(LED0,true);}
			printf("ADC Value: %d\r\n", adc_value);
    1412:	481b      	ldr	r0, [pc, #108]	; (1480 <main+0x9c>)
    1414:	4b1b      	ldr	r3, [pc, #108]	; (1484 <main+0xa0>)
    1416:	4798      	blx	r3
			adc_flag = false;
    1418:	2200      	movs	r2, #0
    141a:	4b1b      	ldr	r3, [pc, #108]	; (1488 <main+0xa4>)
    141c:	701a      	strb	r2, [r3, #0]
		if (adc_flag) {
    141e:	4b1a      	ldr	r3, [pc, #104]	; (1488 <main+0xa4>)
    1420:	781b      	ldrb	r3, [r3, #0]
    1422:	2b00      	cmp	r3, #0
    1424:	d0fb      	beq.n	141e <main+0x3a>
			adc_async_read_channel(&ADC_0, 0, adc_buffer, adc_length);
    1426:	4c19      	ldr	r4, [pc, #100]	; (148c <main+0xa8>)
    1428:	8823      	ldrh	r3, [r4, #0]
    142a:	4d19      	ldr	r5, [pc, #100]	; (1490 <main+0xac>)
    142c:	002a      	movs	r2, r5
    142e:	2100      	movs	r1, #0
    1430:	480d      	ldr	r0, [pc, #52]	; (1468 <main+0x84>)
    1432:	4e18      	ldr	r6, [pc, #96]	; (1494 <main+0xb0>)
    1434:	47b0      	blx	r6
			adc_value = adc_buffer[1] << 8 | adc_buffer[0];
    1436:	7869      	ldrb	r1, [r5, #1]
    1438:	0209      	lsls	r1, r1, #8
    143a:	782b      	ldrb	r3, [r5, #0]
    143c:	430b      	orrs	r3, r1
			adc_value = adc_value * 5000 / 4096;
    143e:	4916      	ldr	r1, [pc, #88]	; (1498 <main+0xb4>)
    1440:	434b      	muls	r3, r1
    1442:	17d9      	asrs	r1, r3, #31
    1444:	0509      	lsls	r1, r1, #20
    1446:	0d09      	lsrs	r1, r1, #20
    1448:	18c9      	adds	r1, r1, r3
    144a:	1309      	asrs	r1, r1, #12
    144c:	b289      	uxth	r1, r1
    144e:	4b0e      	ldr	r3, [pc, #56]	; (1488 <main+0xa4>)
    1450:	8059      	strh	r1, [r3, #2]
			if(adc_value>Brake_Threshold){
    1452:	8863      	ldrh	r3, [r4, #2]
    1454:	4299      	cmp	r1, r3
    1456:	d9d7      	bls.n	1408 <main+0x24>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1458:	2280      	movs	r2, #128	; 0x80
    145a:	0212      	lsls	r2, r2, #8
    145c:	23c0      	movs	r3, #192	; 0xc0
    145e:	05db      	lsls	r3, r3, #23
    1460:	615a      	str	r2, [r3, #20]
    1462:	e7d6      	b.n	1412 <main+0x2e>
    1464:	0000011d 	.word	0x0000011d
    1468:	200000c0 	.word	0x200000c0
    146c:	000013d9 	.word	0x000013d9
    1470:	000005dd 	.word	0x000005dd
    1474:	0000059d 	.word	0x0000059d
    1478:	20000104 	.word	0x20000104
    147c:	000008c9 	.word	0x000008c9
    1480:	00002764 	.word	0x00002764
    1484:	000015d9 	.word	0x000015d9
    1488:	200000a4 	.word	0x200000a4
    148c:	20000000 	.word	0x20000000
    1490:	20000120 	.word	0x20000120
    1494:	00000659 	.word	0x00000659
    1498:	00001388 	.word	0x00001388

0000149c <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    149c:	b510      	push	{r4, lr}
    149e:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    14a0:	2800      	cmp	r0, #0
    14a2:	d109      	bne.n	14b8 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    14a4:	0011      	movs	r1, r2
    14a6:	0018      	movs	r0, r3
    14a8:	4b05      	ldr	r3, [pc, #20]	; (14c0 <_read+0x24>)
    14aa:	4798      	blx	r3
	if (n < 0) {
    14ac:	2800      	cmp	r0, #0
    14ae:	db00      	blt.n	14b2 <_read+0x16>
		return -1;
	}

	return n;
}
    14b0:	bd10      	pop	{r4, pc}
		return -1;
    14b2:	2001      	movs	r0, #1
    14b4:	4240      	negs	r0, r0
    14b6:	e7fb      	b.n	14b0 <_read+0x14>
		return -1;
    14b8:	2001      	movs	r0, #1
    14ba:	4240      	negs	r0, r0
    14bc:	e7f8      	b.n	14b0 <_read+0x14>
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	00001519 	.word	0x00001519

000014c4 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    14c4:	b510      	push	{r4, lr}
    14c6:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    14c8:	3801      	subs	r0, #1
    14ca:	2802      	cmp	r0, #2
    14cc:	d809      	bhi.n	14e2 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    14ce:	0011      	movs	r1, r2
    14d0:	0018      	movs	r0, r3
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <_write+0x24>)
    14d4:	4798      	blx	r3
	if (n < 0) {
    14d6:	2800      	cmp	r0, #0
    14d8:	db00      	blt.n	14dc <_write+0x18>
		return -1;
	}

	return n;
}
    14da:	bd10      	pop	{r4, pc}
		return -1;
    14dc:	2001      	movs	r0, #1
    14de:	4240      	negs	r0, r0
    14e0:	e7fb      	b.n	14da <_write+0x16>
		return -1;
    14e2:	2001      	movs	r0, #1
    14e4:	4240      	negs	r0, r0
    14e6:	e7f8      	b.n	14da <_write+0x16>
    14e8:	0000153d 	.word	0x0000153d

000014ec <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    14ec:	b570      	push	{r4, r5, r6, lr}
    14ee:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    14f0:	4d06      	ldr	r5, [pc, #24]	; (150c <stdio_io_init+0x20>)
    14f2:	682b      	ldr	r3, [r5, #0]
    14f4:	6898      	ldr	r0, [r3, #8]
    14f6:	2100      	movs	r1, #0
    14f8:	4c05      	ldr	r4, [pc, #20]	; (1510 <stdio_io_init+0x24>)
    14fa:	47a0      	blx	r4
	setbuf(stdin, NULL);
    14fc:	682b      	ldr	r3, [r5, #0]
    14fe:	6858      	ldr	r0, [r3, #4]
    1500:	2100      	movs	r1, #0
    1502:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1504:	4b03      	ldr	r3, [pc, #12]	; (1514 <stdio_io_init+0x28>)
    1506:	601e      	str	r6, [r3, #0]
}
    1508:	bd70      	pop	{r4, r5, r6, pc}
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	20000004 	.word	0x20000004
    1510:	0000160d 	.word	0x0000160d
    1514:	200000a8 	.word	0x200000a8

00001518 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1518:	b510      	push	{r4, lr}
    151a:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    151c:	4b05      	ldr	r3, [pc, #20]	; (1534 <stdio_io_read+0x1c>)
    151e:	6818      	ldr	r0, [r3, #0]
    1520:	2800      	cmp	r0, #0
    1522:	d004      	beq.n	152e <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1524:	b28a      	uxth	r2, r1
    1526:	0021      	movs	r1, r4
    1528:	4b03      	ldr	r3, [pc, #12]	; (1538 <stdio_io_read+0x20>)
    152a:	4798      	blx	r3
}
    152c:	bd10      	pop	{r4, pc}
		return 0;
    152e:	2000      	movs	r0, #0
    1530:	e7fc      	b.n	152c <stdio_io_read+0x14>
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	200000a8 	.word	0x200000a8
    1538:	00000791 	.word	0x00000791

0000153c <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    153c:	b510      	push	{r4, lr}
    153e:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1540:	4b05      	ldr	r3, [pc, #20]	; (1558 <stdio_io_write+0x1c>)
    1542:	6818      	ldr	r0, [r3, #0]
    1544:	2800      	cmp	r0, #0
    1546:	d004      	beq.n	1552 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1548:	b28a      	uxth	r2, r1
    154a:	0021      	movs	r1, r4
    154c:	4b03      	ldr	r3, [pc, #12]	; (155c <stdio_io_write+0x20>)
    154e:	4798      	blx	r3
}
    1550:	bd10      	pop	{r4, pc}
		return 0;
    1552:	2000      	movs	r0, #0
    1554:	e7fc      	b.n	1550 <stdio_io_write+0x14>
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	200000a8 	.word	0x200000a8
    155c:	00000759 	.word	0x00000759

00001560 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1560:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    1562:	4c04      	ldr	r4, [pc, #16]	; (1574 <stdio_redirect_init+0x14>)
    1564:	0020      	movs	r0, r4
    1566:	4b04      	ldr	r3, [pc, #16]	; (1578 <stdio_redirect_init+0x18>)
    1568:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    156a:	0020      	movs	r0, r4
    156c:	4b03      	ldr	r3, [pc, #12]	; (157c <stdio_redirect_init+0x1c>)
    156e:	4798      	blx	r3
}
    1570:	bd10      	pop	{r4, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	200000b4 	.word	0x200000b4
    1578:	00000a31 	.word	0x00000a31
    157c:	000014ed 	.word	0x000014ed

00001580 <__libc_init_array>:
    1580:	b570      	push	{r4, r5, r6, lr}
    1582:	2600      	movs	r6, #0
    1584:	4d0c      	ldr	r5, [pc, #48]	; (15b8 <__libc_init_array+0x38>)
    1586:	4c0d      	ldr	r4, [pc, #52]	; (15bc <__libc_init_array+0x3c>)
    1588:	1b64      	subs	r4, r4, r5
    158a:	10a4      	asrs	r4, r4, #2
    158c:	42a6      	cmp	r6, r4
    158e:	d109      	bne.n	15a4 <__libc_init_array+0x24>
    1590:	2600      	movs	r6, #0
    1592:	f001 f93b 	bl	280c <_init>
    1596:	4d0a      	ldr	r5, [pc, #40]	; (15c0 <__libc_init_array+0x40>)
    1598:	4c0a      	ldr	r4, [pc, #40]	; (15c4 <__libc_init_array+0x44>)
    159a:	1b64      	subs	r4, r4, r5
    159c:	10a4      	asrs	r4, r4, #2
    159e:	42a6      	cmp	r6, r4
    15a0:	d105      	bne.n	15ae <__libc_init_array+0x2e>
    15a2:	bd70      	pop	{r4, r5, r6, pc}
    15a4:	00b3      	lsls	r3, r6, #2
    15a6:	58eb      	ldr	r3, [r5, r3]
    15a8:	4798      	blx	r3
    15aa:	3601      	adds	r6, #1
    15ac:	e7ee      	b.n	158c <__libc_init_array+0xc>
    15ae:	00b3      	lsls	r3, r6, #2
    15b0:	58eb      	ldr	r3, [r5, r3]
    15b2:	4798      	blx	r3
    15b4:	3601      	adds	r6, #1
    15b6:	e7f2      	b.n	159e <__libc_init_array+0x1e>
    15b8:	00002818 	.word	0x00002818
    15bc:	00002818 	.word	0x00002818
    15c0:	00002818 	.word	0x00002818
    15c4:	0000281c 	.word	0x0000281c

000015c8 <memset>:
    15c8:	0003      	movs	r3, r0
    15ca:	1882      	adds	r2, r0, r2
    15cc:	4293      	cmp	r3, r2
    15ce:	d100      	bne.n	15d2 <memset+0xa>
    15d0:	4770      	bx	lr
    15d2:	7019      	strb	r1, [r3, #0]
    15d4:	3301      	adds	r3, #1
    15d6:	e7f9      	b.n	15cc <memset+0x4>

000015d8 <iprintf>:
    15d8:	b40f      	push	{r0, r1, r2, r3}
    15da:	4b0b      	ldr	r3, [pc, #44]	; (1608 <iprintf+0x30>)
    15dc:	b513      	push	{r0, r1, r4, lr}
    15de:	681c      	ldr	r4, [r3, #0]
    15e0:	2c00      	cmp	r4, #0
    15e2:	d005      	beq.n	15f0 <iprintf+0x18>
    15e4:	69a3      	ldr	r3, [r4, #24]
    15e6:	2b00      	cmp	r3, #0
    15e8:	d102      	bne.n	15f0 <iprintf+0x18>
    15ea:	0020      	movs	r0, r4
    15ec:	f000 fa88 	bl	1b00 <__sinit>
    15f0:	ab05      	add	r3, sp, #20
    15f2:	9a04      	ldr	r2, [sp, #16]
    15f4:	68a1      	ldr	r1, [r4, #8]
    15f6:	0020      	movs	r0, r4
    15f8:	9301      	str	r3, [sp, #4]
    15fa:	f000 fc5d 	bl	1eb8 <_vfiprintf_r>
    15fe:	bc16      	pop	{r1, r2, r4}
    1600:	bc08      	pop	{r3}
    1602:	b004      	add	sp, #16
    1604:	4718      	bx	r3
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	20000004 	.word	0x20000004

0000160c <setbuf>:
    160c:	424a      	negs	r2, r1
    160e:	414a      	adcs	r2, r1
    1610:	2380      	movs	r3, #128	; 0x80
    1612:	b510      	push	{r4, lr}
    1614:	0052      	lsls	r2, r2, #1
    1616:	00db      	lsls	r3, r3, #3
    1618:	f000 f802 	bl	1620 <setvbuf>
    161c:	bd10      	pop	{r4, pc}
	...

00001620 <setvbuf>:
    1620:	b5f0      	push	{r4, r5, r6, r7, lr}
    1622:	001d      	movs	r5, r3
    1624:	4b4f      	ldr	r3, [pc, #316]	; (1764 <setvbuf+0x144>)
    1626:	b085      	sub	sp, #20
    1628:	681e      	ldr	r6, [r3, #0]
    162a:	0004      	movs	r4, r0
    162c:	000f      	movs	r7, r1
    162e:	9200      	str	r2, [sp, #0]
    1630:	2e00      	cmp	r6, #0
    1632:	d005      	beq.n	1640 <setvbuf+0x20>
    1634:	69b3      	ldr	r3, [r6, #24]
    1636:	2b00      	cmp	r3, #0
    1638:	d102      	bne.n	1640 <setvbuf+0x20>
    163a:	0030      	movs	r0, r6
    163c:	f000 fa60 	bl	1b00 <__sinit>
    1640:	4b49      	ldr	r3, [pc, #292]	; (1768 <setvbuf+0x148>)
    1642:	429c      	cmp	r4, r3
    1644:	d150      	bne.n	16e8 <setvbuf+0xc8>
    1646:	6874      	ldr	r4, [r6, #4]
    1648:	9b00      	ldr	r3, [sp, #0]
    164a:	2b02      	cmp	r3, #2
    164c:	d005      	beq.n	165a <setvbuf+0x3a>
    164e:	2b01      	cmp	r3, #1
    1650:	d900      	bls.n	1654 <setvbuf+0x34>
    1652:	e084      	b.n	175e <setvbuf+0x13e>
    1654:	2d00      	cmp	r5, #0
    1656:	da00      	bge.n	165a <setvbuf+0x3a>
    1658:	e081      	b.n	175e <setvbuf+0x13e>
    165a:	0021      	movs	r1, r4
    165c:	0030      	movs	r0, r6
    165e:	f000 f9e1 	bl	1a24 <_fflush_r>
    1662:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1664:	2900      	cmp	r1, #0
    1666:	d008      	beq.n	167a <setvbuf+0x5a>
    1668:	0023      	movs	r3, r4
    166a:	3344      	adds	r3, #68	; 0x44
    166c:	4299      	cmp	r1, r3
    166e:	d002      	beq.n	1676 <setvbuf+0x56>
    1670:	0030      	movs	r0, r6
    1672:	f000 fb51 	bl	1d18 <_free_r>
    1676:	2300      	movs	r3, #0
    1678:	6363      	str	r3, [r4, #52]	; 0x34
    167a:	2300      	movs	r3, #0
    167c:	61a3      	str	r3, [r4, #24]
    167e:	6063      	str	r3, [r4, #4]
    1680:	89a3      	ldrh	r3, [r4, #12]
    1682:	061b      	lsls	r3, r3, #24
    1684:	d503      	bpl.n	168e <setvbuf+0x6e>
    1686:	6921      	ldr	r1, [r4, #16]
    1688:	0030      	movs	r0, r6
    168a:	f000 fb45 	bl	1d18 <_free_r>
    168e:	89a3      	ldrh	r3, [r4, #12]
    1690:	4a36      	ldr	r2, [pc, #216]	; (176c <setvbuf+0x14c>)
    1692:	4013      	ands	r3, r2
    1694:	81a3      	strh	r3, [r4, #12]
    1696:	9b00      	ldr	r3, [sp, #0]
    1698:	2b02      	cmp	r3, #2
    169a:	d05a      	beq.n	1752 <setvbuf+0x132>
    169c:	ab03      	add	r3, sp, #12
    169e:	aa02      	add	r2, sp, #8
    16a0:	0021      	movs	r1, r4
    16a2:	0030      	movs	r0, r6
    16a4:	f000 fac2 	bl	1c2c <__swhatbuf_r>
    16a8:	89a3      	ldrh	r3, [r4, #12]
    16aa:	4318      	orrs	r0, r3
    16ac:	81a0      	strh	r0, [r4, #12]
    16ae:	2d00      	cmp	r5, #0
    16b0:	d124      	bne.n	16fc <setvbuf+0xdc>
    16b2:	9d02      	ldr	r5, [sp, #8]
    16b4:	0028      	movs	r0, r5
    16b6:	f000 fb25 	bl	1d04 <malloc>
    16ba:	9501      	str	r5, [sp, #4]
    16bc:	1e07      	subs	r7, r0, #0
    16be:	d142      	bne.n	1746 <setvbuf+0x126>
    16c0:	9b02      	ldr	r3, [sp, #8]
    16c2:	9301      	str	r3, [sp, #4]
    16c4:	42ab      	cmp	r3, r5
    16c6:	d139      	bne.n	173c <setvbuf+0x11c>
    16c8:	2001      	movs	r0, #1
    16ca:	4240      	negs	r0, r0
    16cc:	2302      	movs	r3, #2
    16ce:	89a2      	ldrh	r2, [r4, #12]
    16d0:	4313      	orrs	r3, r2
    16d2:	81a3      	strh	r3, [r4, #12]
    16d4:	2300      	movs	r3, #0
    16d6:	60a3      	str	r3, [r4, #8]
    16d8:	0023      	movs	r3, r4
    16da:	3347      	adds	r3, #71	; 0x47
    16dc:	6023      	str	r3, [r4, #0]
    16de:	6123      	str	r3, [r4, #16]
    16e0:	2301      	movs	r3, #1
    16e2:	6163      	str	r3, [r4, #20]
    16e4:	b005      	add	sp, #20
    16e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16e8:	4b21      	ldr	r3, [pc, #132]	; (1770 <setvbuf+0x150>)
    16ea:	429c      	cmp	r4, r3
    16ec:	d101      	bne.n	16f2 <setvbuf+0xd2>
    16ee:	68b4      	ldr	r4, [r6, #8]
    16f0:	e7aa      	b.n	1648 <setvbuf+0x28>
    16f2:	4b20      	ldr	r3, [pc, #128]	; (1774 <setvbuf+0x154>)
    16f4:	429c      	cmp	r4, r3
    16f6:	d1a7      	bne.n	1648 <setvbuf+0x28>
    16f8:	68f4      	ldr	r4, [r6, #12]
    16fa:	e7a5      	b.n	1648 <setvbuf+0x28>
    16fc:	2f00      	cmp	r7, #0
    16fe:	d0d9      	beq.n	16b4 <setvbuf+0x94>
    1700:	69b3      	ldr	r3, [r6, #24]
    1702:	2b00      	cmp	r3, #0
    1704:	d102      	bne.n	170c <setvbuf+0xec>
    1706:	0030      	movs	r0, r6
    1708:	f000 f9fa 	bl	1b00 <__sinit>
    170c:	9b00      	ldr	r3, [sp, #0]
    170e:	2b01      	cmp	r3, #1
    1710:	d103      	bne.n	171a <setvbuf+0xfa>
    1712:	89a3      	ldrh	r3, [r4, #12]
    1714:	9a00      	ldr	r2, [sp, #0]
    1716:	431a      	orrs	r2, r3
    1718:	81a2      	strh	r2, [r4, #12]
    171a:	2008      	movs	r0, #8
    171c:	89a3      	ldrh	r3, [r4, #12]
    171e:	6027      	str	r7, [r4, #0]
    1720:	6127      	str	r7, [r4, #16]
    1722:	6165      	str	r5, [r4, #20]
    1724:	4018      	ands	r0, r3
    1726:	d018      	beq.n	175a <setvbuf+0x13a>
    1728:	2001      	movs	r0, #1
    172a:	4018      	ands	r0, r3
    172c:	2300      	movs	r3, #0
    172e:	4298      	cmp	r0, r3
    1730:	d011      	beq.n	1756 <setvbuf+0x136>
    1732:	426d      	negs	r5, r5
    1734:	60a3      	str	r3, [r4, #8]
    1736:	61a5      	str	r5, [r4, #24]
    1738:	0018      	movs	r0, r3
    173a:	e7d3      	b.n	16e4 <setvbuf+0xc4>
    173c:	9801      	ldr	r0, [sp, #4]
    173e:	f000 fae1 	bl	1d04 <malloc>
    1742:	1e07      	subs	r7, r0, #0
    1744:	d0c0      	beq.n	16c8 <setvbuf+0xa8>
    1746:	2380      	movs	r3, #128	; 0x80
    1748:	89a2      	ldrh	r2, [r4, #12]
    174a:	9d01      	ldr	r5, [sp, #4]
    174c:	4313      	orrs	r3, r2
    174e:	81a3      	strh	r3, [r4, #12]
    1750:	e7d6      	b.n	1700 <setvbuf+0xe0>
    1752:	2000      	movs	r0, #0
    1754:	e7ba      	b.n	16cc <setvbuf+0xac>
    1756:	60a5      	str	r5, [r4, #8]
    1758:	e7c4      	b.n	16e4 <setvbuf+0xc4>
    175a:	60a0      	str	r0, [r4, #8]
    175c:	e7c2      	b.n	16e4 <setvbuf+0xc4>
    175e:	2001      	movs	r0, #1
    1760:	4240      	negs	r0, r0
    1762:	e7bf      	b.n	16e4 <setvbuf+0xc4>
    1764:	20000004 	.word	0x20000004
    1768:	00002798 	.word	0x00002798
    176c:	fffff35c 	.word	0xfffff35c
    1770:	000027b8 	.word	0x000027b8
    1774:	00002778 	.word	0x00002778

00001778 <__swbuf_r>:
    1778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    177a:	0005      	movs	r5, r0
    177c:	000e      	movs	r6, r1
    177e:	0014      	movs	r4, r2
    1780:	2800      	cmp	r0, #0
    1782:	d004      	beq.n	178e <__swbuf_r+0x16>
    1784:	6983      	ldr	r3, [r0, #24]
    1786:	2b00      	cmp	r3, #0
    1788:	d101      	bne.n	178e <__swbuf_r+0x16>
    178a:	f000 f9b9 	bl	1b00 <__sinit>
    178e:	4b22      	ldr	r3, [pc, #136]	; (1818 <__swbuf_r+0xa0>)
    1790:	429c      	cmp	r4, r3
    1792:	d12d      	bne.n	17f0 <__swbuf_r+0x78>
    1794:	686c      	ldr	r4, [r5, #4]
    1796:	69a3      	ldr	r3, [r4, #24]
    1798:	60a3      	str	r3, [r4, #8]
    179a:	89a3      	ldrh	r3, [r4, #12]
    179c:	071b      	lsls	r3, r3, #28
    179e:	d531      	bpl.n	1804 <__swbuf_r+0x8c>
    17a0:	6923      	ldr	r3, [r4, #16]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d02e      	beq.n	1804 <__swbuf_r+0x8c>
    17a6:	6823      	ldr	r3, [r4, #0]
    17a8:	6922      	ldr	r2, [r4, #16]
    17aa:	b2f7      	uxtb	r7, r6
    17ac:	1a98      	subs	r0, r3, r2
    17ae:	6963      	ldr	r3, [r4, #20]
    17b0:	b2f6      	uxtb	r6, r6
    17b2:	4298      	cmp	r0, r3
    17b4:	db05      	blt.n	17c2 <__swbuf_r+0x4a>
    17b6:	0021      	movs	r1, r4
    17b8:	0028      	movs	r0, r5
    17ba:	f000 f933 	bl	1a24 <_fflush_r>
    17be:	2800      	cmp	r0, #0
    17c0:	d126      	bne.n	1810 <__swbuf_r+0x98>
    17c2:	68a3      	ldr	r3, [r4, #8]
    17c4:	3001      	adds	r0, #1
    17c6:	3b01      	subs	r3, #1
    17c8:	60a3      	str	r3, [r4, #8]
    17ca:	6823      	ldr	r3, [r4, #0]
    17cc:	1c5a      	adds	r2, r3, #1
    17ce:	6022      	str	r2, [r4, #0]
    17d0:	701f      	strb	r7, [r3, #0]
    17d2:	6963      	ldr	r3, [r4, #20]
    17d4:	4298      	cmp	r0, r3
    17d6:	d004      	beq.n	17e2 <__swbuf_r+0x6a>
    17d8:	89a3      	ldrh	r3, [r4, #12]
    17da:	07db      	lsls	r3, r3, #31
    17dc:	d51a      	bpl.n	1814 <__swbuf_r+0x9c>
    17de:	2e0a      	cmp	r6, #10
    17e0:	d118      	bne.n	1814 <__swbuf_r+0x9c>
    17e2:	0021      	movs	r1, r4
    17e4:	0028      	movs	r0, r5
    17e6:	f000 f91d 	bl	1a24 <_fflush_r>
    17ea:	2800      	cmp	r0, #0
    17ec:	d012      	beq.n	1814 <__swbuf_r+0x9c>
    17ee:	e00f      	b.n	1810 <__swbuf_r+0x98>
    17f0:	4b0a      	ldr	r3, [pc, #40]	; (181c <__swbuf_r+0xa4>)
    17f2:	429c      	cmp	r4, r3
    17f4:	d101      	bne.n	17fa <__swbuf_r+0x82>
    17f6:	68ac      	ldr	r4, [r5, #8]
    17f8:	e7cd      	b.n	1796 <__swbuf_r+0x1e>
    17fa:	4b09      	ldr	r3, [pc, #36]	; (1820 <__swbuf_r+0xa8>)
    17fc:	429c      	cmp	r4, r3
    17fe:	d1ca      	bne.n	1796 <__swbuf_r+0x1e>
    1800:	68ec      	ldr	r4, [r5, #12]
    1802:	e7c8      	b.n	1796 <__swbuf_r+0x1e>
    1804:	0021      	movs	r1, r4
    1806:	0028      	movs	r0, r5
    1808:	f000 f80c 	bl	1824 <__swsetup_r>
    180c:	2800      	cmp	r0, #0
    180e:	d0ca      	beq.n	17a6 <__swbuf_r+0x2e>
    1810:	2601      	movs	r6, #1
    1812:	4276      	negs	r6, r6
    1814:	0030      	movs	r0, r6
    1816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1818:	00002798 	.word	0x00002798
    181c:	000027b8 	.word	0x000027b8
    1820:	00002778 	.word	0x00002778

00001824 <__swsetup_r>:
    1824:	4b36      	ldr	r3, [pc, #216]	; (1900 <__swsetup_r+0xdc>)
    1826:	b570      	push	{r4, r5, r6, lr}
    1828:	681d      	ldr	r5, [r3, #0]
    182a:	0006      	movs	r6, r0
    182c:	000c      	movs	r4, r1
    182e:	2d00      	cmp	r5, #0
    1830:	d005      	beq.n	183e <__swsetup_r+0x1a>
    1832:	69ab      	ldr	r3, [r5, #24]
    1834:	2b00      	cmp	r3, #0
    1836:	d102      	bne.n	183e <__swsetup_r+0x1a>
    1838:	0028      	movs	r0, r5
    183a:	f000 f961 	bl	1b00 <__sinit>
    183e:	4b31      	ldr	r3, [pc, #196]	; (1904 <__swsetup_r+0xe0>)
    1840:	429c      	cmp	r4, r3
    1842:	d10f      	bne.n	1864 <__swsetup_r+0x40>
    1844:	686c      	ldr	r4, [r5, #4]
    1846:	230c      	movs	r3, #12
    1848:	5ee2      	ldrsh	r2, [r4, r3]
    184a:	b293      	uxth	r3, r2
    184c:	0719      	lsls	r1, r3, #28
    184e:	d42d      	bmi.n	18ac <__swsetup_r+0x88>
    1850:	06d9      	lsls	r1, r3, #27
    1852:	d411      	bmi.n	1878 <__swsetup_r+0x54>
    1854:	2309      	movs	r3, #9
    1856:	2001      	movs	r0, #1
    1858:	6033      	str	r3, [r6, #0]
    185a:	3337      	adds	r3, #55	; 0x37
    185c:	4313      	orrs	r3, r2
    185e:	81a3      	strh	r3, [r4, #12]
    1860:	4240      	negs	r0, r0
    1862:	bd70      	pop	{r4, r5, r6, pc}
    1864:	4b28      	ldr	r3, [pc, #160]	; (1908 <__swsetup_r+0xe4>)
    1866:	429c      	cmp	r4, r3
    1868:	d101      	bne.n	186e <__swsetup_r+0x4a>
    186a:	68ac      	ldr	r4, [r5, #8]
    186c:	e7eb      	b.n	1846 <__swsetup_r+0x22>
    186e:	4b27      	ldr	r3, [pc, #156]	; (190c <__swsetup_r+0xe8>)
    1870:	429c      	cmp	r4, r3
    1872:	d1e8      	bne.n	1846 <__swsetup_r+0x22>
    1874:	68ec      	ldr	r4, [r5, #12]
    1876:	e7e6      	b.n	1846 <__swsetup_r+0x22>
    1878:	075b      	lsls	r3, r3, #29
    187a:	d513      	bpl.n	18a4 <__swsetup_r+0x80>
    187c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    187e:	2900      	cmp	r1, #0
    1880:	d008      	beq.n	1894 <__swsetup_r+0x70>
    1882:	0023      	movs	r3, r4
    1884:	3344      	adds	r3, #68	; 0x44
    1886:	4299      	cmp	r1, r3
    1888:	d002      	beq.n	1890 <__swsetup_r+0x6c>
    188a:	0030      	movs	r0, r6
    188c:	f000 fa44 	bl	1d18 <_free_r>
    1890:	2300      	movs	r3, #0
    1892:	6363      	str	r3, [r4, #52]	; 0x34
    1894:	2224      	movs	r2, #36	; 0x24
    1896:	89a3      	ldrh	r3, [r4, #12]
    1898:	4393      	bics	r3, r2
    189a:	81a3      	strh	r3, [r4, #12]
    189c:	2300      	movs	r3, #0
    189e:	6063      	str	r3, [r4, #4]
    18a0:	6923      	ldr	r3, [r4, #16]
    18a2:	6023      	str	r3, [r4, #0]
    18a4:	2308      	movs	r3, #8
    18a6:	89a2      	ldrh	r2, [r4, #12]
    18a8:	4313      	orrs	r3, r2
    18aa:	81a3      	strh	r3, [r4, #12]
    18ac:	6923      	ldr	r3, [r4, #16]
    18ae:	2b00      	cmp	r3, #0
    18b0:	d10b      	bne.n	18ca <__swsetup_r+0xa6>
    18b2:	21a0      	movs	r1, #160	; 0xa0
    18b4:	2280      	movs	r2, #128	; 0x80
    18b6:	89a3      	ldrh	r3, [r4, #12]
    18b8:	0089      	lsls	r1, r1, #2
    18ba:	0092      	lsls	r2, r2, #2
    18bc:	400b      	ands	r3, r1
    18be:	4293      	cmp	r3, r2
    18c0:	d003      	beq.n	18ca <__swsetup_r+0xa6>
    18c2:	0021      	movs	r1, r4
    18c4:	0030      	movs	r0, r6
    18c6:	f000 f9d9 	bl	1c7c <__smakebuf_r>
    18ca:	2301      	movs	r3, #1
    18cc:	89a2      	ldrh	r2, [r4, #12]
    18ce:	4013      	ands	r3, r2
    18d0:	d011      	beq.n	18f6 <__swsetup_r+0xd2>
    18d2:	2300      	movs	r3, #0
    18d4:	60a3      	str	r3, [r4, #8]
    18d6:	6963      	ldr	r3, [r4, #20]
    18d8:	425b      	negs	r3, r3
    18da:	61a3      	str	r3, [r4, #24]
    18dc:	2000      	movs	r0, #0
    18de:	6923      	ldr	r3, [r4, #16]
    18e0:	4283      	cmp	r3, r0
    18e2:	d1be      	bne.n	1862 <__swsetup_r+0x3e>
    18e4:	230c      	movs	r3, #12
    18e6:	5ee2      	ldrsh	r2, [r4, r3]
    18e8:	0613      	lsls	r3, r2, #24
    18ea:	d5ba      	bpl.n	1862 <__swsetup_r+0x3e>
    18ec:	2340      	movs	r3, #64	; 0x40
    18ee:	4313      	orrs	r3, r2
    18f0:	81a3      	strh	r3, [r4, #12]
    18f2:	3801      	subs	r0, #1
    18f4:	e7b5      	b.n	1862 <__swsetup_r+0x3e>
    18f6:	0792      	lsls	r2, r2, #30
    18f8:	d400      	bmi.n	18fc <__swsetup_r+0xd8>
    18fa:	6963      	ldr	r3, [r4, #20]
    18fc:	60a3      	str	r3, [r4, #8]
    18fe:	e7ed      	b.n	18dc <__swsetup_r+0xb8>
    1900:	20000004 	.word	0x20000004
    1904:	00002798 	.word	0x00002798
    1908:	000027b8 	.word	0x000027b8
    190c:	00002778 	.word	0x00002778

00001910 <__sflush_r>:
    1910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1912:	898a      	ldrh	r2, [r1, #12]
    1914:	0005      	movs	r5, r0
    1916:	000c      	movs	r4, r1
    1918:	0713      	lsls	r3, r2, #28
    191a:	d460      	bmi.n	19de <__sflush_r+0xce>
    191c:	684b      	ldr	r3, [r1, #4]
    191e:	2b00      	cmp	r3, #0
    1920:	dc04      	bgt.n	192c <__sflush_r+0x1c>
    1922:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1924:	2b00      	cmp	r3, #0
    1926:	dc01      	bgt.n	192c <__sflush_r+0x1c>
    1928:	2000      	movs	r0, #0
    192a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    192c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    192e:	2f00      	cmp	r7, #0
    1930:	d0fa      	beq.n	1928 <__sflush_r+0x18>
    1932:	2300      	movs	r3, #0
    1934:	682e      	ldr	r6, [r5, #0]
    1936:	602b      	str	r3, [r5, #0]
    1938:	2380      	movs	r3, #128	; 0x80
    193a:	015b      	lsls	r3, r3, #5
    193c:	401a      	ands	r2, r3
    193e:	d034      	beq.n	19aa <__sflush_r+0x9a>
    1940:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1942:	89a3      	ldrh	r3, [r4, #12]
    1944:	075b      	lsls	r3, r3, #29
    1946:	d506      	bpl.n	1956 <__sflush_r+0x46>
    1948:	6863      	ldr	r3, [r4, #4]
    194a:	1ac0      	subs	r0, r0, r3
    194c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    194e:	2b00      	cmp	r3, #0
    1950:	d001      	beq.n	1956 <__sflush_r+0x46>
    1952:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1954:	1ac0      	subs	r0, r0, r3
    1956:	0002      	movs	r2, r0
    1958:	6a21      	ldr	r1, [r4, #32]
    195a:	2300      	movs	r3, #0
    195c:	0028      	movs	r0, r5
    195e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1960:	47b8      	blx	r7
    1962:	89a1      	ldrh	r1, [r4, #12]
    1964:	1c43      	adds	r3, r0, #1
    1966:	d106      	bne.n	1976 <__sflush_r+0x66>
    1968:	682b      	ldr	r3, [r5, #0]
    196a:	2b1d      	cmp	r3, #29
    196c:	d831      	bhi.n	19d2 <__sflush_r+0xc2>
    196e:	4a2c      	ldr	r2, [pc, #176]	; (1a20 <__sflush_r+0x110>)
    1970:	40da      	lsrs	r2, r3
    1972:	07d3      	lsls	r3, r2, #31
    1974:	d52d      	bpl.n	19d2 <__sflush_r+0xc2>
    1976:	2300      	movs	r3, #0
    1978:	6063      	str	r3, [r4, #4]
    197a:	6923      	ldr	r3, [r4, #16]
    197c:	6023      	str	r3, [r4, #0]
    197e:	04cb      	lsls	r3, r1, #19
    1980:	d505      	bpl.n	198e <__sflush_r+0x7e>
    1982:	1c43      	adds	r3, r0, #1
    1984:	d102      	bne.n	198c <__sflush_r+0x7c>
    1986:	682b      	ldr	r3, [r5, #0]
    1988:	2b00      	cmp	r3, #0
    198a:	d100      	bne.n	198e <__sflush_r+0x7e>
    198c:	6560      	str	r0, [r4, #84]	; 0x54
    198e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1990:	602e      	str	r6, [r5, #0]
    1992:	2900      	cmp	r1, #0
    1994:	d0c8      	beq.n	1928 <__sflush_r+0x18>
    1996:	0023      	movs	r3, r4
    1998:	3344      	adds	r3, #68	; 0x44
    199a:	4299      	cmp	r1, r3
    199c:	d002      	beq.n	19a4 <__sflush_r+0x94>
    199e:	0028      	movs	r0, r5
    19a0:	f000 f9ba 	bl	1d18 <_free_r>
    19a4:	2000      	movs	r0, #0
    19a6:	6360      	str	r0, [r4, #52]	; 0x34
    19a8:	e7bf      	b.n	192a <__sflush_r+0x1a>
    19aa:	2301      	movs	r3, #1
    19ac:	6a21      	ldr	r1, [r4, #32]
    19ae:	0028      	movs	r0, r5
    19b0:	47b8      	blx	r7
    19b2:	1c43      	adds	r3, r0, #1
    19b4:	d1c5      	bne.n	1942 <__sflush_r+0x32>
    19b6:	682b      	ldr	r3, [r5, #0]
    19b8:	2b00      	cmp	r3, #0
    19ba:	d0c2      	beq.n	1942 <__sflush_r+0x32>
    19bc:	2b1d      	cmp	r3, #29
    19be:	d001      	beq.n	19c4 <__sflush_r+0xb4>
    19c0:	2b16      	cmp	r3, #22
    19c2:	d101      	bne.n	19c8 <__sflush_r+0xb8>
    19c4:	602e      	str	r6, [r5, #0]
    19c6:	e7af      	b.n	1928 <__sflush_r+0x18>
    19c8:	2340      	movs	r3, #64	; 0x40
    19ca:	89a2      	ldrh	r2, [r4, #12]
    19cc:	4313      	orrs	r3, r2
    19ce:	81a3      	strh	r3, [r4, #12]
    19d0:	e7ab      	b.n	192a <__sflush_r+0x1a>
    19d2:	2340      	movs	r3, #64	; 0x40
    19d4:	430b      	orrs	r3, r1
    19d6:	2001      	movs	r0, #1
    19d8:	81a3      	strh	r3, [r4, #12]
    19da:	4240      	negs	r0, r0
    19dc:	e7a5      	b.n	192a <__sflush_r+0x1a>
    19de:	690f      	ldr	r7, [r1, #16]
    19e0:	2f00      	cmp	r7, #0
    19e2:	d0a1      	beq.n	1928 <__sflush_r+0x18>
    19e4:	680b      	ldr	r3, [r1, #0]
    19e6:	600f      	str	r7, [r1, #0]
    19e8:	1bdb      	subs	r3, r3, r7
    19ea:	9301      	str	r3, [sp, #4]
    19ec:	2300      	movs	r3, #0
    19ee:	0792      	lsls	r2, r2, #30
    19f0:	d100      	bne.n	19f4 <__sflush_r+0xe4>
    19f2:	694b      	ldr	r3, [r1, #20]
    19f4:	60a3      	str	r3, [r4, #8]
    19f6:	9b01      	ldr	r3, [sp, #4]
    19f8:	2b00      	cmp	r3, #0
    19fa:	dc00      	bgt.n	19fe <__sflush_r+0xee>
    19fc:	e794      	b.n	1928 <__sflush_r+0x18>
    19fe:	9b01      	ldr	r3, [sp, #4]
    1a00:	003a      	movs	r2, r7
    1a02:	6a21      	ldr	r1, [r4, #32]
    1a04:	0028      	movs	r0, r5
    1a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1a08:	47b0      	blx	r6
    1a0a:	2800      	cmp	r0, #0
    1a0c:	dc03      	bgt.n	1a16 <__sflush_r+0x106>
    1a0e:	2340      	movs	r3, #64	; 0x40
    1a10:	89a2      	ldrh	r2, [r4, #12]
    1a12:	4313      	orrs	r3, r2
    1a14:	e7df      	b.n	19d6 <__sflush_r+0xc6>
    1a16:	9b01      	ldr	r3, [sp, #4]
    1a18:	183f      	adds	r7, r7, r0
    1a1a:	1a1b      	subs	r3, r3, r0
    1a1c:	9301      	str	r3, [sp, #4]
    1a1e:	e7ea      	b.n	19f6 <__sflush_r+0xe6>
    1a20:	20400001 	.word	0x20400001

00001a24 <_fflush_r>:
    1a24:	690b      	ldr	r3, [r1, #16]
    1a26:	b570      	push	{r4, r5, r6, lr}
    1a28:	0005      	movs	r5, r0
    1a2a:	000c      	movs	r4, r1
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d101      	bne.n	1a34 <_fflush_r+0x10>
    1a30:	2000      	movs	r0, #0
    1a32:	bd70      	pop	{r4, r5, r6, pc}
    1a34:	2800      	cmp	r0, #0
    1a36:	d004      	beq.n	1a42 <_fflush_r+0x1e>
    1a38:	6983      	ldr	r3, [r0, #24]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d101      	bne.n	1a42 <_fflush_r+0x1e>
    1a3e:	f000 f85f 	bl	1b00 <__sinit>
    1a42:	4b0b      	ldr	r3, [pc, #44]	; (1a70 <_fflush_r+0x4c>)
    1a44:	429c      	cmp	r4, r3
    1a46:	d109      	bne.n	1a5c <_fflush_r+0x38>
    1a48:	686c      	ldr	r4, [r5, #4]
    1a4a:	220c      	movs	r2, #12
    1a4c:	5ea3      	ldrsh	r3, [r4, r2]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d0ee      	beq.n	1a30 <_fflush_r+0xc>
    1a52:	0021      	movs	r1, r4
    1a54:	0028      	movs	r0, r5
    1a56:	f7ff ff5b 	bl	1910 <__sflush_r>
    1a5a:	e7ea      	b.n	1a32 <_fflush_r+0xe>
    1a5c:	4b05      	ldr	r3, [pc, #20]	; (1a74 <_fflush_r+0x50>)
    1a5e:	429c      	cmp	r4, r3
    1a60:	d101      	bne.n	1a66 <_fflush_r+0x42>
    1a62:	68ac      	ldr	r4, [r5, #8]
    1a64:	e7f1      	b.n	1a4a <_fflush_r+0x26>
    1a66:	4b04      	ldr	r3, [pc, #16]	; (1a78 <_fflush_r+0x54>)
    1a68:	429c      	cmp	r4, r3
    1a6a:	d1ee      	bne.n	1a4a <_fflush_r+0x26>
    1a6c:	68ec      	ldr	r4, [r5, #12]
    1a6e:	e7ec      	b.n	1a4a <_fflush_r+0x26>
    1a70:	00002798 	.word	0x00002798
    1a74:	000027b8 	.word	0x000027b8
    1a78:	00002778 	.word	0x00002778

00001a7c <_cleanup_r>:
    1a7c:	b510      	push	{r4, lr}
    1a7e:	4902      	ldr	r1, [pc, #8]	; (1a88 <_cleanup_r+0xc>)
    1a80:	f000 f8b2 	bl	1be8 <_fwalk_reent>
    1a84:	bd10      	pop	{r4, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	00001a25 	.word	0x00001a25

00001a8c <std.isra.0>:
    1a8c:	2300      	movs	r3, #0
    1a8e:	b510      	push	{r4, lr}
    1a90:	0004      	movs	r4, r0
    1a92:	6003      	str	r3, [r0, #0]
    1a94:	6043      	str	r3, [r0, #4]
    1a96:	6083      	str	r3, [r0, #8]
    1a98:	8181      	strh	r1, [r0, #12]
    1a9a:	6643      	str	r3, [r0, #100]	; 0x64
    1a9c:	81c2      	strh	r2, [r0, #14]
    1a9e:	6103      	str	r3, [r0, #16]
    1aa0:	6143      	str	r3, [r0, #20]
    1aa2:	6183      	str	r3, [r0, #24]
    1aa4:	0019      	movs	r1, r3
    1aa6:	2208      	movs	r2, #8
    1aa8:	305c      	adds	r0, #92	; 0x5c
    1aaa:	f7ff fd8d 	bl	15c8 <memset>
    1aae:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <std.isra.0+0x38>)
    1ab0:	6224      	str	r4, [r4, #32]
    1ab2:	6263      	str	r3, [r4, #36]	; 0x24
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <std.isra.0+0x3c>)
    1ab6:	62a3      	str	r3, [r4, #40]	; 0x28
    1ab8:	4b04      	ldr	r3, [pc, #16]	; (1acc <std.isra.0+0x40>)
    1aba:	62e3      	str	r3, [r4, #44]	; 0x2c
    1abc:	4b04      	ldr	r3, [pc, #16]	; (1ad0 <std.isra.0+0x44>)
    1abe:	6323      	str	r3, [r4, #48]	; 0x30
    1ac0:	bd10      	pop	{r4, pc}
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	00002425 	.word	0x00002425
    1ac8:	0000244d 	.word	0x0000244d
    1acc:	00002485 	.word	0x00002485
    1ad0:	000024b1 	.word	0x000024b1

00001ad4 <__sfmoreglue>:
    1ad4:	b570      	push	{r4, r5, r6, lr}
    1ad6:	2568      	movs	r5, #104	; 0x68
    1ad8:	1e4a      	subs	r2, r1, #1
    1ada:	4355      	muls	r5, r2
    1adc:	000e      	movs	r6, r1
    1ade:	0029      	movs	r1, r5
    1ae0:	3174      	adds	r1, #116	; 0x74
    1ae2:	f000 f963 	bl	1dac <_malloc_r>
    1ae6:	1e04      	subs	r4, r0, #0
    1ae8:	d008      	beq.n	1afc <__sfmoreglue+0x28>
    1aea:	2100      	movs	r1, #0
    1aec:	002a      	movs	r2, r5
    1aee:	6001      	str	r1, [r0, #0]
    1af0:	6046      	str	r6, [r0, #4]
    1af2:	300c      	adds	r0, #12
    1af4:	60a0      	str	r0, [r4, #8]
    1af6:	3268      	adds	r2, #104	; 0x68
    1af8:	f7ff fd66 	bl	15c8 <memset>
    1afc:	0020      	movs	r0, r4
    1afe:	bd70      	pop	{r4, r5, r6, pc}

00001b00 <__sinit>:
    1b00:	6983      	ldr	r3, [r0, #24]
    1b02:	b513      	push	{r0, r1, r4, lr}
    1b04:	0004      	movs	r4, r0
    1b06:	2b00      	cmp	r3, #0
    1b08:	d128      	bne.n	1b5c <__sinit+0x5c>
    1b0a:	6483      	str	r3, [r0, #72]	; 0x48
    1b0c:	64c3      	str	r3, [r0, #76]	; 0x4c
    1b0e:	6503      	str	r3, [r0, #80]	; 0x50
    1b10:	4b13      	ldr	r3, [pc, #76]	; (1b60 <__sinit+0x60>)
    1b12:	4a14      	ldr	r2, [pc, #80]	; (1b64 <__sinit+0x64>)
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	6282      	str	r2, [r0, #40]	; 0x28
    1b18:	9301      	str	r3, [sp, #4]
    1b1a:	4298      	cmp	r0, r3
    1b1c:	d101      	bne.n	1b22 <__sinit+0x22>
    1b1e:	2301      	movs	r3, #1
    1b20:	6183      	str	r3, [r0, #24]
    1b22:	0020      	movs	r0, r4
    1b24:	f000 f820 	bl	1b68 <__sfp>
    1b28:	6060      	str	r0, [r4, #4]
    1b2a:	0020      	movs	r0, r4
    1b2c:	f000 f81c 	bl	1b68 <__sfp>
    1b30:	60a0      	str	r0, [r4, #8]
    1b32:	0020      	movs	r0, r4
    1b34:	f000 f818 	bl	1b68 <__sfp>
    1b38:	2200      	movs	r2, #0
    1b3a:	60e0      	str	r0, [r4, #12]
    1b3c:	2104      	movs	r1, #4
    1b3e:	6860      	ldr	r0, [r4, #4]
    1b40:	f7ff ffa4 	bl	1a8c <std.isra.0>
    1b44:	2201      	movs	r2, #1
    1b46:	2109      	movs	r1, #9
    1b48:	68a0      	ldr	r0, [r4, #8]
    1b4a:	f7ff ff9f 	bl	1a8c <std.isra.0>
    1b4e:	2202      	movs	r2, #2
    1b50:	2112      	movs	r1, #18
    1b52:	68e0      	ldr	r0, [r4, #12]
    1b54:	f7ff ff9a 	bl	1a8c <std.isra.0>
    1b58:	2301      	movs	r3, #1
    1b5a:	61a3      	str	r3, [r4, #24]
    1b5c:	bd13      	pop	{r0, r1, r4, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	00002774 	.word	0x00002774
    1b64:	00001a7d 	.word	0x00001a7d

00001b68 <__sfp>:
    1b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b6a:	4b1e      	ldr	r3, [pc, #120]	; (1be4 <__sfp+0x7c>)
    1b6c:	0007      	movs	r7, r0
    1b6e:	681e      	ldr	r6, [r3, #0]
    1b70:	69b3      	ldr	r3, [r6, #24]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d102      	bne.n	1b7c <__sfp+0x14>
    1b76:	0030      	movs	r0, r6
    1b78:	f7ff ffc2 	bl	1b00 <__sinit>
    1b7c:	3648      	adds	r6, #72	; 0x48
    1b7e:	68b4      	ldr	r4, [r6, #8]
    1b80:	6873      	ldr	r3, [r6, #4]
    1b82:	3b01      	subs	r3, #1
    1b84:	d504      	bpl.n	1b90 <__sfp+0x28>
    1b86:	6833      	ldr	r3, [r6, #0]
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d007      	beq.n	1b9c <__sfp+0x34>
    1b8c:	6836      	ldr	r6, [r6, #0]
    1b8e:	e7f6      	b.n	1b7e <__sfp+0x16>
    1b90:	220c      	movs	r2, #12
    1b92:	5ea5      	ldrsh	r5, [r4, r2]
    1b94:	2d00      	cmp	r5, #0
    1b96:	d00d      	beq.n	1bb4 <__sfp+0x4c>
    1b98:	3468      	adds	r4, #104	; 0x68
    1b9a:	e7f2      	b.n	1b82 <__sfp+0x1a>
    1b9c:	2104      	movs	r1, #4
    1b9e:	0038      	movs	r0, r7
    1ba0:	f7ff ff98 	bl	1ad4 <__sfmoreglue>
    1ba4:	6030      	str	r0, [r6, #0]
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d1f0      	bne.n	1b8c <__sfp+0x24>
    1baa:	230c      	movs	r3, #12
    1bac:	0004      	movs	r4, r0
    1bae:	603b      	str	r3, [r7, #0]
    1bb0:	0020      	movs	r0, r4
    1bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb4:	2301      	movs	r3, #1
    1bb6:	0020      	movs	r0, r4
    1bb8:	425b      	negs	r3, r3
    1bba:	81e3      	strh	r3, [r4, #14]
    1bbc:	3302      	adds	r3, #2
    1bbe:	81a3      	strh	r3, [r4, #12]
    1bc0:	6665      	str	r5, [r4, #100]	; 0x64
    1bc2:	6025      	str	r5, [r4, #0]
    1bc4:	60a5      	str	r5, [r4, #8]
    1bc6:	6065      	str	r5, [r4, #4]
    1bc8:	6125      	str	r5, [r4, #16]
    1bca:	6165      	str	r5, [r4, #20]
    1bcc:	61a5      	str	r5, [r4, #24]
    1bce:	2208      	movs	r2, #8
    1bd0:	0029      	movs	r1, r5
    1bd2:	305c      	adds	r0, #92	; 0x5c
    1bd4:	f7ff fcf8 	bl	15c8 <memset>
    1bd8:	6365      	str	r5, [r4, #52]	; 0x34
    1bda:	63a5      	str	r5, [r4, #56]	; 0x38
    1bdc:	64a5      	str	r5, [r4, #72]	; 0x48
    1bde:	64e5      	str	r5, [r4, #76]	; 0x4c
    1be0:	e7e6      	b.n	1bb0 <__sfp+0x48>
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	00002774 	.word	0x00002774

00001be8 <_fwalk_reent>:
    1be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1bea:	0004      	movs	r4, r0
    1bec:	0007      	movs	r7, r0
    1bee:	2600      	movs	r6, #0
    1bf0:	9101      	str	r1, [sp, #4]
    1bf2:	3448      	adds	r4, #72	; 0x48
    1bf4:	2c00      	cmp	r4, #0
    1bf6:	d101      	bne.n	1bfc <_fwalk_reent+0x14>
    1bf8:	0030      	movs	r0, r6
    1bfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bfc:	6863      	ldr	r3, [r4, #4]
    1bfe:	68a5      	ldr	r5, [r4, #8]
    1c00:	9300      	str	r3, [sp, #0]
    1c02:	9b00      	ldr	r3, [sp, #0]
    1c04:	3b01      	subs	r3, #1
    1c06:	9300      	str	r3, [sp, #0]
    1c08:	d501      	bpl.n	1c0e <_fwalk_reent+0x26>
    1c0a:	6824      	ldr	r4, [r4, #0]
    1c0c:	e7f2      	b.n	1bf4 <_fwalk_reent+0xc>
    1c0e:	89ab      	ldrh	r3, [r5, #12]
    1c10:	2b01      	cmp	r3, #1
    1c12:	d908      	bls.n	1c26 <_fwalk_reent+0x3e>
    1c14:	220e      	movs	r2, #14
    1c16:	5eab      	ldrsh	r3, [r5, r2]
    1c18:	3301      	adds	r3, #1
    1c1a:	d004      	beq.n	1c26 <_fwalk_reent+0x3e>
    1c1c:	0029      	movs	r1, r5
    1c1e:	0038      	movs	r0, r7
    1c20:	9b01      	ldr	r3, [sp, #4]
    1c22:	4798      	blx	r3
    1c24:	4306      	orrs	r6, r0
    1c26:	3568      	adds	r5, #104	; 0x68
    1c28:	e7eb      	b.n	1c02 <_fwalk_reent+0x1a>
	...

00001c2c <__swhatbuf_r>:
    1c2c:	b570      	push	{r4, r5, r6, lr}
    1c2e:	000e      	movs	r6, r1
    1c30:	001d      	movs	r5, r3
    1c32:	230e      	movs	r3, #14
    1c34:	5ec9      	ldrsh	r1, [r1, r3]
    1c36:	b090      	sub	sp, #64	; 0x40
    1c38:	0014      	movs	r4, r2
    1c3a:	2900      	cmp	r1, #0
    1c3c:	da07      	bge.n	1c4e <__swhatbuf_r+0x22>
    1c3e:	2300      	movs	r3, #0
    1c40:	602b      	str	r3, [r5, #0]
    1c42:	89b3      	ldrh	r3, [r6, #12]
    1c44:	061b      	lsls	r3, r3, #24
    1c46:	d411      	bmi.n	1c6c <__swhatbuf_r+0x40>
    1c48:	2380      	movs	r3, #128	; 0x80
    1c4a:	00db      	lsls	r3, r3, #3
    1c4c:	e00f      	b.n	1c6e <__swhatbuf_r+0x42>
    1c4e:	aa01      	add	r2, sp, #4
    1c50:	f000 fc5a 	bl	2508 <_fstat_r>
    1c54:	2800      	cmp	r0, #0
    1c56:	dbf2      	blt.n	1c3e <__swhatbuf_r+0x12>
    1c58:	22f0      	movs	r2, #240	; 0xf0
    1c5a:	9b02      	ldr	r3, [sp, #8]
    1c5c:	0212      	lsls	r2, r2, #8
    1c5e:	4013      	ands	r3, r2
    1c60:	4a05      	ldr	r2, [pc, #20]	; (1c78 <__swhatbuf_r+0x4c>)
    1c62:	189b      	adds	r3, r3, r2
    1c64:	425a      	negs	r2, r3
    1c66:	4153      	adcs	r3, r2
    1c68:	602b      	str	r3, [r5, #0]
    1c6a:	e7ed      	b.n	1c48 <__swhatbuf_r+0x1c>
    1c6c:	2340      	movs	r3, #64	; 0x40
    1c6e:	2000      	movs	r0, #0
    1c70:	6023      	str	r3, [r4, #0]
    1c72:	b010      	add	sp, #64	; 0x40
    1c74:	bd70      	pop	{r4, r5, r6, pc}
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	ffffe000 	.word	0xffffe000

00001c7c <__smakebuf_r>:
    1c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c7e:	2602      	movs	r6, #2
    1c80:	898b      	ldrh	r3, [r1, #12]
    1c82:	0005      	movs	r5, r0
    1c84:	000c      	movs	r4, r1
    1c86:	4233      	tst	r3, r6
    1c88:	d006      	beq.n	1c98 <__smakebuf_r+0x1c>
    1c8a:	0023      	movs	r3, r4
    1c8c:	3347      	adds	r3, #71	; 0x47
    1c8e:	6023      	str	r3, [r4, #0]
    1c90:	6123      	str	r3, [r4, #16]
    1c92:	2301      	movs	r3, #1
    1c94:	6163      	str	r3, [r4, #20]
    1c96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1c98:	ab01      	add	r3, sp, #4
    1c9a:	466a      	mov	r2, sp
    1c9c:	f7ff ffc6 	bl	1c2c <__swhatbuf_r>
    1ca0:	9900      	ldr	r1, [sp, #0]
    1ca2:	0007      	movs	r7, r0
    1ca4:	0028      	movs	r0, r5
    1ca6:	f000 f881 	bl	1dac <_malloc_r>
    1caa:	2800      	cmp	r0, #0
    1cac:	d108      	bne.n	1cc0 <__smakebuf_r+0x44>
    1cae:	220c      	movs	r2, #12
    1cb0:	5ea3      	ldrsh	r3, [r4, r2]
    1cb2:	059a      	lsls	r2, r3, #22
    1cb4:	d4ef      	bmi.n	1c96 <__smakebuf_r+0x1a>
    1cb6:	2203      	movs	r2, #3
    1cb8:	4393      	bics	r3, r2
    1cba:	431e      	orrs	r6, r3
    1cbc:	81a6      	strh	r6, [r4, #12]
    1cbe:	e7e4      	b.n	1c8a <__smakebuf_r+0xe>
    1cc0:	4b0f      	ldr	r3, [pc, #60]	; (1d00 <__smakebuf_r+0x84>)
    1cc2:	62ab      	str	r3, [r5, #40]	; 0x28
    1cc4:	2380      	movs	r3, #128	; 0x80
    1cc6:	89a2      	ldrh	r2, [r4, #12]
    1cc8:	6020      	str	r0, [r4, #0]
    1cca:	4313      	orrs	r3, r2
    1ccc:	81a3      	strh	r3, [r4, #12]
    1cce:	9b00      	ldr	r3, [sp, #0]
    1cd0:	6120      	str	r0, [r4, #16]
    1cd2:	6163      	str	r3, [r4, #20]
    1cd4:	9b01      	ldr	r3, [sp, #4]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d00d      	beq.n	1cf6 <__smakebuf_r+0x7a>
    1cda:	230e      	movs	r3, #14
    1cdc:	5ee1      	ldrsh	r1, [r4, r3]
    1cde:	0028      	movs	r0, r5
    1ce0:	f000 fc24 	bl	252c <_isatty_r>
    1ce4:	2800      	cmp	r0, #0
    1ce6:	d006      	beq.n	1cf6 <__smakebuf_r+0x7a>
    1ce8:	2203      	movs	r2, #3
    1cea:	89a3      	ldrh	r3, [r4, #12]
    1cec:	4393      	bics	r3, r2
    1cee:	001a      	movs	r2, r3
    1cf0:	2301      	movs	r3, #1
    1cf2:	4313      	orrs	r3, r2
    1cf4:	81a3      	strh	r3, [r4, #12]
    1cf6:	89a0      	ldrh	r0, [r4, #12]
    1cf8:	4338      	orrs	r0, r7
    1cfa:	81a0      	strh	r0, [r4, #12]
    1cfc:	e7cb      	b.n	1c96 <__smakebuf_r+0x1a>
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	00001a7d 	.word	0x00001a7d

00001d04 <malloc>:
    1d04:	b510      	push	{r4, lr}
    1d06:	4b03      	ldr	r3, [pc, #12]	; (1d14 <malloc+0x10>)
    1d08:	0001      	movs	r1, r0
    1d0a:	6818      	ldr	r0, [r3, #0]
    1d0c:	f000 f84e 	bl	1dac <_malloc_r>
    1d10:	bd10      	pop	{r4, pc}
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	20000004 	.word	0x20000004

00001d18 <_free_r>:
    1d18:	b570      	push	{r4, r5, r6, lr}
    1d1a:	0005      	movs	r5, r0
    1d1c:	2900      	cmp	r1, #0
    1d1e:	d010      	beq.n	1d42 <_free_r+0x2a>
    1d20:	1f0c      	subs	r4, r1, #4
    1d22:	6823      	ldr	r3, [r4, #0]
    1d24:	2b00      	cmp	r3, #0
    1d26:	da00      	bge.n	1d2a <_free_r+0x12>
    1d28:	18e4      	adds	r4, r4, r3
    1d2a:	0028      	movs	r0, r5
    1d2c:	f000 fc2f 	bl	258e <__malloc_lock>
    1d30:	4a1d      	ldr	r2, [pc, #116]	; (1da8 <_free_r+0x90>)
    1d32:	6813      	ldr	r3, [r2, #0]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d105      	bne.n	1d44 <_free_r+0x2c>
    1d38:	6063      	str	r3, [r4, #4]
    1d3a:	6014      	str	r4, [r2, #0]
    1d3c:	0028      	movs	r0, r5
    1d3e:	f000 fc27 	bl	2590 <__malloc_unlock>
    1d42:	bd70      	pop	{r4, r5, r6, pc}
    1d44:	42a3      	cmp	r3, r4
    1d46:	d909      	bls.n	1d5c <_free_r+0x44>
    1d48:	6821      	ldr	r1, [r4, #0]
    1d4a:	1860      	adds	r0, r4, r1
    1d4c:	4283      	cmp	r3, r0
    1d4e:	d1f3      	bne.n	1d38 <_free_r+0x20>
    1d50:	6818      	ldr	r0, [r3, #0]
    1d52:	685b      	ldr	r3, [r3, #4]
    1d54:	1841      	adds	r1, r0, r1
    1d56:	6021      	str	r1, [r4, #0]
    1d58:	e7ee      	b.n	1d38 <_free_r+0x20>
    1d5a:	0013      	movs	r3, r2
    1d5c:	685a      	ldr	r2, [r3, #4]
    1d5e:	2a00      	cmp	r2, #0
    1d60:	d001      	beq.n	1d66 <_free_r+0x4e>
    1d62:	42a2      	cmp	r2, r4
    1d64:	d9f9      	bls.n	1d5a <_free_r+0x42>
    1d66:	6819      	ldr	r1, [r3, #0]
    1d68:	1858      	adds	r0, r3, r1
    1d6a:	42a0      	cmp	r0, r4
    1d6c:	d10b      	bne.n	1d86 <_free_r+0x6e>
    1d6e:	6820      	ldr	r0, [r4, #0]
    1d70:	1809      	adds	r1, r1, r0
    1d72:	1858      	adds	r0, r3, r1
    1d74:	6019      	str	r1, [r3, #0]
    1d76:	4282      	cmp	r2, r0
    1d78:	d1e0      	bne.n	1d3c <_free_r+0x24>
    1d7a:	6810      	ldr	r0, [r2, #0]
    1d7c:	6852      	ldr	r2, [r2, #4]
    1d7e:	1841      	adds	r1, r0, r1
    1d80:	6019      	str	r1, [r3, #0]
    1d82:	605a      	str	r2, [r3, #4]
    1d84:	e7da      	b.n	1d3c <_free_r+0x24>
    1d86:	42a0      	cmp	r0, r4
    1d88:	d902      	bls.n	1d90 <_free_r+0x78>
    1d8a:	230c      	movs	r3, #12
    1d8c:	602b      	str	r3, [r5, #0]
    1d8e:	e7d5      	b.n	1d3c <_free_r+0x24>
    1d90:	6821      	ldr	r1, [r4, #0]
    1d92:	1860      	adds	r0, r4, r1
    1d94:	4282      	cmp	r2, r0
    1d96:	d103      	bne.n	1da0 <_free_r+0x88>
    1d98:	6810      	ldr	r0, [r2, #0]
    1d9a:	6852      	ldr	r2, [r2, #4]
    1d9c:	1841      	adds	r1, r0, r1
    1d9e:	6021      	str	r1, [r4, #0]
    1da0:	6062      	str	r2, [r4, #4]
    1da2:	605c      	str	r4, [r3, #4]
    1da4:	e7ca      	b.n	1d3c <_free_r+0x24>
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	200000ac 	.word	0x200000ac

00001dac <_malloc_r>:
    1dac:	2303      	movs	r3, #3
    1dae:	b570      	push	{r4, r5, r6, lr}
    1db0:	1ccd      	adds	r5, r1, #3
    1db2:	439d      	bics	r5, r3
    1db4:	3508      	adds	r5, #8
    1db6:	0006      	movs	r6, r0
    1db8:	2d0c      	cmp	r5, #12
    1dba:	d21e      	bcs.n	1dfa <_malloc_r+0x4e>
    1dbc:	250c      	movs	r5, #12
    1dbe:	42a9      	cmp	r1, r5
    1dc0:	d81d      	bhi.n	1dfe <_malloc_r+0x52>
    1dc2:	0030      	movs	r0, r6
    1dc4:	f000 fbe3 	bl	258e <__malloc_lock>
    1dc8:	4a25      	ldr	r2, [pc, #148]	; (1e60 <_malloc_r+0xb4>)
    1dca:	6814      	ldr	r4, [r2, #0]
    1dcc:	0021      	movs	r1, r4
    1dce:	2900      	cmp	r1, #0
    1dd0:	d119      	bne.n	1e06 <_malloc_r+0x5a>
    1dd2:	4c24      	ldr	r4, [pc, #144]	; (1e64 <_malloc_r+0xb8>)
    1dd4:	6823      	ldr	r3, [r4, #0]
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	d103      	bne.n	1de2 <_malloc_r+0x36>
    1dda:	0030      	movs	r0, r6
    1ddc:	f000 fb10 	bl	2400 <_sbrk_r>
    1de0:	6020      	str	r0, [r4, #0]
    1de2:	0029      	movs	r1, r5
    1de4:	0030      	movs	r0, r6
    1de6:	f000 fb0b 	bl	2400 <_sbrk_r>
    1dea:	1c43      	adds	r3, r0, #1
    1dec:	d12c      	bne.n	1e48 <_malloc_r+0x9c>
    1dee:	230c      	movs	r3, #12
    1df0:	0030      	movs	r0, r6
    1df2:	6033      	str	r3, [r6, #0]
    1df4:	f000 fbcc 	bl	2590 <__malloc_unlock>
    1df8:	e003      	b.n	1e02 <_malloc_r+0x56>
    1dfa:	2d00      	cmp	r5, #0
    1dfc:	dadf      	bge.n	1dbe <_malloc_r+0x12>
    1dfe:	230c      	movs	r3, #12
    1e00:	6033      	str	r3, [r6, #0]
    1e02:	2000      	movs	r0, #0
    1e04:	bd70      	pop	{r4, r5, r6, pc}
    1e06:	680b      	ldr	r3, [r1, #0]
    1e08:	1b5b      	subs	r3, r3, r5
    1e0a:	d41a      	bmi.n	1e42 <_malloc_r+0x96>
    1e0c:	2b0b      	cmp	r3, #11
    1e0e:	d903      	bls.n	1e18 <_malloc_r+0x6c>
    1e10:	600b      	str	r3, [r1, #0]
    1e12:	18cc      	adds	r4, r1, r3
    1e14:	6025      	str	r5, [r4, #0]
    1e16:	e003      	b.n	1e20 <_malloc_r+0x74>
    1e18:	428c      	cmp	r4, r1
    1e1a:	d10e      	bne.n	1e3a <_malloc_r+0x8e>
    1e1c:	6863      	ldr	r3, [r4, #4]
    1e1e:	6013      	str	r3, [r2, #0]
    1e20:	0030      	movs	r0, r6
    1e22:	f000 fbb5 	bl	2590 <__malloc_unlock>
    1e26:	0020      	movs	r0, r4
    1e28:	2207      	movs	r2, #7
    1e2a:	300b      	adds	r0, #11
    1e2c:	1d23      	adds	r3, r4, #4
    1e2e:	4390      	bics	r0, r2
    1e30:	1ac3      	subs	r3, r0, r3
    1e32:	d0e7      	beq.n	1e04 <_malloc_r+0x58>
    1e34:	425a      	negs	r2, r3
    1e36:	50e2      	str	r2, [r4, r3]
    1e38:	e7e4      	b.n	1e04 <_malloc_r+0x58>
    1e3a:	684b      	ldr	r3, [r1, #4]
    1e3c:	6063      	str	r3, [r4, #4]
    1e3e:	000c      	movs	r4, r1
    1e40:	e7ee      	b.n	1e20 <_malloc_r+0x74>
    1e42:	000c      	movs	r4, r1
    1e44:	6849      	ldr	r1, [r1, #4]
    1e46:	e7c2      	b.n	1dce <_malloc_r+0x22>
    1e48:	2303      	movs	r3, #3
    1e4a:	1cc4      	adds	r4, r0, #3
    1e4c:	439c      	bics	r4, r3
    1e4e:	42a0      	cmp	r0, r4
    1e50:	d0e0      	beq.n	1e14 <_malloc_r+0x68>
    1e52:	1a21      	subs	r1, r4, r0
    1e54:	0030      	movs	r0, r6
    1e56:	f000 fad3 	bl	2400 <_sbrk_r>
    1e5a:	1c43      	adds	r3, r0, #1
    1e5c:	d1da      	bne.n	1e14 <_malloc_r+0x68>
    1e5e:	e7c6      	b.n	1dee <_malloc_r+0x42>
    1e60:	200000ac 	.word	0x200000ac
    1e64:	200000b0 	.word	0x200000b0

00001e68 <__sfputc_r>:
    1e68:	6893      	ldr	r3, [r2, #8]
    1e6a:	b510      	push	{r4, lr}
    1e6c:	3b01      	subs	r3, #1
    1e6e:	6093      	str	r3, [r2, #8]
    1e70:	2b00      	cmp	r3, #0
    1e72:	da05      	bge.n	1e80 <__sfputc_r+0x18>
    1e74:	6994      	ldr	r4, [r2, #24]
    1e76:	42a3      	cmp	r3, r4
    1e78:	db08      	blt.n	1e8c <__sfputc_r+0x24>
    1e7a:	b2cb      	uxtb	r3, r1
    1e7c:	2b0a      	cmp	r3, #10
    1e7e:	d005      	beq.n	1e8c <__sfputc_r+0x24>
    1e80:	6813      	ldr	r3, [r2, #0]
    1e82:	1c58      	adds	r0, r3, #1
    1e84:	6010      	str	r0, [r2, #0]
    1e86:	7019      	strb	r1, [r3, #0]
    1e88:	b2c8      	uxtb	r0, r1
    1e8a:	bd10      	pop	{r4, pc}
    1e8c:	f7ff fc74 	bl	1778 <__swbuf_r>
    1e90:	e7fb      	b.n	1e8a <__sfputc_r+0x22>

00001e92 <__sfputs_r>:
    1e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e94:	0006      	movs	r6, r0
    1e96:	000f      	movs	r7, r1
    1e98:	0014      	movs	r4, r2
    1e9a:	18d5      	adds	r5, r2, r3
    1e9c:	42ac      	cmp	r4, r5
    1e9e:	d101      	bne.n	1ea4 <__sfputs_r+0x12>
    1ea0:	2000      	movs	r0, #0
    1ea2:	e007      	b.n	1eb4 <__sfputs_r+0x22>
    1ea4:	7821      	ldrb	r1, [r4, #0]
    1ea6:	003a      	movs	r2, r7
    1ea8:	0030      	movs	r0, r6
    1eaa:	f7ff ffdd 	bl	1e68 <__sfputc_r>
    1eae:	3401      	adds	r4, #1
    1eb0:	1c43      	adds	r3, r0, #1
    1eb2:	d1f3      	bne.n	1e9c <__sfputs_r+0xa>
    1eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001eb8 <_vfiprintf_r>:
    1eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eba:	b09f      	sub	sp, #124	; 0x7c
    1ebc:	0006      	movs	r6, r0
    1ebe:	000f      	movs	r7, r1
    1ec0:	0014      	movs	r4, r2
    1ec2:	9305      	str	r3, [sp, #20]
    1ec4:	2800      	cmp	r0, #0
    1ec6:	d004      	beq.n	1ed2 <_vfiprintf_r+0x1a>
    1ec8:	6983      	ldr	r3, [r0, #24]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d101      	bne.n	1ed2 <_vfiprintf_r+0x1a>
    1ece:	f7ff fe17 	bl	1b00 <__sinit>
    1ed2:	4b7f      	ldr	r3, [pc, #508]	; (20d0 <STACK_SIZE+0xd0>)
    1ed4:	429f      	cmp	r7, r3
    1ed6:	d15c      	bne.n	1f92 <_vfiprintf_r+0xda>
    1ed8:	6877      	ldr	r7, [r6, #4]
    1eda:	89bb      	ldrh	r3, [r7, #12]
    1edc:	071b      	lsls	r3, r3, #28
    1ede:	d562      	bpl.n	1fa6 <_vfiprintf_r+0xee>
    1ee0:	693b      	ldr	r3, [r7, #16]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d05f      	beq.n	1fa6 <_vfiprintf_r+0xee>
    1ee6:	2300      	movs	r3, #0
    1ee8:	ad06      	add	r5, sp, #24
    1eea:	616b      	str	r3, [r5, #20]
    1eec:	3320      	adds	r3, #32
    1eee:	766b      	strb	r3, [r5, #25]
    1ef0:	3310      	adds	r3, #16
    1ef2:	76ab      	strb	r3, [r5, #26]
    1ef4:	9402      	str	r4, [sp, #8]
    1ef6:	9c02      	ldr	r4, [sp, #8]
    1ef8:	7823      	ldrb	r3, [r4, #0]
    1efa:	2b00      	cmp	r3, #0
    1efc:	d15d      	bne.n	1fba <_vfiprintf_r+0x102>
    1efe:	9b02      	ldr	r3, [sp, #8]
    1f00:	1ae3      	subs	r3, r4, r3
    1f02:	9304      	str	r3, [sp, #16]
    1f04:	d00d      	beq.n	1f22 <_vfiprintf_r+0x6a>
    1f06:	9b04      	ldr	r3, [sp, #16]
    1f08:	9a02      	ldr	r2, [sp, #8]
    1f0a:	0039      	movs	r1, r7
    1f0c:	0030      	movs	r0, r6
    1f0e:	f7ff ffc0 	bl	1e92 <__sfputs_r>
    1f12:	1c43      	adds	r3, r0, #1
    1f14:	d100      	bne.n	1f18 <_vfiprintf_r+0x60>
    1f16:	e0cc      	b.n	20b2 <STACK_SIZE+0xb2>
    1f18:	696a      	ldr	r2, [r5, #20]
    1f1a:	9b04      	ldr	r3, [sp, #16]
    1f1c:	4694      	mov	ip, r2
    1f1e:	4463      	add	r3, ip
    1f20:	616b      	str	r3, [r5, #20]
    1f22:	7823      	ldrb	r3, [r4, #0]
    1f24:	2b00      	cmp	r3, #0
    1f26:	d100      	bne.n	1f2a <_vfiprintf_r+0x72>
    1f28:	e0c3      	b.n	20b2 <STACK_SIZE+0xb2>
    1f2a:	2201      	movs	r2, #1
    1f2c:	2300      	movs	r3, #0
    1f2e:	4252      	negs	r2, r2
    1f30:	606a      	str	r2, [r5, #4]
    1f32:	a902      	add	r1, sp, #8
    1f34:	3254      	adds	r2, #84	; 0x54
    1f36:	1852      	adds	r2, r2, r1
    1f38:	3401      	adds	r4, #1
    1f3a:	602b      	str	r3, [r5, #0]
    1f3c:	60eb      	str	r3, [r5, #12]
    1f3e:	60ab      	str	r3, [r5, #8]
    1f40:	7013      	strb	r3, [r2, #0]
    1f42:	65ab      	str	r3, [r5, #88]	; 0x58
    1f44:	7821      	ldrb	r1, [r4, #0]
    1f46:	2205      	movs	r2, #5
    1f48:	4862      	ldr	r0, [pc, #392]	; (20d4 <STACK_SIZE+0xd4>)
    1f4a:	f000 fb15 	bl	2578 <memchr>
    1f4e:	1c63      	adds	r3, r4, #1
    1f50:	469c      	mov	ip, r3
    1f52:	2800      	cmp	r0, #0
    1f54:	d135      	bne.n	1fc2 <_vfiprintf_r+0x10a>
    1f56:	6829      	ldr	r1, [r5, #0]
    1f58:	06cb      	lsls	r3, r1, #27
    1f5a:	d504      	bpl.n	1f66 <_vfiprintf_r+0xae>
    1f5c:	2353      	movs	r3, #83	; 0x53
    1f5e:	aa02      	add	r2, sp, #8
    1f60:	3020      	adds	r0, #32
    1f62:	189b      	adds	r3, r3, r2
    1f64:	7018      	strb	r0, [r3, #0]
    1f66:	070b      	lsls	r3, r1, #28
    1f68:	d504      	bpl.n	1f74 <_vfiprintf_r+0xbc>
    1f6a:	2353      	movs	r3, #83	; 0x53
    1f6c:	202b      	movs	r0, #43	; 0x2b
    1f6e:	aa02      	add	r2, sp, #8
    1f70:	189b      	adds	r3, r3, r2
    1f72:	7018      	strb	r0, [r3, #0]
    1f74:	7823      	ldrb	r3, [r4, #0]
    1f76:	2b2a      	cmp	r3, #42	; 0x2a
    1f78:	d02c      	beq.n	1fd4 <_vfiprintf_r+0x11c>
    1f7a:	2000      	movs	r0, #0
    1f7c:	210a      	movs	r1, #10
    1f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f80:	7822      	ldrb	r2, [r4, #0]
    1f82:	3a30      	subs	r2, #48	; 0x30
    1f84:	2a09      	cmp	r2, #9
    1f86:	d800      	bhi.n	1f8a <_vfiprintf_r+0xd2>
    1f88:	e06b      	b.n	2062 <STACK_SIZE+0x62>
    1f8a:	2800      	cmp	r0, #0
    1f8c:	d02a      	beq.n	1fe4 <_vfiprintf_r+0x12c>
    1f8e:	9309      	str	r3, [sp, #36]	; 0x24
    1f90:	e028      	b.n	1fe4 <_vfiprintf_r+0x12c>
    1f92:	4b51      	ldr	r3, [pc, #324]	; (20d8 <STACK_SIZE+0xd8>)
    1f94:	429f      	cmp	r7, r3
    1f96:	d101      	bne.n	1f9c <_vfiprintf_r+0xe4>
    1f98:	68b7      	ldr	r7, [r6, #8]
    1f9a:	e79e      	b.n	1eda <_vfiprintf_r+0x22>
    1f9c:	4b4f      	ldr	r3, [pc, #316]	; (20dc <STACK_SIZE+0xdc>)
    1f9e:	429f      	cmp	r7, r3
    1fa0:	d19b      	bne.n	1eda <_vfiprintf_r+0x22>
    1fa2:	68f7      	ldr	r7, [r6, #12]
    1fa4:	e799      	b.n	1eda <_vfiprintf_r+0x22>
    1fa6:	0039      	movs	r1, r7
    1fa8:	0030      	movs	r0, r6
    1faa:	f7ff fc3b 	bl	1824 <__swsetup_r>
    1fae:	2800      	cmp	r0, #0
    1fb0:	d099      	beq.n	1ee6 <_vfiprintf_r+0x2e>
    1fb2:	2001      	movs	r0, #1
    1fb4:	4240      	negs	r0, r0
    1fb6:	b01f      	add	sp, #124	; 0x7c
    1fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fba:	2b25      	cmp	r3, #37	; 0x25
    1fbc:	d09f      	beq.n	1efe <_vfiprintf_r+0x46>
    1fbe:	3401      	adds	r4, #1
    1fc0:	e79a      	b.n	1ef8 <_vfiprintf_r+0x40>
    1fc2:	4b44      	ldr	r3, [pc, #272]	; (20d4 <STACK_SIZE+0xd4>)
    1fc4:	6829      	ldr	r1, [r5, #0]
    1fc6:	1ac0      	subs	r0, r0, r3
    1fc8:	2301      	movs	r3, #1
    1fca:	4083      	lsls	r3, r0
    1fcc:	430b      	orrs	r3, r1
    1fce:	602b      	str	r3, [r5, #0]
    1fd0:	4664      	mov	r4, ip
    1fd2:	e7b7      	b.n	1f44 <_vfiprintf_r+0x8c>
    1fd4:	9b05      	ldr	r3, [sp, #20]
    1fd6:	1d18      	adds	r0, r3, #4
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	9005      	str	r0, [sp, #20]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	db3a      	blt.n	2056 <STACK_SIZE+0x56>
    1fe0:	9309      	str	r3, [sp, #36]	; 0x24
    1fe2:	4664      	mov	r4, ip
    1fe4:	7823      	ldrb	r3, [r4, #0]
    1fe6:	2b2e      	cmp	r3, #46	; 0x2e
    1fe8:	d10b      	bne.n	2002 <STACK_SIZE+0x2>
    1fea:	7863      	ldrb	r3, [r4, #1]
    1fec:	1c62      	adds	r2, r4, #1
    1fee:	2b2a      	cmp	r3, #42	; 0x2a
    1ff0:	d13f      	bne.n	2072 <STACK_SIZE+0x72>
    1ff2:	9b05      	ldr	r3, [sp, #20]
    1ff4:	3402      	adds	r4, #2
    1ff6:	1d1a      	adds	r2, r3, #4
    1ff8:	681b      	ldr	r3, [r3, #0]
    1ffa:	9205      	str	r2, [sp, #20]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	db35      	blt.n	206c <STACK_SIZE+0x6c>
    2000:	9307      	str	r3, [sp, #28]
    2002:	7821      	ldrb	r1, [r4, #0]
    2004:	2203      	movs	r2, #3
    2006:	4836      	ldr	r0, [pc, #216]	; (20e0 <STACK_SIZE+0xe0>)
    2008:	f000 fab6 	bl	2578 <memchr>
    200c:	2800      	cmp	r0, #0
    200e:	d007      	beq.n	2020 <STACK_SIZE+0x20>
    2010:	4b33      	ldr	r3, [pc, #204]	; (20e0 <STACK_SIZE+0xe0>)
    2012:	682a      	ldr	r2, [r5, #0]
    2014:	1ac0      	subs	r0, r0, r3
    2016:	2340      	movs	r3, #64	; 0x40
    2018:	4083      	lsls	r3, r0
    201a:	4313      	orrs	r3, r2
    201c:	602b      	str	r3, [r5, #0]
    201e:	3401      	adds	r4, #1
    2020:	7821      	ldrb	r1, [r4, #0]
    2022:	1c63      	adds	r3, r4, #1
    2024:	2206      	movs	r2, #6
    2026:	482f      	ldr	r0, [pc, #188]	; (20e4 <STACK_SIZE+0xe4>)
    2028:	9302      	str	r3, [sp, #8]
    202a:	7629      	strb	r1, [r5, #24]
    202c:	f000 faa4 	bl	2578 <memchr>
    2030:	2800      	cmp	r0, #0
    2032:	d044      	beq.n	20be <STACK_SIZE+0xbe>
    2034:	4b2c      	ldr	r3, [pc, #176]	; (20e8 <STACK_SIZE+0xe8>)
    2036:	2b00      	cmp	r3, #0
    2038:	d12f      	bne.n	209a <STACK_SIZE+0x9a>
    203a:	6829      	ldr	r1, [r5, #0]
    203c:	9b05      	ldr	r3, [sp, #20]
    203e:	2207      	movs	r2, #7
    2040:	05c9      	lsls	r1, r1, #23
    2042:	d528      	bpl.n	2096 <STACK_SIZE+0x96>
    2044:	189b      	adds	r3, r3, r2
    2046:	4393      	bics	r3, r2
    2048:	3308      	adds	r3, #8
    204a:	9305      	str	r3, [sp, #20]
    204c:	696b      	ldr	r3, [r5, #20]
    204e:	9a03      	ldr	r2, [sp, #12]
    2050:	189b      	adds	r3, r3, r2
    2052:	616b      	str	r3, [r5, #20]
    2054:	e74f      	b.n	1ef6 <_vfiprintf_r+0x3e>
    2056:	425b      	negs	r3, r3
    2058:	60eb      	str	r3, [r5, #12]
    205a:	2302      	movs	r3, #2
    205c:	430b      	orrs	r3, r1
    205e:	602b      	str	r3, [r5, #0]
    2060:	e7bf      	b.n	1fe2 <_vfiprintf_r+0x12a>
    2062:	434b      	muls	r3, r1
    2064:	3401      	adds	r4, #1
    2066:	189b      	adds	r3, r3, r2
    2068:	2001      	movs	r0, #1
    206a:	e789      	b.n	1f80 <_vfiprintf_r+0xc8>
    206c:	2301      	movs	r3, #1
    206e:	425b      	negs	r3, r3
    2070:	e7c6      	b.n	2000 <STACK_SIZE>
    2072:	2300      	movs	r3, #0
    2074:	0014      	movs	r4, r2
    2076:	200a      	movs	r0, #10
    2078:	001a      	movs	r2, r3
    207a:	606b      	str	r3, [r5, #4]
    207c:	7821      	ldrb	r1, [r4, #0]
    207e:	3930      	subs	r1, #48	; 0x30
    2080:	2909      	cmp	r1, #9
    2082:	d903      	bls.n	208c <STACK_SIZE+0x8c>
    2084:	2b00      	cmp	r3, #0
    2086:	d0bc      	beq.n	2002 <STACK_SIZE+0x2>
    2088:	9207      	str	r2, [sp, #28]
    208a:	e7ba      	b.n	2002 <STACK_SIZE+0x2>
    208c:	4342      	muls	r2, r0
    208e:	3401      	adds	r4, #1
    2090:	1852      	adds	r2, r2, r1
    2092:	2301      	movs	r3, #1
    2094:	e7f2      	b.n	207c <STACK_SIZE+0x7c>
    2096:	3307      	adds	r3, #7
    2098:	e7d5      	b.n	2046 <STACK_SIZE+0x46>
    209a:	ab05      	add	r3, sp, #20
    209c:	9300      	str	r3, [sp, #0]
    209e:	003a      	movs	r2, r7
    20a0:	4b12      	ldr	r3, [pc, #72]	; (20ec <STACK_SIZE+0xec>)
    20a2:	0029      	movs	r1, r5
    20a4:	0030      	movs	r0, r6
    20a6:	e000      	b.n	20aa <STACK_SIZE+0xaa>
    20a8:	bf00      	nop
    20aa:	9003      	str	r0, [sp, #12]
    20ac:	9b03      	ldr	r3, [sp, #12]
    20ae:	3301      	adds	r3, #1
    20b0:	d1cc      	bne.n	204c <STACK_SIZE+0x4c>
    20b2:	89bb      	ldrh	r3, [r7, #12]
    20b4:	065b      	lsls	r3, r3, #25
    20b6:	d500      	bpl.n	20ba <STACK_SIZE+0xba>
    20b8:	e77b      	b.n	1fb2 <_vfiprintf_r+0xfa>
    20ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    20bc:	e77b      	b.n	1fb6 <_vfiprintf_r+0xfe>
    20be:	ab05      	add	r3, sp, #20
    20c0:	9300      	str	r3, [sp, #0]
    20c2:	003a      	movs	r2, r7
    20c4:	4b09      	ldr	r3, [pc, #36]	; (20ec <STACK_SIZE+0xec>)
    20c6:	0029      	movs	r1, r5
    20c8:	0030      	movs	r0, r6
    20ca:	f000 f87f 	bl	21cc <_printf_i>
    20ce:	e7ec      	b.n	20aa <STACK_SIZE+0xaa>
    20d0:	00002798 	.word	0x00002798
    20d4:	000027d8 	.word	0x000027d8
    20d8:	000027b8 	.word	0x000027b8
    20dc:	00002778 	.word	0x00002778
    20e0:	000027de 	.word	0x000027de
    20e4:	000027e2 	.word	0x000027e2
    20e8:	00000000 	.word	0x00000000
    20ec:	00001e93 	.word	0x00001e93

000020f0 <_printf_common>:
    20f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20f2:	0015      	movs	r5, r2
    20f4:	9301      	str	r3, [sp, #4]
    20f6:	688a      	ldr	r2, [r1, #8]
    20f8:	690b      	ldr	r3, [r1, #16]
    20fa:	9000      	str	r0, [sp, #0]
    20fc:	000c      	movs	r4, r1
    20fe:	4293      	cmp	r3, r2
    2100:	da00      	bge.n	2104 <_printf_common+0x14>
    2102:	0013      	movs	r3, r2
    2104:	0022      	movs	r2, r4
    2106:	602b      	str	r3, [r5, #0]
    2108:	3243      	adds	r2, #67	; 0x43
    210a:	7812      	ldrb	r2, [r2, #0]
    210c:	2a00      	cmp	r2, #0
    210e:	d001      	beq.n	2114 <_printf_common+0x24>
    2110:	3301      	adds	r3, #1
    2112:	602b      	str	r3, [r5, #0]
    2114:	6823      	ldr	r3, [r4, #0]
    2116:	069b      	lsls	r3, r3, #26
    2118:	d502      	bpl.n	2120 <_printf_common+0x30>
    211a:	682b      	ldr	r3, [r5, #0]
    211c:	3302      	adds	r3, #2
    211e:	602b      	str	r3, [r5, #0]
    2120:	2706      	movs	r7, #6
    2122:	6823      	ldr	r3, [r4, #0]
    2124:	401f      	ands	r7, r3
    2126:	d027      	beq.n	2178 <_printf_common+0x88>
    2128:	0023      	movs	r3, r4
    212a:	3343      	adds	r3, #67	; 0x43
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	1e5a      	subs	r2, r3, #1
    2130:	4193      	sbcs	r3, r2
    2132:	6822      	ldr	r2, [r4, #0]
    2134:	0692      	lsls	r2, r2, #26
    2136:	d430      	bmi.n	219a <_printf_common+0xaa>
    2138:	0022      	movs	r2, r4
    213a:	9901      	ldr	r1, [sp, #4]
    213c:	3243      	adds	r2, #67	; 0x43
    213e:	9800      	ldr	r0, [sp, #0]
    2140:	9e08      	ldr	r6, [sp, #32]
    2142:	47b0      	blx	r6
    2144:	1c43      	adds	r3, r0, #1
    2146:	d025      	beq.n	2194 <_printf_common+0xa4>
    2148:	2306      	movs	r3, #6
    214a:	6820      	ldr	r0, [r4, #0]
    214c:	682a      	ldr	r2, [r5, #0]
    214e:	68e1      	ldr	r1, [r4, #12]
    2150:	4003      	ands	r3, r0
    2152:	2500      	movs	r5, #0
    2154:	2b04      	cmp	r3, #4
    2156:	d103      	bne.n	2160 <_printf_common+0x70>
    2158:	1a8d      	subs	r5, r1, r2
    215a:	43eb      	mvns	r3, r5
    215c:	17db      	asrs	r3, r3, #31
    215e:	401d      	ands	r5, r3
    2160:	68a3      	ldr	r3, [r4, #8]
    2162:	6922      	ldr	r2, [r4, #16]
    2164:	4293      	cmp	r3, r2
    2166:	dd01      	ble.n	216c <_printf_common+0x7c>
    2168:	1a9b      	subs	r3, r3, r2
    216a:	18ed      	adds	r5, r5, r3
    216c:	2700      	movs	r7, #0
    216e:	42bd      	cmp	r5, r7
    2170:	d120      	bne.n	21b4 <_printf_common+0xc4>
    2172:	2000      	movs	r0, #0
    2174:	e010      	b.n	2198 <_printf_common+0xa8>
    2176:	3701      	adds	r7, #1
    2178:	68e3      	ldr	r3, [r4, #12]
    217a:	682a      	ldr	r2, [r5, #0]
    217c:	1a9b      	subs	r3, r3, r2
    217e:	429f      	cmp	r7, r3
    2180:	dad2      	bge.n	2128 <_printf_common+0x38>
    2182:	0022      	movs	r2, r4
    2184:	2301      	movs	r3, #1
    2186:	3219      	adds	r2, #25
    2188:	9901      	ldr	r1, [sp, #4]
    218a:	9800      	ldr	r0, [sp, #0]
    218c:	9e08      	ldr	r6, [sp, #32]
    218e:	47b0      	blx	r6
    2190:	1c43      	adds	r3, r0, #1
    2192:	d1f0      	bne.n	2176 <_printf_common+0x86>
    2194:	2001      	movs	r0, #1
    2196:	4240      	negs	r0, r0
    2198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    219a:	2030      	movs	r0, #48	; 0x30
    219c:	18e1      	adds	r1, r4, r3
    219e:	3143      	adds	r1, #67	; 0x43
    21a0:	7008      	strb	r0, [r1, #0]
    21a2:	0021      	movs	r1, r4
    21a4:	1c5a      	adds	r2, r3, #1
    21a6:	3145      	adds	r1, #69	; 0x45
    21a8:	7809      	ldrb	r1, [r1, #0]
    21aa:	18a2      	adds	r2, r4, r2
    21ac:	3243      	adds	r2, #67	; 0x43
    21ae:	3302      	adds	r3, #2
    21b0:	7011      	strb	r1, [r2, #0]
    21b2:	e7c1      	b.n	2138 <_printf_common+0x48>
    21b4:	0022      	movs	r2, r4
    21b6:	2301      	movs	r3, #1
    21b8:	321a      	adds	r2, #26
    21ba:	9901      	ldr	r1, [sp, #4]
    21bc:	9800      	ldr	r0, [sp, #0]
    21be:	9e08      	ldr	r6, [sp, #32]
    21c0:	47b0      	blx	r6
    21c2:	1c43      	adds	r3, r0, #1
    21c4:	d0e6      	beq.n	2194 <_printf_common+0xa4>
    21c6:	3701      	adds	r7, #1
    21c8:	e7d1      	b.n	216e <_printf_common+0x7e>
	...

000021cc <_printf_i>:
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ce:	b08b      	sub	sp, #44	; 0x2c
    21d0:	9206      	str	r2, [sp, #24]
    21d2:	000a      	movs	r2, r1
    21d4:	3243      	adds	r2, #67	; 0x43
    21d6:	9307      	str	r3, [sp, #28]
    21d8:	9005      	str	r0, [sp, #20]
    21da:	9204      	str	r2, [sp, #16]
    21dc:	7e0a      	ldrb	r2, [r1, #24]
    21de:	000c      	movs	r4, r1
    21e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    21e2:	2a6e      	cmp	r2, #110	; 0x6e
    21e4:	d100      	bne.n	21e8 <_printf_i+0x1c>
    21e6:	e08f      	b.n	2308 <_printf_i+0x13c>
    21e8:	d817      	bhi.n	221a <_printf_i+0x4e>
    21ea:	2a63      	cmp	r2, #99	; 0x63
    21ec:	d02c      	beq.n	2248 <_printf_i+0x7c>
    21ee:	d808      	bhi.n	2202 <_printf_i+0x36>
    21f0:	2a00      	cmp	r2, #0
    21f2:	d100      	bne.n	21f6 <_printf_i+0x2a>
    21f4:	e099      	b.n	232a <_printf_i+0x15e>
    21f6:	2a58      	cmp	r2, #88	; 0x58
    21f8:	d054      	beq.n	22a4 <_printf_i+0xd8>
    21fa:	0026      	movs	r6, r4
    21fc:	3642      	adds	r6, #66	; 0x42
    21fe:	7032      	strb	r2, [r6, #0]
    2200:	e029      	b.n	2256 <_printf_i+0x8a>
    2202:	2a64      	cmp	r2, #100	; 0x64
    2204:	d001      	beq.n	220a <_printf_i+0x3e>
    2206:	2a69      	cmp	r2, #105	; 0x69
    2208:	d1f7      	bne.n	21fa <_printf_i+0x2e>
    220a:	6821      	ldr	r1, [r4, #0]
    220c:	681a      	ldr	r2, [r3, #0]
    220e:	0608      	lsls	r0, r1, #24
    2210:	d523      	bpl.n	225a <_printf_i+0x8e>
    2212:	1d11      	adds	r1, r2, #4
    2214:	6019      	str	r1, [r3, #0]
    2216:	6815      	ldr	r5, [r2, #0]
    2218:	e025      	b.n	2266 <_printf_i+0x9a>
    221a:	2a73      	cmp	r2, #115	; 0x73
    221c:	d100      	bne.n	2220 <_printf_i+0x54>
    221e:	e088      	b.n	2332 <_printf_i+0x166>
    2220:	d808      	bhi.n	2234 <_printf_i+0x68>
    2222:	2a6f      	cmp	r2, #111	; 0x6f
    2224:	d029      	beq.n	227a <_printf_i+0xae>
    2226:	2a70      	cmp	r2, #112	; 0x70
    2228:	d1e7      	bne.n	21fa <_printf_i+0x2e>
    222a:	2220      	movs	r2, #32
    222c:	6809      	ldr	r1, [r1, #0]
    222e:	430a      	orrs	r2, r1
    2230:	6022      	str	r2, [r4, #0]
    2232:	e003      	b.n	223c <_printf_i+0x70>
    2234:	2a75      	cmp	r2, #117	; 0x75
    2236:	d020      	beq.n	227a <_printf_i+0xae>
    2238:	2a78      	cmp	r2, #120	; 0x78
    223a:	d1de      	bne.n	21fa <_printf_i+0x2e>
    223c:	0022      	movs	r2, r4
    223e:	2178      	movs	r1, #120	; 0x78
    2240:	3245      	adds	r2, #69	; 0x45
    2242:	7011      	strb	r1, [r2, #0]
    2244:	4a6c      	ldr	r2, [pc, #432]	; (23f8 <_printf_i+0x22c>)
    2246:	e030      	b.n	22aa <_printf_i+0xde>
    2248:	000e      	movs	r6, r1
    224a:	681a      	ldr	r2, [r3, #0]
    224c:	3642      	adds	r6, #66	; 0x42
    224e:	1d11      	adds	r1, r2, #4
    2250:	6019      	str	r1, [r3, #0]
    2252:	6813      	ldr	r3, [r2, #0]
    2254:	7033      	strb	r3, [r6, #0]
    2256:	2301      	movs	r3, #1
    2258:	e079      	b.n	234e <_printf_i+0x182>
    225a:	0649      	lsls	r1, r1, #25
    225c:	d5d9      	bpl.n	2212 <_printf_i+0x46>
    225e:	1d11      	adds	r1, r2, #4
    2260:	6019      	str	r1, [r3, #0]
    2262:	2300      	movs	r3, #0
    2264:	5ed5      	ldrsh	r5, [r2, r3]
    2266:	2d00      	cmp	r5, #0
    2268:	da03      	bge.n	2272 <_printf_i+0xa6>
    226a:	232d      	movs	r3, #45	; 0x2d
    226c:	9a04      	ldr	r2, [sp, #16]
    226e:	426d      	negs	r5, r5
    2270:	7013      	strb	r3, [r2, #0]
    2272:	4b62      	ldr	r3, [pc, #392]	; (23fc <_printf_i+0x230>)
    2274:	270a      	movs	r7, #10
    2276:	9303      	str	r3, [sp, #12]
    2278:	e02f      	b.n	22da <_printf_i+0x10e>
    227a:	6820      	ldr	r0, [r4, #0]
    227c:	6819      	ldr	r1, [r3, #0]
    227e:	0605      	lsls	r5, r0, #24
    2280:	d503      	bpl.n	228a <_printf_i+0xbe>
    2282:	1d08      	adds	r0, r1, #4
    2284:	6018      	str	r0, [r3, #0]
    2286:	680d      	ldr	r5, [r1, #0]
    2288:	e005      	b.n	2296 <_printf_i+0xca>
    228a:	0640      	lsls	r0, r0, #25
    228c:	d5f9      	bpl.n	2282 <_printf_i+0xb6>
    228e:	680d      	ldr	r5, [r1, #0]
    2290:	1d08      	adds	r0, r1, #4
    2292:	6018      	str	r0, [r3, #0]
    2294:	b2ad      	uxth	r5, r5
    2296:	4b59      	ldr	r3, [pc, #356]	; (23fc <_printf_i+0x230>)
    2298:	2708      	movs	r7, #8
    229a:	9303      	str	r3, [sp, #12]
    229c:	2a6f      	cmp	r2, #111	; 0x6f
    229e:	d018      	beq.n	22d2 <_printf_i+0x106>
    22a0:	270a      	movs	r7, #10
    22a2:	e016      	b.n	22d2 <_printf_i+0x106>
    22a4:	3145      	adds	r1, #69	; 0x45
    22a6:	700a      	strb	r2, [r1, #0]
    22a8:	4a54      	ldr	r2, [pc, #336]	; (23fc <_printf_i+0x230>)
    22aa:	9203      	str	r2, [sp, #12]
    22ac:	681a      	ldr	r2, [r3, #0]
    22ae:	6821      	ldr	r1, [r4, #0]
    22b0:	1d10      	adds	r0, r2, #4
    22b2:	6018      	str	r0, [r3, #0]
    22b4:	6815      	ldr	r5, [r2, #0]
    22b6:	0608      	lsls	r0, r1, #24
    22b8:	d522      	bpl.n	2300 <_printf_i+0x134>
    22ba:	07cb      	lsls	r3, r1, #31
    22bc:	d502      	bpl.n	22c4 <_printf_i+0xf8>
    22be:	2320      	movs	r3, #32
    22c0:	4319      	orrs	r1, r3
    22c2:	6021      	str	r1, [r4, #0]
    22c4:	2710      	movs	r7, #16
    22c6:	2d00      	cmp	r5, #0
    22c8:	d103      	bne.n	22d2 <_printf_i+0x106>
    22ca:	2320      	movs	r3, #32
    22cc:	6822      	ldr	r2, [r4, #0]
    22ce:	439a      	bics	r2, r3
    22d0:	6022      	str	r2, [r4, #0]
    22d2:	0023      	movs	r3, r4
    22d4:	2200      	movs	r2, #0
    22d6:	3343      	adds	r3, #67	; 0x43
    22d8:	701a      	strb	r2, [r3, #0]
    22da:	6863      	ldr	r3, [r4, #4]
    22dc:	60a3      	str	r3, [r4, #8]
    22de:	2b00      	cmp	r3, #0
    22e0:	db5c      	blt.n	239c <_printf_i+0x1d0>
    22e2:	2204      	movs	r2, #4
    22e4:	6821      	ldr	r1, [r4, #0]
    22e6:	4391      	bics	r1, r2
    22e8:	6021      	str	r1, [r4, #0]
    22ea:	2d00      	cmp	r5, #0
    22ec:	d158      	bne.n	23a0 <_printf_i+0x1d4>
    22ee:	9e04      	ldr	r6, [sp, #16]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d064      	beq.n	23be <_printf_i+0x1f2>
    22f4:	0026      	movs	r6, r4
    22f6:	9b03      	ldr	r3, [sp, #12]
    22f8:	3642      	adds	r6, #66	; 0x42
    22fa:	781b      	ldrb	r3, [r3, #0]
    22fc:	7033      	strb	r3, [r6, #0]
    22fe:	e05e      	b.n	23be <_printf_i+0x1f2>
    2300:	0648      	lsls	r0, r1, #25
    2302:	d5da      	bpl.n	22ba <_printf_i+0xee>
    2304:	b2ad      	uxth	r5, r5
    2306:	e7d8      	b.n	22ba <_printf_i+0xee>
    2308:	6809      	ldr	r1, [r1, #0]
    230a:	681a      	ldr	r2, [r3, #0]
    230c:	0608      	lsls	r0, r1, #24
    230e:	d505      	bpl.n	231c <_printf_i+0x150>
    2310:	1d11      	adds	r1, r2, #4
    2312:	6019      	str	r1, [r3, #0]
    2314:	6813      	ldr	r3, [r2, #0]
    2316:	6962      	ldr	r2, [r4, #20]
    2318:	601a      	str	r2, [r3, #0]
    231a:	e006      	b.n	232a <_printf_i+0x15e>
    231c:	0649      	lsls	r1, r1, #25
    231e:	d5f7      	bpl.n	2310 <_printf_i+0x144>
    2320:	1d11      	adds	r1, r2, #4
    2322:	6019      	str	r1, [r3, #0]
    2324:	6813      	ldr	r3, [r2, #0]
    2326:	8aa2      	ldrh	r2, [r4, #20]
    2328:	801a      	strh	r2, [r3, #0]
    232a:	2300      	movs	r3, #0
    232c:	9e04      	ldr	r6, [sp, #16]
    232e:	6123      	str	r3, [r4, #16]
    2330:	e054      	b.n	23dc <_printf_i+0x210>
    2332:	681a      	ldr	r2, [r3, #0]
    2334:	1d11      	adds	r1, r2, #4
    2336:	6019      	str	r1, [r3, #0]
    2338:	6816      	ldr	r6, [r2, #0]
    233a:	2100      	movs	r1, #0
    233c:	6862      	ldr	r2, [r4, #4]
    233e:	0030      	movs	r0, r6
    2340:	f000 f91a 	bl	2578 <memchr>
    2344:	2800      	cmp	r0, #0
    2346:	d001      	beq.n	234c <_printf_i+0x180>
    2348:	1b80      	subs	r0, r0, r6
    234a:	6060      	str	r0, [r4, #4]
    234c:	6863      	ldr	r3, [r4, #4]
    234e:	6123      	str	r3, [r4, #16]
    2350:	2300      	movs	r3, #0
    2352:	9a04      	ldr	r2, [sp, #16]
    2354:	7013      	strb	r3, [r2, #0]
    2356:	e041      	b.n	23dc <_printf_i+0x210>
    2358:	6923      	ldr	r3, [r4, #16]
    235a:	0032      	movs	r2, r6
    235c:	9906      	ldr	r1, [sp, #24]
    235e:	9805      	ldr	r0, [sp, #20]
    2360:	9d07      	ldr	r5, [sp, #28]
    2362:	47a8      	blx	r5
    2364:	1c43      	adds	r3, r0, #1
    2366:	d043      	beq.n	23f0 <_printf_i+0x224>
    2368:	6823      	ldr	r3, [r4, #0]
    236a:	2500      	movs	r5, #0
    236c:	079b      	lsls	r3, r3, #30
    236e:	d40f      	bmi.n	2390 <_printf_i+0x1c4>
    2370:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2372:	68e0      	ldr	r0, [r4, #12]
    2374:	4298      	cmp	r0, r3
    2376:	da3d      	bge.n	23f4 <_printf_i+0x228>
    2378:	0018      	movs	r0, r3
    237a:	e03b      	b.n	23f4 <_printf_i+0x228>
    237c:	0022      	movs	r2, r4
    237e:	2301      	movs	r3, #1
    2380:	3219      	adds	r2, #25
    2382:	9906      	ldr	r1, [sp, #24]
    2384:	9805      	ldr	r0, [sp, #20]
    2386:	9e07      	ldr	r6, [sp, #28]
    2388:	47b0      	blx	r6
    238a:	1c43      	adds	r3, r0, #1
    238c:	d030      	beq.n	23f0 <_printf_i+0x224>
    238e:	3501      	adds	r5, #1
    2390:	68e3      	ldr	r3, [r4, #12]
    2392:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2394:	1a9b      	subs	r3, r3, r2
    2396:	429d      	cmp	r5, r3
    2398:	dbf0      	blt.n	237c <_printf_i+0x1b0>
    239a:	e7e9      	b.n	2370 <_printf_i+0x1a4>
    239c:	2d00      	cmp	r5, #0
    239e:	d0a9      	beq.n	22f4 <_printf_i+0x128>
    23a0:	9e04      	ldr	r6, [sp, #16]
    23a2:	0028      	movs	r0, r5
    23a4:	0039      	movs	r1, r7
    23a6:	f7fe fe27 	bl	ff8 <__aeabi_uidivmod>
    23aa:	9b03      	ldr	r3, [sp, #12]
    23ac:	3e01      	subs	r6, #1
    23ae:	5c5b      	ldrb	r3, [r3, r1]
    23b0:	0028      	movs	r0, r5
    23b2:	7033      	strb	r3, [r6, #0]
    23b4:	0039      	movs	r1, r7
    23b6:	f7fe fde6 	bl	f86 <__aeabi_uidiv>
    23ba:	1e05      	subs	r5, r0, #0
    23bc:	d1f1      	bne.n	23a2 <_printf_i+0x1d6>
    23be:	2f08      	cmp	r7, #8
    23c0:	d109      	bne.n	23d6 <_printf_i+0x20a>
    23c2:	6823      	ldr	r3, [r4, #0]
    23c4:	07db      	lsls	r3, r3, #31
    23c6:	d506      	bpl.n	23d6 <_printf_i+0x20a>
    23c8:	6863      	ldr	r3, [r4, #4]
    23ca:	6922      	ldr	r2, [r4, #16]
    23cc:	4293      	cmp	r3, r2
    23ce:	dc02      	bgt.n	23d6 <_printf_i+0x20a>
    23d0:	2330      	movs	r3, #48	; 0x30
    23d2:	3e01      	subs	r6, #1
    23d4:	7033      	strb	r3, [r6, #0]
    23d6:	9b04      	ldr	r3, [sp, #16]
    23d8:	1b9b      	subs	r3, r3, r6
    23da:	6123      	str	r3, [r4, #16]
    23dc:	9b07      	ldr	r3, [sp, #28]
    23de:	aa09      	add	r2, sp, #36	; 0x24
    23e0:	9300      	str	r3, [sp, #0]
    23e2:	0021      	movs	r1, r4
    23e4:	9b06      	ldr	r3, [sp, #24]
    23e6:	9805      	ldr	r0, [sp, #20]
    23e8:	f7ff fe82 	bl	20f0 <_printf_common>
    23ec:	1c43      	adds	r3, r0, #1
    23ee:	d1b3      	bne.n	2358 <_printf_i+0x18c>
    23f0:	2001      	movs	r0, #1
    23f2:	4240      	negs	r0, r0
    23f4:	b00b      	add	sp, #44	; 0x2c
    23f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23f8:	000027fa 	.word	0x000027fa
    23fc:	000027e9 	.word	0x000027e9

00002400 <_sbrk_r>:
    2400:	2300      	movs	r3, #0
    2402:	b570      	push	{r4, r5, r6, lr}
    2404:	4c06      	ldr	r4, [pc, #24]	; (2420 <_sbrk_r+0x20>)
    2406:	0005      	movs	r5, r0
    2408:	0008      	movs	r0, r1
    240a:	6023      	str	r3, [r4, #0]
    240c:	f7fe fbd8 	bl	bc0 <_sbrk>
    2410:	1c43      	adds	r3, r0, #1
    2412:	d103      	bne.n	241c <_sbrk_r+0x1c>
    2414:	6823      	ldr	r3, [r4, #0]
    2416:	2b00      	cmp	r3, #0
    2418:	d000      	beq.n	241c <_sbrk_r+0x1c>
    241a:	602b      	str	r3, [r5, #0]
    241c:	bd70      	pop	{r4, r5, r6, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	20000124 	.word	0x20000124

00002424 <__sread>:
    2424:	b570      	push	{r4, r5, r6, lr}
    2426:	000c      	movs	r4, r1
    2428:	250e      	movs	r5, #14
    242a:	5f49      	ldrsh	r1, [r1, r5]
    242c:	f000 f8b2 	bl	2594 <_read_r>
    2430:	2800      	cmp	r0, #0
    2432:	db03      	blt.n	243c <__sread+0x18>
    2434:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2436:	181b      	adds	r3, r3, r0
    2438:	6563      	str	r3, [r4, #84]	; 0x54
    243a:	bd70      	pop	{r4, r5, r6, pc}
    243c:	89a3      	ldrh	r3, [r4, #12]
    243e:	4a02      	ldr	r2, [pc, #8]	; (2448 <__sread+0x24>)
    2440:	4013      	ands	r3, r2
    2442:	81a3      	strh	r3, [r4, #12]
    2444:	e7f9      	b.n	243a <__sread+0x16>
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	ffffefff 	.word	0xffffefff

0000244c <__swrite>:
    244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    244e:	001f      	movs	r7, r3
    2450:	898b      	ldrh	r3, [r1, #12]
    2452:	0005      	movs	r5, r0
    2454:	000c      	movs	r4, r1
    2456:	0016      	movs	r6, r2
    2458:	05db      	lsls	r3, r3, #23
    245a:	d505      	bpl.n	2468 <__swrite+0x1c>
    245c:	230e      	movs	r3, #14
    245e:	5ec9      	ldrsh	r1, [r1, r3]
    2460:	2200      	movs	r2, #0
    2462:	2302      	movs	r3, #2
    2464:	f000 f874 	bl	2550 <_lseek_r>
    2468:	89a3      	ldrh	r3, [r4, #12]
    246a:	4a05      	ldr	r2, [pc, #20]	; (2480 <__swrite+0x34>)
    246c:	0028      	movs	r0, r5
    246e:	4013      	ands	r3, r2
    2470:	81a3      	strh	r3, [r4, #12]
    2472:	0032      	movs	r2, r6
    2474:	230e      	movs	r3, #14
    2476:	5ee1      	ldrsh	r1, [r4, r3]
    2478:	003b      	movs	r3, r7
    247a:	f000 f81f 	bl	24bc <_write_r>
    247e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2480:	ffffefff 	.word	0xffffefff

00002484 <__sseek>:
    2484:	b570      	push	{r4, r5, r6, lr}
    2486:	000c      	movs	r4, r1
    2488:	250e      	movs	r5, #14
    248a:	5f49      	ldrsh	r1, [r1, r5]
    248c:	f000 f860 	bl	2550 <_lseek_r>
    2490:	89a3      	ldrh	r3, [r4, #12]
    2492:	1c42      	adds	r2, r0, #1
    2494:	d103      	bne.n	249e <__sseek+0x1a>
    2496:	4a05      	ldr	r2, [pc, #20]	; (24ac <__sseek+0x28>)
    2498:	4013      	ands	r3, r2
    249a:	81a3      	strh	r3, [r4, #12]
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	2280      	movs	r2, #128	; 0x80
    24a0:	0152      	lsls	r2, r2, #5
    24a2:	4313      	orrs	r3, r2
    24a4:	81a3      	strh	r3, [r4, #12]
    24a6:	6560      	str	r0, [r4, #84]	; 0x54
    24a8:	e7f8      	b.n	249c <__sseek+0x18>
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	ffffefff 	.word	0xffffefff

000024b0 <__sclose>:
    24b0:	b510      	push	{r4, lr}
    24b2:	230e      	movs	r3, #14
    24b4:	5ec9      	ldrsh	r1, [r1, r3]
    24b6:	f000 f815 	bl	24e4 <_close_r>
    24ba:	bd10      	pop	{r4, pc}

000024bc <_write_r>:
    24bc:	b570      	push	{r4, r5, r6, lr}
    24be:	0005      	movs	r5, r0
    24c0:	0008      	movs	r0, r1
    24c2:	0011      	movs	r1, r2
    24c4:	2200      	movs	r2, #0
    24c6:	4c06      	ldr	r4, [pc, #24]	; (24e0 <_write_r+0x24>)
    24c8:	6022      	str	r2, [r4, #0]
    24ca:	001a      	movs	r2, r3
    24cc:	f7fe fffa 	bl	14c4 <_write>
    24d0:	1c43      	adds	r3, r0, #1
    24d2:	d103      	bne.n	24dc <_write_r+0x20>
    24d4:	6823      	ldr	r3, [r4, #0]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d000      	beq.n	24dc <_write_r+0x20>
    24da:	602b      	str	r3, [r5, #0]
    24dc:	bd70      	pop	{r4, r5, r6, pc}
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	20000124 	.word	0x20000124

000024e4 <_close_r>:
    24e4:	2300      	movs	r3, #0
    24e6:	b570      	push	{r4, r5, r6, lr}
    24e8:	4c06      	ldr	r4, [pc, #24]	; (2504 <_close_r+0x20>)
    24ea:	0005      	movs	r5, r0
    24ec:	0008      	movs	r0, r1
    24ee:	6023      	str	r3, [r4, #0]
    24f0:	f7fe fb78 	bl	be4 <_close>
    24f4:	1c43      	adds	r3, r0, #1
    24f6:	d103      	bne.n	2500 <_close_r+0x1c>
    24f8:	6823      	ldr	r3, [r4, #0]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d000      	beq.n	2500 <_close_r+0x1c>
    24fe:	602b      	str	r3, [r5, #0]
    2500:	bd70      	pop	{r4, r5, r6, pc}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	20000124 	.word	0x20000124

00002508 <_fstat_r>:
    2508:	2300      	movs	r3, #0
    250a:	b570      	push	{r4, r5, r6, lr}
    250c:	4c06      	ldr	r4, [pc, #24]	; (2528 <_fstat_r+0x20>)
    250e:	0005      	movs	r5, r0
    2510:	0008      	movs	r0, r1
    2512:	0011      	movs	r1, r2
    2514:	6023      	str	r3, [r4, #0]
    2516:	f7fe fb68 	bl	bea <_fstat>
    251a:	1c43      	adds	r3, r0, #1
    251c:	d103      	bne.n	2526 <_fstat_r+0x1e>
    251e:	6823      	ldr	r3, [r4, #0]
    2520:	2b00      	cmp	r3, #0
    2522:	d000      	beq.n	2526 <_fstat_r+0x1e>
    2524:	602b      	str	r3, [r5, #0]
    2526:	bd70      	pop	{r4, r5, r6, pc}
    2528:	20000124 	.word	0x20000124

0000252c <_isatty_r>:
    252c:	2300      	movs	r3, #0
    252e:	b570      	push	{r4, r5, r6, lr}
    2530:	4c06      	ldr	r4, [pc, #24]	; (254c <_isatty_r+0x20>)
    2532:	0005      	movs	r5, r0
    2534:	0008      	movs	r0, r1
    2536:	6023      	str	r3, [r4, #0]
    2538:	f7fe fb5c 	bl	bf4 <_isatty>
    253c:	1c43      	adds	r3, r0, #1
    253e:	d103      	bne.n	2548 <_isatty_r+0x1c>
    2540:	6823      	ldr	r3, [r4, #0]
    2542:	2b00      	cmp	r3, #0
    2544:	d000      	beq.n	2548 <_isatty_r+0x1c>
    2546:	602b      	str	r3, [r5, #0]
    2548:	bd70      	pop	{r4, r5, r6, pc}
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	20000124 	.word	0x20000124

00002550 <_lseek_r>:
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	0005      	movs	r5, r0
    2554:	0008      	movs	r0, r1
    2556:	0011      	movs	r1, r2
    2558:	2200      	movs	r2, #0
    255a:	4c06      	ldr	r4, [pc, #24]	; (2574 <_lseek_r+0x24>)
    255c:	6022      	str	r2, [r4, #0]
    255e:	001a      	movs	r2, r3
    2560:	f7fe fb4a 	bl	bf8 <_lseek>
    2564:	1c43      	adds	r3, r0, #1
    2566:	d103      	bne.n	2570 <_lseek_r+0x20>
    2568:	6823      	ldr	r3, [r4, #0]
    256a:	2b00      	cmp	r3, #0
    256c:	d000      	beq.n	2570 <_lseek_r+0x20>
    256e:	602b      	str	r3, [r5, #0]
    2570:	bd70      	pop	{r4, r5, r6, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	20000124 	.word	0x20000124

00002578 <memchr>:
    2578:	b2c9      	uxtb	r1, r1
    257a:	1882      	adds	r2, r0, r2
    257c:	4290      	cmp	r0, r2
    257e:	d101      	bne.n	2584 <memchr+0xc>
    2580:	2000      	movs	r0, #0
    2582:	4770      	bx	lr
    2584:	7803      	ldrb	r3, [r0, #0]
    2586:	428b      	cmp	r3, r1
    2588:	d0fb      	beq.n	2582 <memchr+0xa>
    258a:	3001      	adds	r0, #1
    258c:	e7f6      	b.n	257c <memchr+0x4>

0000258e <__malloc_lock>:
    258e:	4770      	bx	lr

00002590 <__malloc_unlock>:
    2590:	4770      	bx	lr
	...

00002594 <_read_r>:
    2594:	b570      	push	{r4, r5, r6, lr}
    2596:	0005      	movs	r5, r0
    2598:	0008      	movs	r0, r1
    259a:	0011      	movs	r1, r2
    259c:	2200      	movs	r2, #0
    259e:	4c06      	ldr	r4, [pc, #24]	; (25b8 <_read_r+0x24>)
    25a0:	6022      	str	r2, [r4, #0]
    25a2:	001a      	movs	r2, r3
    25a4:	f7fe ff7a 	bl	149c <_read>
    25a8:	1c43      	adds	r3, r0, #1
    25aa:	d103      	bne.n	25b4 <_read_r+0x20>
    25ac:	6823      	ldr	r3, [r4, #0]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d000      	beq.n	25b4 <_read_r+0x20>
    25b2:	602b      	str	r3, [r5, #0]
    25b4:	bd70      	pop	{r4, r5, r6, pc}
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	20000124 	.word	0x20000124
    25bc:	682f2e2e 	.word	0x682f2e2e
    25c0:	732f6c61 	.word	0x732f6c61
    25c4:	682f6372 	.word	0x682f6372
    25c8:	615f6c61 	.word	0x615f6c61
    25cc:	615f6364 	.word	0x615f6364
    25d0:	636e7973 	.word	0x636e7973
    25d4:	0000632e 	.word	0x0000632e
    25d8:	682f2e2e 	.word	0x682f2e2e
    25dc:	732f6c61 	.word	0x732f6c61
    25e0:	682f6372 	.word	0x682f6372
    25e4:	695f6c61 	.word	0x695f6c61
    25e8:	00632e6f 	.word	0x00632e6f
    25ec:	682f2e2e 	.word	0x682f2e2e
    25f0:	732f6c61 	.word	0x732f6c61
    25f4:	682f6372 	.word	0x682f6372
    25f8:	745f6c61 	.word	0x745f6c61
    25fc:	72656d69 	.word	0x72656d69
    2600:	0000632e 	.word	0x0000632e
    2604:	682f2e2e 	.word	0x682f2e2e
    2608:	732f6c61 	.word	0x732f6c61
    260c:	682f6372 	.word	0x682f6372
    2610:	755f6c61 	.word	0x755f6c61
    2614:	74726173 	.word	0x74726173
    2618:	6e79735f 	.word	0x6e79735f
    261c:	00632e63 	.word	0x00632e63
    2620:	682f2e2e 	.word	0x682f2e2e
    2624:	752f6c61 	.word	0x752f6c61
    2628:	736c6974 	.word	0x736c6974
    262c:	6372732f 	.word	0x6372732f
    2630:	6974752f 	.word	0x6974752f
    2634:	6c5f736c 	.word	0x6c5f736c
    2638:	2e747369 	.word	0x2e747369
    263c:	00000063 	.word	0x00000063
    2640:	682f2e2e 	.word	0x682f2e2e
    2644:	752f6c61 	.word	0x752f6c61
    2648:	736c6974 	.word	0x736c6974
    264c:	6372732f 	.word	0x6372732f
    2650:	6974752f 	.word	0x6974752f
    2654:	725f736c 	.word	0x725f736c
    2658:	62676e69 	.word	0x62676e69
    265c:	65666675 	.word	0x65666675
    2660:	00632e72 	.word	0x00632e72

00002664 <_adcs>:
    2664:	03000000 18030002 00000000 00000000     ................
	...
    2680:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2690:	632e6364 00000000                       dc.c....

00002698 <user_mux_confs>:
	...
    26b4:	00000001 00000000 00000000 00000000     ................
    26c4:	00000000                                ....

000026c8 <channel_confs>:
    26c8:	0000020d 00000000 00000000 00000000     ................
	...
    26e0:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    26f0:	632e6374 00000000                       tc.c....

000026f8 <_usarts>:
    26f8:	00000004 40310004 00030000 0000f62b     ......1@....+...
    2708:	00000000                                ....

0000270c <_i2cms>:
	...

00002724 <_i2css>:
	...

00002734 <sercomspi_regs>:
	...
    2748:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2758:	65735f6c 6d6f6372 0000632e 20434441     l_sercom.c..ADC 
    2768:	756c6156 25203a65 000a0d64              Value: %d...

00002774 <_global_impure_ptr>:
    2774:	20000008                                ... 

00002778 <__sf_fake_stderr>:
	...

00002798 <__sf_fake_stdin>:
	...

000027b8 <__sf_fake_stdout>:
	...
    27d8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    27e8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    27f8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2808:	00006665                                ef..

00