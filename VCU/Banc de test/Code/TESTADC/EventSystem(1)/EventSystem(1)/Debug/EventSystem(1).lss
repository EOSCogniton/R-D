
EventSystem(1).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002798  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  20000068  00002800  00020068  2**2
                  ALLOC
  3 .stack        00002004  20000114  000028ac  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023264  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a60  00000000  00000000  0004334d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000dfec  00000000  00000000  00046dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d10  00000000  00000000  00054d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d48  00000000  00000000  00055aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022d99  00000000  00000000  000567f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016015  00000000  00000000  0007958a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a1551  00000000  00000000  0008f59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027a4  00000000  00000000  00130af0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 21 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .!. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	7d 10 00 00 31 01 00 00 31 01 00 00 31 01 00 00     }...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 0d 0e 00 00 31 01 00 00     1...1.......1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000068 	.word	0x20000068
      dc:	00000000 	.word	0x00000000
      e0:	00002798 	.word	0x00002798

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000006c 	.word	0x2000006c
     110:	00002798 	.word	0x00002798
     114:	00002798 	.word	0x00002798
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	0000039d 	.word	0x0000039d
     12c:	000014a9 	.word	0x000014a9

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	00002798 	.word	0x00002798
     17c:	20000000 	.word	0x20000000
     180:	20000068 	.word	0x20000068
     184:	20000068 	.word	0x20000068
     188:	20000114 	.word	0x20000114
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	0000151d 	.word	0x0000151d
     198:	0000133d 	.word	0x0000133d

0000019c <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     1a0:	4a29      	ldr	r2, [pc, #164]	; (248 <ADC_0_init+0xac>)
     1a2:	69d1      	ldr	r1, [r2, #28]
     1a4:	2380      	movs	r3, #128	; 0x80
     1a6:	029b      	lsls	r3, r3, #10
     1a8:	430b      	orrs	r3, r1
     1aa:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1ac:	2141      	movs	r1, #65	; 0x41
     1ae:	2382      	movs	r3, #130	; 0x82
     1b0:	005b      	lsls	r3, r3, #1
     1b2:	4a26      	ldr	r2, [pc, #152]	; (24c <ADC_0_init+0xb0>)
     1b4:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_APBCMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], _adc_get_adc_async());
     1b6:	4b26      	ldr	r3, [pc, #152]	; (250 <ADC_0_init+0xb4>)
     1b8:	4798      	blx	r3
     1ba:	4d26      	ldr	r5, [pc, #152]	; (254 <ADC_0_init+0xb8>)
     1bc:	4e26      	ldr	r6, [pc, #152]	; (258 <ADC_0_init+0xbc>)
     1be:	9002      	str	r0, [sp, #8]
     1c0:	4b26      	ldr	r3, [pc, #152]	; (25c <ADC_0_init+0xc0>)
     1c2:	9301      	str	r3, [sp, #4]
     1c4:	2401      	movs	r4, #1
     1c6:	9400      	str	r4, [sp, #0]
     1c8:	2300      	movs	r3, #0
     1ca:	002a      	movs	r2, r5
     1cc:	4924      	ldr	r1, [pc, #144]	; (260 <ADC_0_init+0xc4>)
     1ce:	0030      	movs	r0, r6
     1d0:	4f24      	ldr	r7, [pc, #144]	; (264 <ADC_0_init+0xc8>)
     1d2:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     1d4:	1d2a      	adds	r2, r5, #4
     1d6:	2310      	movs	r3, #16
     1d8:	2100      	movs	r1, #0
     1da:	0030      	movs	r0, r6
     1dc:	4d22      	ldr	r5, [pc, #136]	; (268 <ADC_0_init+0xcc>)
     1de:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     1e0:	23c0      	movs	r3, #192	; 0xc0
     1e2:	05db      	lsls	r3, r3, #23
     1e4:	469c      	mov	ip, r3
     1e6:	2280      	movs	r2, #128	; 0x80
     1e8:	0092      	lsls	r2, r2, #2
     1ea:	2384      	movs	r3, #132	; 0x84
     1ec:	4661      	mov	r1, ip
     1ee:	50ca      	str	r2, [r1, r3]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1f0:	2382      	movs	r3, #130	; 0x82
     1f2:	05db      	lsls	r3, r3, #23
     1f4:	3a59      	subs	r2, #89	; 0x59
     1f6:	3aff      	subs	r2, #255	; 0xff
     1f8:	491c      	ldr	r1, [pc, #112]	; (26c <ADC_0_init+0xd0>)
     1fa:	5099      	str	r1, [r3, r2]
     1fc:	21c0      	movs	r1, #192	; 0xc0
     1fe:	0609      	lsls	r1, r1, #24
     200:	5099      	str	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     202:	20c9      	movs	r0, #201	; 0xc9
     204:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     206:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     208:	2701      	movs	r7, #1
     20a:	433a      	orrs	r2, r7
     20c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     20e:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     210:	22b4      	movs	r2, #180	; 0xb4
     212:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     214:	260f      	movs	r6, #15
     216:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
     218:	2510      	movs	r5, #16
     21a:	4328      	orrs	r0, r5
     21c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     21e:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     220:	3aac      	subs	r2, #172	; 0xac
     222:	4660      	mov	r0, ip
     224:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     226:	4a12      	ldr	r2, [pc, #72]	; (270 <ADC_0_init+0xd4>)
     228:	629a      	str	r2, [r3, #40]	; 0x28
     22a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     22c:	2243      	movs	r2, #67	; 0x43
     22e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     230:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     232:	4339      	orrs	r1, r7
     234:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     236:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     238:	2131      	movs	r1, #49	; 0x31
     23a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     23c:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
     23e:	432a      	orrs	r2, r5
     240:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     242:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA03, PINMUX_PA03B_ADC0_VREFP);
}
     244:	b005      	add	sp, #20
     246:	bdf0      	pop	{r4, r5, r6, r7, pc}
     248:	40000800 	.word	0x40000800
     24c:	40001c00 	.word	0x40001c00
     250:	00000e21 	.word	0x00000e21
     254:	20000084 	.word	0x20000084
     258:	200000c8 	.word	0x200000c8
     25c:	200000f4 	.word	0x200000f4
     260:	42004400 	.word	0x42004400
     264:	00000441 	.word	0x00000441
     268:	000004f5 	.word	0x000004f5
     26c:	40000200 	.word	0x40000200
     270:	40000008 	.word	0x40000008

00000274 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     274:	b570      	push	{r4, r5, r6, lr}
     276:	2141      	movs	r1, #65	; 0x41
     278:	2388      	movs	r3, #136	; 0x88
     27a:	4a14      	ldr	r2, [pc, #80]	; (2cc <EXTERNAL_IRQ_0_init+0x58>)
     27c:	50d1      	str	r1, [r2, r3]
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     27e:	4a14      	ldr	r2, [pc, #80]	; (2d0 <EXTERNAL_IRQ_0_init+0x5c>)
     280:	6951      	ldr	r1, [r2, #20]
     282:	2380      	movs	r3, #128	; 0x80
     284:	00db      	lsls	r3, r3, #3
     286:	430b      	orrs	r3, r1
     288:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     28a:	20c0      	movs	r0, #192	; 0xc0
     28c:	05c0      	lsls	r0, r0, #23
     28e:	2480      	movs	r4, #128	; 0x80
     290:	0564      	lsls	r4, r4, #21
     292:	6044      	str	r4, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     294:	2382      	movs	r3, #130	; 0x82
     296:	05db      	lsls	r3, r3, #23
     298:	4a0e      	ldr	r2, [pc, #56]	; (2d4 <EXTERNAL_IRQ_0_init+0x60>)
     29a:	629a      	str	r2, [r3, #40]	; 0x28
     29c:	4a0e      	ldr	r2, [pc, #56]	; (2d8 <EXTERNAL_IRQ_0_init+0x64>)
     29e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2a0:	6044      	str	r4, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2a2:	215c      	movs	r1, #92	; 0x5c
     2a4:	5c5a      	ldrb	r2, [r3, r1]
     2a6:	2504      	movs	r5, #4
     2a8:	432a      	orrs	r2, r5
     2aa:	b2d2      	uxtb	r2, r2
     2ac:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2ae:	6184      	str	r4, [r0, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b2:	2001      	movs	r0, #1
     2b4:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b6:	4302      	orrs	r2, r0
     2b8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2ba:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2bc:	391e      	subs	r1, #30
     2be:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2c0:	200f      	movs	r0, #15
     2c2:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2c4:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(BUTTON, PINMUX_PA28A_EIC_EXTINT8);

	ext_irq_init();
     2c6:	4b05      	ldr	r3, [pc, #20]	; (2dc <EXTERNAL_IRQ_0_init+0x68>)
     2c8:	4798      	blx	r3
}
     2ca:	bd70      	pop	{r4, r5, r6, pc}
     2cc:	40001c00 	.word	0x40001c00
     2d0:	40000800 	.word	0x40000800
     2d4:	40020000 	.word	0x40020000
     2d8:	c0021000 	.word	0xc0021000
     2dc:	000007ad 	.word	0x000007ad

000002e0 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     2e0:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2e2:	2382      	movs	r3, #130	; 0x82
     2e4:	05db      	lsls	r3, r3, #23
     2e6:	22ca      	movs	r2, #202	; 0xca
     2e8:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ea:	2501      	movs	r5, #1
     2ec:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2ee:	2401      	movs	r4, #1
     2f0:	4321      	orrs	r1, r4
     2f2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2f4:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2f6:	20b5      	movs	r0, #181	; 0xb5
     2f8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2fa:	3abb      	subs	r2, #187	; 0xbb
     2fc:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2fe:	2203      	movs	r2, #3
     300:	4311      	orrs	r1, r2
     302:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     304:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     306:	21cb      	movs	r1, #203	; 0xcb
     308:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     30a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     30c:	4322      	orrs	r2, r4
     30e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     310:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     312:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     314:	39bc      	subs	r1, #188	; 0xbc
     316:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     318:	2130      	movs	r1, #48	; 0x30
     31a:	430a      	orrs	r2, r1
     31c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     31e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     320:	bd30      	pop	{r4, r5, pc}
	...

00000324 <TARGET_IO_CLOCK_init>:
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <TARGET_IO_CLOCK_init+0x1c>)
     326:	2140      	movs	r1, #64	; 0x40
     328:	22dc      	movs	r2, #220	; 0xdc
     32a:	5099      	str	r1, [r3, r2]
     32c:	3101      	adds	r1, #1
     32e:	3a14      	subs	r2, #20
     330:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     332:	4a04      	ldr	r2, [pc, #16]	; (344 <TARGET_IO_CLOCK_init+0x20>)
     334:	69d3      	ldr	r3, [r2, #28]
     336:	3921      	subs	r1, #33	; 0x21
     338:	430b      	orrs	r3, r1
     33a:	61d3      	str	r3, [r2, #28]
void TARGET_IO_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     33c:	4770      	bx	lr
     33e:	46c0      	nop			; (mov r8, r8)
     340:	40001c00 	.word	0x40001c00
     344:	40000800 	.word	0x40000800

00000348 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     348:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <TARGET_IO_init+0x18>)
     34c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     34e:	2200      	movs	r2, #0
     350:	4904      	ldr	r1, [pc, #16]	; (364 <TARGET_IO_init+0x1c>)
     352:	4805      	ldr	r0, [pc, #20]	; (368 <TARGET_IO_init+0x20>)
     354:	4b05      	ldr	r3, [pc, #20]	; (36c <TARGET_IO_init+0x24>)
     356:	4798      	blx	r3
	TARGET_IO_PORT_init();
     358:	4b05      	ldr	r3, [pc, #20]	; (370 <TARGET_IO_init+0x28>)
     35a:	4798      	blx	r3
}
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00000325 	.word	0x00000325
     364:	42001400 	.word	0x42001400
     368:	200000bc 	.word	0x200000bc
     36c:	00000931 	.word	0x00000931
     370:	000002e1 	.word	0x000002e1

00000374 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     374:	b510      	push	{r4, lr}
     376:	2140      	movs	r1, #64	; 0x40
     378:	2398      	movs	r3, #152	; 0x98
     37a:	4a05      	ldr	r2, [pc, #20]	; (390 <EVENT_SYSTEM_0_init+0x1c>)
     37c:	50d1      	str	r1, [r2, r3]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_EVSYS;
     37e:	4a05      	ldr	r2, [pc, #20]	; (394 <EVENT_SYSTEM_0_init+0x20>)
     380:	69d3      	ldr	r3, [r2, #28]
     382:	393f      	subs	r1, #63	; 0x3f
     384:	430b      	orrs	r3, r1
     386:	61d3      	str	r3, [r2, #28]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_EVSYS_bit(MCLK);

	event_system_init();
     388:	4b03      	ldr	r3, [pc, #12]	; (398 <EVENT_SYSTEM_0_init+0x24>)
     38a:	4798      	blx	r3
}
     38c:	bd10      	pop	{r4, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	40001c00 	.word	0x40001c00
     394:	40000800 	.word	0x40000800
     398:	0000075d 	.word	0x0000075d

0000039c <system_init>:

void system_init(void)
{
     39c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     39e:	4b05      	ldr	r3, [pc, #20]	; (3b4 <system_init+0x18>)
     3a0:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     3a2:	4b05      	ldr	r3, [pc, #20]	; (3b8 <system_init+0x1c>)
     3a4:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     3a6:	4b05      	ldr	r3, [pc, #20]	; (3bc <system_init+0x20>)
     3a8:	4798      	blx	r3

	TARGET_IO_init();
     3aa:	4b05      	ldr	r3, [pc, #20]	; (3c0 <system_init+0x24>)
     3ac:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <system_init+0x28>)
     3b0:	4798      	blx	r3
}
     3b2:	bd10      	pop	{r4, pc}
     3b4:	00000e25 	.word	0x00000e25
     3b8:	0000019d 	.word	0x0000019d
     3bc:	00000275 	.word	0x00000275
     3c0:	00000349 	.word	0x00000349
     3c4:	00000375 	.word	0x00000375

000003c8 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     3c8:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     3ca:	6983      	ldr	r3, [r0, #24]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d000      	beq.n	3d2 <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     3d0:	4798      	blx	r3
	}
}
     3d2:	bd10      	pop	{r4, pc}

000003d4 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     3d4:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     3d6:	69c3      	ldr	r3, [r0, #28]
     3d8:	2b00      	cmp	r3, #0
     3da:	d000      	beq.n	3de <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     3dc:	4798      	blx	r3
	}
}
     3de:	bd10      	pop	{r4, pc}

000003e0 <adc_async_channel_conversion_done>:
{
     3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3e2:	b083      	sub	sp, #12
     3e4:	0005      	movs	r5, r0
     3e6:	000e      	movs	r6, r1
     3e8:	0011      	movs	r1, r2
	uint8_t                              index    = descr->channel_map[channel];
     3ea:	6a03      	ldr	r3, [r0, #32]
     3ec:	5d9a      	ldrb	r2, [r3, r6]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     3ee:	0053      	lsls	r3, r2, #1
     3f0:	189b      	adds	r3, r3, r2
     3f2:	00dc      	lsls	r4, r3, #3
     3f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
     3f6:	469c      	mov	ip, r3
     3f8:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     3fa:	1d27      	adds	r7, r4, #4
     3fc:	9101      	str	r1, [sp, #4]
     3fe:	466b      	mov	r3, sp
     400:	7919      	ldrb	r1, [r3, #4]
     402:	0038      	movs	r0, r7
     404:	4b0c      	ldr	r3, [pc, #48]	; (438 <adc_async_channel_conversion_done+0x58>)
     406:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     408:	0028      	movs	r0, r5
     40a:	4b0c      	ldr	r3, [pc, #48]	; (43c <adc_async_channel_conversion_done+0x5c>)
     40c:	4798      	blx	r3
     40e:	2801      	cmp	r0, #1
     410:	d907      	bls.n	422 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     412:	9b01      	ldr	r3, [sp, #4]
     414:	0a19      	lsrs	r1, r3, #8
     416:	0038      	movs	r0, r7
     418:	4b07      	ldr	r3, [pc, #28]	; (438 <adc_async_channel_conversion_done+0x58>)
     41a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     41c:	8aa3      	ldrh	r3, [r4, #20]
     41e:	3301      	adds	r3, #1
     420:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     422:	8aa3      	ldrh	r3, [r4, #20]
     424:	3301      	adds	r3, #1
     426:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     428:	6823      	ldr	r3, [r4, #0]
     42a:	2b00      	cmp	r3, #0
     42c:	d002      	beq.n	434 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     42e:	0031      	movs	r1, r6
     430:	0028      	movs	r0, r5
     432:	4798      	blx	r3
}
     434:	b003      	add	sp, #12
     436:	bdf0      	pop	{r4, r5, r6, r7, pc}
     438:	00000a49 	.word	0x00000a49
     43c:	00000db9 	.word	0x00000db9

00000440 <adc_async_init>:
{
     440:	b5f0      	push	{r4, r5, r6, r7, lr}
     442:	46d6      	mov	lr, sl
     444:	b500      	push	{lr}
     446:	b082      	sub	sp, #8
     448:	0005      	movs	r5, r0
     44a:	9101      	str	r1, [sp, #4]
     44c:	0016      	movs	r6, r2
     44e:	001c      	movs	r4, r3
     450:	ab08      	add	r3, sp, #32
     452:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     454:	2800      	cmp	r0, #0
     456:	d00c      	beq.n	472 <adc_async_init+0x32>
     458:	2900      	cmp	r1, #0
     45a:	d00c      	beq.n	476 <adc_async_init+0x36>
     45c:	2a00      	cmp	r2, #0
     45e:	d00c      	beq.n	47a <adc_async_init+0x3a>
     460:	2f00      	cmp	r7, #0
     462:	d00c      	beq.n	47e <adc_async_init+0x3e>
     464:	9b09      	ldr	r3, [sp, #36]	; 0x24
     466:	2b00      	cmp	r3, #0
     468:	d001      	beq.n	46e <adc_async_init+0x2e>
     46a:	2001      	movs	r0, #1
     46c:	e008      	b.n	480 <adc_async_init+0x40>
     46e:	2000      	movs	r0, #0
     470:	e006      	b.n	480 <adc_async_init+0x40>
     472:	2000      	movs	r0, #0
     474:	e004      	b.n	480 <adc_async_init+0x40>
     476:	2000      	movs	r0, #0
     478:	e002      	b.n	480 <adc_async_init+0x40>
     47a:	2000      	movs	r0, #0
     47c:	e000      	b.n	480 <adc_async_init+0x40>
     47e:	2000      	movs	r0, #0
     480:	223f      	movs	r2, #63	; 0x3f
     482:	4916      	ldr	r1, [pc, #88]	; (4dc <adc_async_init+0x9c>)
     484:	4b16      	ldr	r3, [pc, #88]	; (4e0 <adc_async_init+0xa0>)
     486:	469a      	mov	sl, r3
     488:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     48a:	1c62      	adds	r2, r4, #1
     48c:	0ffb      	lsrs	r3, r7, #31
     48e:	17d0      	asrs	r0, r2, #31
     490:	42ba      	cmp	r2, r7
     492:	4158      	adcs	r0, r3
     494:	b2c0      	uxtb	r0, r0
     496:	2240      	movs	r2, #64	; 0x40
     498:	4910      	ldr	r1, [pc, #64]	; (4dc <adc_async_init+0x9c>)
     49a:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     49c:	2300      	movs	r3, #0
     49e:	e003      	b.n	4a8 <adc_async_init+0x68>
		channel_map[i] = 0xFF;
     4a0:	22ff      	movs	r2, #255	; 0xff
     4a2:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     4a4:	3301      	adds	r3, #1
     4a6:	b2db      	uxtb	r3, r3
     4a8:	42a3      	cmp	r3, r4
     4aa:	d9f9      	bls.n	4a0 <adc_async_init+0x60>
	descr->channel_map    = channel_map;
     4ac:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     4ae:	2324      	movs	r3, #36	; 0x24
     4b0:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     4b2:	3301      	adds	r3, #1
     4b4:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4b8:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     4ba:	9901      	ldr	r1, [sp, #4]
     4bc:	0028      	movs	r0, r5
     4be:	4b09      	ldr	r3, [pc, #36]	; (4e4 <adc_async_init+0xa4>)
     4c0:	4798      	blx	r3
	if (init_status) {
     4c2:	2800      	cmp	r0, #0
     4c4:	d105      	bne.n	4d2 <adc_async_init+0x92>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     4c6:	4b08      	ldr	r3, [pc, #32]	; (4e8 <adc_async_init+0xa8>)
     4c8:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     4ca:	4b08      	ldr	r3, [pc, #32]	; (4ec <adc_async_init+0xac>)
     4cc:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     4ce:	4b08      	ldr	r3, [pc, #32]	; (4f0 <adc_async_init+0xb0>)
     4d0:	606b      	str	r3, [r5, #4]
}
     4d2:	b002      	add	sp, #8
     4d4:	bc04      	pop	{r2}
     4d6:	4692      	mov	sl, r2
     4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	00002558 	.word	0x00002558
     4e0:	000009a9 	.word	0x000009a9
     4e4:	00000d01 	.word	0x00000d01
     4e8:	000003e1 	.word	0x000003e1
     4ec:	000003c9 	.word	0x000003c9
     4f0:	000003d5 	.word	0x000003d5

000004f4 <adc_async_register_channel_buffer>:
{
     4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f6:	b083      	sub	sp, #12
     4f8:	0007      	movs	r7, r0
     4fa:	000c      	movs	r4, r1
     4fc:	9200      	str	r2, [sp, #0]
     4fe:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     500:	2800      	cmp	r0, #0
     502:	d019      	beq.n	538 <adc_async_register_channel_buffer+0x44>
     504:	2a00      	cmp	r2, #0
     506:	d019      	beq.n	53c <adc_async_register_channel_buffer+0x48>
     508:	2b00      	cmp	r3, #0
     50a:	d119      	bne.n	540 <adc_async_register_channel_buffer+0x4c>
     50c:	2000      	movs	r0, #0
     50e:	4e24      	ldr	r6, [pc, #144]	; (5a0 <adc_async_register_channel_buffer+0xac>)
     510:	2266      	movs	r2, #102	; 0x66
     512:	0031      	movs	r1, r6
     514:	4d23      	ldr	r5, [pc, #140]	; (5a4 <adc_async_register_channel_buffer+0xb0>)
     516:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     518:	2324      	movs	r3, #36	; 0x24
     51a:	5cfb      	ldrb	r3, [r7, r3]
     51c:	2000      	movs	r0, #0
     51e:	42a3      	cmp	r3, r4
     520:	4140      	adcs	r0, r0
     522:	b2c0      	uxtb	r0, r0
     524:	2267      	movs	r2, #103	; 0x67
     526:	0031      	movs	r1, r6
     528:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     52a:	6a39      	ldr	r1, [r7, #32]
     52c:	5d0b      	ldrb	r3, [r1, r4]
     52e:	2bff      	cmp	r3, #255	; 0xff
     530:	d12c      	bne.n	58c <adc_async_register_channel_buffer+0x98>
     532:	2600      	movs	r6, #0
     534:	2300      	movs	r3, #0
     536:	e007      	b.n	548 <adc_async_register_channel_buffer+0x54>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     538:	2000      	movs	r0, #0
     53a:	e7e8      	b.n	50e <adc_async_register_channel_buffer+0x1a>
     53c:	2000      	movs	r0, #0
     53e:	e7e6      	b.n	50e <adc_async_register_channel_buffer+0x1a>
     540:	2001      	movs	r0, #1
     542:	e7e4      	b.n	50e <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     544:	3301      	adds	r3, #1
     546:	b2db      	uxtb	r3, r3
     548:	2224      	movs	r2, #36	; 0x24
     54a:	5cba      	ldrb	r2, [r7, r2]
     54c:	4293      	cmp	r3, r2
     54e:	d805      	bhi.n	55c <adc_async_register_channel_buffer+0x68>
		if (descr->channel_map[i] != 0xFF) {
     550:	5cca      	ldrb	r2, [r1, r3]
     552:	2aff      	cmp	r2, #255	; 0xff
     554:	d0f6      	beq.n	544 <adc_async_register_channel_buffer+0x50>
			index++;
     556:	3601      	adds	r6, #1
     558:	b2f6      	uxtb	r6, r6
     55a:	e7f3      	b.n	544 <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     55c:	2325      	movs	r3, #37	; 0x25
     55e:	5cfb      	ldrb	r3, [r7, r3]
     560:	429e      	cmp	r6, r3
     562:	d816      	bhi.n	592 <adc_async_register_channel_buffer+0x9e>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     564:	0073      	lsls	r3, r6, #1
     566:	199b      	adds	r3, r3, r6
     568:	00dd      	lsls	r5, r3, #3
     56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     56c:	1958      	adds	r0, r3, r5
     56e:	3004      	adds	r0, #4
     570:	9a01      	ldr	r2, [sp, #4]
     572:	9900      	ldr	r1, [sp, #0]
     574:	4b0c      	ldr	r3, [pc, #48]	; (5a8 <adc_async_register_channel_buffer+0xb4>)
     576:	4798      	blx	r3
     578:	2800      	cmp	r0, #0
     57a:	d10d      	bne.n	598 <adc_async_register_channel_buffer+0xa4>
	descr->channel_map[channel]            = index;
     57c:	6a3b      	ldr	r3, [r7, #32]
     57e:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     580:	6abb      	ldr	r3, [r7, #40]	; 0x28
     582:	195b      	adds	r3, r3, r5
     584:	2200      	movs	r2, #0
     586:	829a      	strh	r2, [r3, #20]
}
     588:	b003      	add	sp, #12
     58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     58c:	200d      	movs	r0, #13
     58e:	4240      	negs	r0, r0
     590:	e7fa      	b.n	588 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
     592:	201c      	movs	r0, #28
     594:	4240      	negs	r0, r0
     596:	e7f7      	b.n	588 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
     598:	200d      	movs	r0, #13
     59a:	4240      	negs	r0, r0
     59c:	e7f4      	b.n	588 <adc_async_register_channel_buffer+0x94>
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	00002558 	.word	0x00002558
     5a4:	000009a9 	.word	0x000009a9
     5a8:	000009b1 	.word	0x000009b1

000005ac <adc_async_enable_channel>:
{
     5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5ae:	0006      	movs	r6, r0
     5b0:	000c      	movs	r4, r1
	ASSERT(descr);
     5b2:	4d0b      	ldr	r5, [pc, #44]	; (5e0 <adc_async_enable_channel+0x34>)
     5b4:	1e43      	subs	r3, r0, #1
     5b6:	4198      	sbcs	r0, r3
     5b8:	b2c0      	uxtb	r0, r0
     5ba:	2283      	movs	r2, #131	; 0x83
     5bc:	0029      	movs	r1, r5
     5be:	4f09      	ldr	r7, [pc, #36]	; (5e4 <adc_async_enable_channel+0x38>)
     5c0:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     5c2:	2324      	movs	r3, #36	; 0x24
     5c4:	5cf3      	ldrb	r3, [r6, r3]
     5c6:	2000      	movs	r0, #0
     5c8:	42a3      	cmp	r3, r4
     5ca:	4140      	adcs	r0, r0
     5cc:	b2c0      	uxtb	r0, r0
     5ce:	2284      	movs	r2, #132	; 0x84
     5d0:	0029      	movs	r1, r5
     5d2:	47b8      	blx	r7
	_adc_async_enable_channel(&descr->device, channel);
     5d4:	0021      	movs	r1, r4
     5d6:	0030      	movs	r0, r6
     5d8:	4b03      	ldr	r3, [pc, #12]	; (5e8 <adc_async_enable_channel+0x3c>)
     5da:	4798      	blx	r3
}
     5dc:	2000      	movs	r0, #0
     5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5e0:	00002558 	.word	0x00002558
     5e4:	000009a9 	.word	0x000009a9
     5e8:	00000da5 	.word	0x00000da5

000005ec <adc_async_register_callback>:
{
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	46ce      	mov	lr, r9
     5f0:	b500      	push	{lr}
     5f2:	0004      	movs	r4, r0
     5f4:	000d      	movs	r5, r1
     5f6:	0017      	movs	r7, r2
     5f8:	001e      	movs	r6, r3
	ASSERT(descr);
     5fa:	1e43      	subs	r3, r0, #1
     5fc:	4198      	sbcs	r0, r3
     5fe:	b2c0      	uxtb	r0, r0
     600:	229c      	movs	r2, #156	; 0x9c
     602:	4916      	ldr	r1, [pc, #88]	; (65c <adc_async_register_callback+0x70>)
     604:	4b16      	ldr	r3, [pc, #88]	; (660 <adc_async_register_callback+0x74>)
     606:	4699      	mov	r9, r3
     608:	4798      	blx	r3
	ASSERT(descr->channel_max >= channel);
     60a:	2324      	movs	r3, #36	; 0x24
     60c:	5ce3      	ldrb	r3, [r4, r3]
     60e:	2000      	movs	r0, #0
     610:	42ab      	cmp	r3, r5
     612:	4140      	adcs	r0, r0
     614:	b2c0      	uxtb	r0, r0
     616:	229d      	movs	r2, #157	; 0x9d
     618:	4910      	ldr	r1, [pc, #64]	; (65c <adc_async_register_callback+0x70>)
     61a:	47c8      	blx	r9
	uint8_t index = descr->channel_map[channel];
     61c:	6a23      	ldr	r3, [r4, #32]
     61e:	5d5b      	ldrb	r3, [r3, r5]
	switch (type) {
     620:	2f01      	cmp	r7, #1
     622:	d017      	beq.n	654 <adc_async_register_callback+0x68>
     624:	2f00      	cmp	r7, #0
     626:	d004      	beq.n	632 <adc_async_register_callback+0x46>
     628:	2f02      	cmp	r7, #2
     62a:	d015      	beq.n	658 <adc_async_register_callback+0x6c>
		return ERR_INVALID_ARG;
     62c:	200d      	movs	r0, #13
     62e:	4240      	negs	r0, r0
     630:	e00d      	b.n	64e <adc_async_register_callback+0x62>
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
     632:	005a      	lsls	r2, r3, #1
     634:	18d3      	adds	r3, r2, r3
     636:	00da      	lsls	r2, r3, #3
     638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     63a:	509e      	str	r6, [r3, r2]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
     63c:	1e73      	subs	r3, r6, #1
     63e:	419e      	sbcs	r6, r3
     640:	b2f3      	uxtb	r3, r6
     642:	003a      	movs	r2, r7
     644:	0029      	movs	r1, r5
     646:	0020      	movs	r0, r4
     648:	4c06      	ldr	r4, [pc, #24]	; (664 <adc_async_register_callback+0x78>)
     64a:	47a0      	blx	r4
	return ERR_NONE;
     64c:	2000      	movs	r0, #0
}
     64e:	bc04      	pop	{r2}
     650:	4691      	mov	r9, r2
     652:	bdf0      	pop	{r4, r5, r6, r7, pc}
		descr->adc_async_cb.monitor = cb;
     654:	61a6      	str	r6, [r4, #24]
		break;
     656:	e7f1      	b.n	63c <adc_async_register_callback+0x50>
		descr->adc_async_cb.error = cb;
     658:	61e6      	str	r6, [r4, #28]
		break;
     65a:	e7ef      	b.n	63c <adc_async_register_callback+0x50>
     65c:	00002558 	.word	0x00002558
     660:	000009a9 	.word	0x000009a9
     664:	00000dcf 	.word	0x00000dcf

00000668 <adc_async_read_channel>:
{
     668:	b5f0      	push	{r4, r5, r6, r7, lr}
     66a:	46ce      	mov	lr, r9
     66c:	4647      	mov	r7, r8
     66e:	b580      	push	{r7, lr}
     670:	b083      	sub	sp, #12
     672:	0005      	movs	r5, r0
     674:	000c      	movs	r4, r1
     676:	4690      	mov	r8, r2
     678:	001e      	movs	r6, r3
	ASSERT(descr && buffer && length);
     67a:	2800      	cmp	r0, #0
     67c:	d034      	beq.n	6e8 <adc_async_read_channel+0x80>
     67e:	2a00      	cmp	r2, #0
     680:	d034      	beq.n	6ec <adc_async_read_channel+0x84>
     682:	2e00      	cmp	r6, #0
     684:	d134      	bne.n	6f0 <adc_async_read_channel+0x88>
     686:	2000      	movs	r0, #0
     688:	22bc      	movs	r2, #188	; 0xbc
     68a:	4925      	ldr	r1, [pc, #148]	; (720 <adc_async_read_channel+0xb8>)
     68c:	4f25      	ldr	r7, [pc, #148]	; (724 <adc_async_read_channel+0xbc>)
     68e:	47b8      	blx	r7
	ASSERT(descr->channel_max >= channel);
     690:	2324      	movs	r3, #36	; 0x24
     692:	5ceb      	ldrb	r3, [r5, r3]
     694:	2000      	movs	r0, #0
     696:	42a3      	cmp	r3, r4
     698:	4140      	adcs	r0, r0
     69a:	b2c0      	uxtb	r0, r0
     69c:	22bd      	movs	r2, #189	; 0xbd
     69e:	4920      	ldr	r1, [pc, #128]	; (720 <adc_async_read_channel+0xb8>)
     6a0:	47b8      	blx	r7
	data_size = _adc_async_get_data_size(&descr->device);
     6a2:	0028      	movs	r0, r5
     6a4:	4b20      	ldr	r3, [pc, #128]	; (728 <adc_async_read_channel+0xc0>)
     6a6:	4798      	blx	r3
     6a8:	0001      	movs	r1, r0
	ASSERT(!(length % data_size));
     6aa:	0030      	movs	r0, r6
     6ac:	4b1f      	ldr	r3, [pc, #124]	; (72c <adc_async_read_channel+0xc4>)
     6ae:	4798      	blx	r3
     6b0:	4248      	negs	r0, r1
     6b2:	4148      	adcs	r0, r1
     6b4:	b2c0      	uxtb	r0, r0
     6b6:	22bf      	movs	r2, #191	; 0xbf
     6b8:	4919      	ldr	r1, [pc, #100]	; (720 <adc_async_read_channel+0xb8>)
     6ba:	47b8      	blx	r7
	index                                         = descr->channel_map[channel];
     6bc:	6a2b      	ldr	r3, [r5, #32]
     6be:	5d1a      	ldrb	r2, [r3, r4]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     6c0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     6c2:	0053      	lsls	r3, r2, #1
     6c4:	189b      	adds	r3, r3, r2
     6c6:	00da      	lsls	r2, r3, #3
     6c8:	4689      	mov	r9, r1
     6ca:	4491      	add	r9, r2
	CRITICAL_SECTION_ENTER()
     6cc:	a801      	add	r0, sp, #4
     6ce:	4b18      	ldr	r3, [pc, #96]	; (730 <adc_async_read_channel+0xc8>)
     6d0:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
     6d2:	464b      	mov	r3, r9
     6d4:	1d1d      	adds	r5, r3, #4
     6d6:	0028      	movs	r0, r5
     6d8:	4b16      	ldr	r3, [pc, #88]	; (734 <adc_async_read_channel+0xcc>)
     6da:	4798      	blx	r3
     6dc:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     6de:	a801      	add	r0, sp, #4
     6e0:	4b15      	ldr	r3, [pc, #84]	; (738 <adc_async_read_channel+0xd0>)
     6e2:	4798      	blx	r3
	uint16_t was_read = 0;
     6e4:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     6e6:	e00b      	b.n	700 <adc_async_read_channel+0x98>
	ASSERT(descr && buffer && length);
     6e8:	2000      	movs	r0, #0
     6ea:	e7cd      	b.n	688 <adc_async_read_channel+0x20>
     6ec:	2000      	movs	r0, #0
     6ee:	e7cb      	b.n	688 <adc_async_read_channel+0x20>
     6f0:	2001      	movs	r0, #1
     6f2:	e7c9      	b.n	688 <adc_async_read_channel+0x20>
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
     6f4:	3401      	adds	r4, #1
     6f6:	b2a4      	uxth	r4, r4
     6f8:	4441      	add	r1, r8
     6fa:	0028      	movs	r0, r5
     6fc:	4b0f      	ldr	r3, [pc, #60]	; (73c <adc_async_read_channel+0xd4>)
     6fe:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     700:	0021      	movs	r1, r4
     702:	42a7      	cmp	r7, r4
     704:	d901      	bls.n	70a <adc_async_read_channel+0xa2>
     706:	42b4      	cmp	r4, r6
     708:	d3f4      	bcc.n	6f4 <adc_async_read_channel+0x8c>
	descr_ch->bytes_in_buffer -= was_read;
     70a:	464b      	mov	r3, r9
     70c:	8a9b      	ldrh	r3, [r3, #20]
     70e:	1b1b      	subs	r3, r3, r4
     710:	464a      	mov	r2, r9
     712:	8293      	strh	r3, [r2, #20]
}
     714:	0020      	movs	r0, r4
     716:	b003      	add	sp, #12
     718:	bc0c      	pop	{r2, r3}
     71a:	4690      	mov	r8, r2
     71c:	4699      	mov	r9, r3
     71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     720:	00002558 	.word	0x00002558
     724:	000009a9 	.word	0x000009a9
     728:	00000db9 	.word	0x00000db9
     72c:	00000ea9 	.word	0x00000ea9
     730:	00000741 	.word	0x00000741
     734:	00000a89 	.word	0x00000a89
     738:	0000074f 	.word	0x0000074f
     73c:	000009fd 	.word	0x000009fd

00000740 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     740:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     744:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     746:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     748:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     74c:	4770      	bx	lr

0000074e <atomic_leave_critical>:
     74e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     752:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     754:	f383 8810 	msr	PRIMASK, r3
}
     758:	4770      	bx	lr
	...

0000075c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     75c:	b510      	push	{r4, lr}
	return _event_system_init();
     75e:	4b01      	ldr	r3, [pc, #4]	; (764 <event_system_init+0x8>)
     760:	4798      	blx	r3
}
     762:	bd10      	pop	{r4, pc}
     764:	00001089 	.word	0x00001089

00000768 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     768:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     76a:	2501      	movs	r5, #1
     76c:	2400      	movs	r4, #0

	while (upper >= lower) {
     76e:	e007      	b.n	780 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     770:	4a0d      	ldr	r2, [pc, #52]	; (7a8 <process_ext_irq+0x40>)
     772:	58b3      	ldr	r3, [r6, r2]
     774:	2b00      	cmp	r3, #0
     776:	d000      	beq.n	77a <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     778:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     77a:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     77c:	3a01      	subs	r2, #1
     77e:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     780:	42ac      	cmp	r4, r5
     782:	d8fa      	bhi.n	77a <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     784:	192b      	adds	r3, r5, r4
     786:	105b      	asrs	r3, r3, #1
     788:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     78a:	2a00      	cmp	r2, #0
     78c:	d1f5      	bne.n	77a <process_ext_irq+0x12>
     78e:	21ff      	movs	r1, #255	; 0xff
     790:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     792:	00de      	lsls	r6, r3, #3
     794:	4904      	ldr	r1, [pc, #16]	; (7a8 <process_ext_irq+0x40>)
     796:	1989      	adds	r1, r1, r6
     798:	6849      	ldr	r1, [r1, #4]
     79a:	4281      	cmp	r1, r0
     79c:	d0e8      	beq.n	770 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     79e:	d2ed      	bcs.n	77c <process_ext_irq+0x14>
			lower = middle + 1;
     7a0:	3201      	adds	r2, #1
     7a2:	b2d4      	uxtb	r4, r2
     7a4:	e7ec      	b.n	780 <process_ext_irq+0x18>
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	20000098 	.word	0x20000098

000007ac <ext_irq_init>:
{
     7ac:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     7ae:	2300      	movs	r3, #0
     7b0:	2b00      	cmp	r3, #0
     7b2:	d003      	beq.n	7bc <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     7b4:	4807      	ldr	r0, [pc, #28]	; (7d4 <ext_irq_init+0x28>)
     7b6:	4b08      	ldr	r3, [pc, #32]	; (7d8 <ext_irq_init+0x2c>)
     7b8:	4798      	blx	r3
}
     7ba:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     7bc:	4a07      	ldr	r2, [pc, #28]	; (7dc <ext_irq_init+0x30>)
     7be:	00d9      	lsls	r1, r3, #3
     7c0:	1850      	adds	r0, r2, r1
     7c2:	2401      	movs	r4, #1
     7c4:	4264      	negs	r4, r4
     7c6:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     7c8:	2000      	movs	r0, #0
     7ca:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     7cc:	3301      	adds	r3, #1
     7ce:	b29b      	uxth	r3, r3
     7d0:	e7ee      	b.n	7b0 <ext_irq_init+0x4>
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000769 	.word	0x00000769
     7d8:	00000fd1 	.word	0x00000fd1
     7dc:	20000098 	.word	0x20000098

000007e0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7e0:	b570      	push	{r4, r5, r6, lr}
     7e2:	0004      	movs	r4, r0
     7e4:	000d      	movs	r5, r1
     7e6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     7e8:	2800      	cmp	r0, #0
     7ea:	d00e      	beq.n	80a <io_write+0x2a>
     7ec:	2900      	cmp	r1, #0
     7ee:	d00a      	beq.n	806 <io_write+0x26>
     7f0:	2001      	movs	r0, #1
     7f2:	2234      	movs	r2, #52	; 0x34
     7f4:	4906      	ldr	r1, [pc, #24]	; (810 <io_write+0x30>)
     7f6:	4b07      	ldr	r3, [pc, #28]	; (814 <io_write+0x34>)
     7f8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     7fa:	6823      	ldr	r3, [r4, #0]
     7fc:	0032      	movs	r2, r6
     7fe:	0029      	movs	r1, r5
     800:	0020      	movs	r0, r4
     802:	4798      	blx	r3
}
     804:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     806:	2000      	movs	r0, #0
     808:	e7f3      	b.n	7f2 <io_write+0x12>
     80a:	2000      	movs	r0, #0
     80c:	e7f1      	b.n	7f2 <io_write+0x12>
     80e:	46c0      	nop			; (mov r8, r8)
     810:	00002574 	.word	0x00002574
     814:	000009a9 	.word	0x000009a9

00000818 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     818:	b570      	push	{r4, r5, r6, lr}
     81a:	0004      	movs	r4, r0
     81c:	000d      	movs	r5, r1
     81e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     820:	2800      	cmp	r0, #0
     822:	d00e      	beq.n	842 <io_read+0x2a>
     824:	2900      	cmp	r1, #0
     826:	d00a      	beq.n	83e <io_read+0x26>
     828:	2001      	movs	r0, #1
     82a:	223d      	movs	r2, #61	; 0x3d
     82c:	4906      	ldr	r1, [pc, #24]	; (848 <io_read+0x30>)
     82e:	4b07      	ldr	r3, [pc, #28]	; (84c <io_read+0x34>)
     830:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     832:	6863      	ldr	r3, [r4, #4]
     834:	0032      	movs	r2, r6
     836:	0029      	movs	r1, r5
     838:	0020      	movs	r0, r4
     83a:	4798      	blx	r3
}
     83c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     83e:	2000      	movs	r0, #0
     840:	e7f3      	b.n	82a <io_read+0x12>
     842:	2000      	movs	r0, #0
     844:	e7f1      	b.n	82a <io_read+0x12>
     846:	46c0      	nop			; (mov r8, r8)
     848:	00002574 	.word	0x00002574
     84c:	000009a9 	.word	0x000009a9

00000850 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     852:	0005      	movs	r5, r0
     854:	000e      	movs	r6, r1
     856:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     858:	2800      	cmp	r0, #0
     85a:	d023      	beq.n	8a4 <usart_sync_write+0x54>
     85c:	2900      	cmp	r1, #0
     85e:	d023      	beq.n	8a8 <usart_sync_write+0x58>
     860:	2a00      	cmp	r2, #0
     862:	d123      	bne.n	8ac <usart_sync_write+0x5c>
     864:	2000      	movs	r0, #0
     866:	22f1      	movs	r2, #241	; 0xf1
     868:	4911      	ldr	r1, [pc, #68]	; (8b0 <usart_sync_write+0x60>)
     86a:	4b12      	ldr	r3, [pc, #72]	; (8b4 <usart_sync_write+0x64>)
     86c:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     86e:	002c      	movs	r4, r5
     870:	3408      	adds	r4, #8
     872:	0020      	movs	r0, r4
     874:	4b10      	ldr	r3, [pc, #64]	; (8b8 <usart_sync_write+0x68>)
     876:	4798      	blx	r3
     878:	2800      	cmp	r0, #0
     87a:	d0f8      	beq.n	86e <usart_sync_write+0x1e>
     87c:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     87e:	5d71      	ldrb	r1, [r6, r5]
     880:	0020      	movs	r0, r4
     882:	4b0e      	ldr	r3, [pc, #56]	; (8bc <usart_sync_write+0x6c>)
     884:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     886:	0020      	movs	r0, r4
     888:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <usart_sync_write+0x68>)
     88a:	4798      	blx	r3
     88c:	2800      	cmp	r0, #0
     88e:	d0fa      	beq.n	886 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     890:	3501      	adds	r5, #1
     892:	42bd      	cmp	r5, r7
     894:	d3f3      	bcc.n	87e <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     896:	0020      	movs	r0, r4
     898:	4b09      	ldr	r3, [pc, #36]	; (8c0 <usart_sync_write+0x70>)
     89a:	4798      	blx	r3
     89c:	2800      	cmp	r0, #0
     89e:	d0fa      	beq.n	896 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     8a0:	0028      	movs	r0, r5
     8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     8a4:	2000      	movs	r0, #0
     8a6:	e7de      	b.n	866 <usart_sync_write+0x16>
     8a8:	2000      	movs	r0, #0
     8aa:	e7dc      	b.n	866 <usart_sync_write+0x16>
     8ac:	2001      	movs	r0, #1
     8ae:	e7da      	b.n	866 <usart_sync_write+0x16>
     8b0:	00002588 	.word	0x00002588
     8b4:	000009a9 	.word	0x000009a9
     8b8:	0000130f 	.word	0x0000130f
     8bc:	000012ff 	.word	0x000012ff
     8c0:	00001319 	.word	0x00001319

000008c4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8c6:	46ce      	mov	lr, r9
     8c8:	4647      	mov	r7, r8
     8ca:	b580      	push	{r7, lr}
     8cc:	1e05      	subs	r5, r0, #0
     8ce:	4688      	mov	r8, r1
     8d0:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     8d2:	d01f      	beq.n	914 <usart_sync_read+0x50>
     8d4:	2900      	cmp	r1, #0
     8d6:	d01f      	beq.n	918 <usart_sync_read+0x54>
     8d8:	2a00      	cmp	r2, #0
     8da:	d11f      	bne.n	91c <usart_sync_read+0x58>
     8dc:	2000      	movs	r0, #0
     8de:	2286      	movs	r2, #134	; 0x86
     8e0:	0052      	lsls	r2, r2, #1
     8e2:	490f      	ldr	r1, [pc, #60]	; (920 <usart_sync_read+0x5c>)
     8e4:	4b0f      	ldr	r3, [pc, #60]	; (924 <usart_sync_read+0x60>)
     8e6:	4798      	blx	r3
	uint32_t                      offset = 0;
     8e8:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     8ea:	002c      	movs	r4, r5
     8ec:	3408      	adds	r4, #8
     8ee:	0020      	movs	r0, r4
     8f0:	4b0d      	ldr	r3, [pc, #52]	; (928 <usart_sync_read+0x64>)
     8f2:	4798      	blx	r3
     8f4:	2800      	cmp	r0, #0
     8f6:	d0f8      	beq.n	8ea <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     8f8:	4643      	mov	r3, r8
     8fa:	199f      	adds	r7, r3, r6
     8fc:	0020      	movs	r0, r4
     8fe:	4b0b      	ldr	r3, [pc, #44]	; (92c <usart_sync_read+0x68>)
     900:	4798      	blx	r3
     902:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     904:	3601      	adds	r6, #1
     906:	454e      	cmp	r6, r9
     908:	d3ef      	bcc.n	8ea <usart_sync_read+0x26>

	return (int32_t)offset;
}
     90a:	0030      	movs	r0, r6
     90c:	bc0c      	pop	{r2, r3}
     90e:	4690      	mov	r8, r2
     910:	4699      	mov	r9, r3
     912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     914:	2000      	movs	r0, #0
     916:	e7e2      	b.n	8de <usart_sync_read+0x1a>
     918:	2000      	movs	r0, #0
     91a:	e7e0      	b.n	8de <usart_sync_read+0x1a>
     91c:	2001      	movs	r0, #1
     91e:	e7de      	b.n	8de <usart_sync_read+0x1a>
     920:	00002588 	.word	0x00002588
     924:	000009a9 	.word	0x000009a9
     928:	00001325 	.word	0x00001325
     92c:	00001307 	.word	0x00001307

00000930 <usart_sync_init>:
{
     930:	b570      	push	{r4, r5, r6, lr}
     932:	0004      	movs	r4, r0
     934:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     936:	2800      	cmp	r0, #0
     938:	d014      	beq.n	964 <usart_sync_init+0x34>
     93a:	2900      	cmp	r1, #0
     93c:	d010      	beq.n	960 <usart_sync_init+0x30>
     93e:	2001      	movs	r0, #1
     940:	2234      	movs	r2, #52	; 0x34
     942:	4909      	ldr	r1, [pc, #36]	; (968 <usart_sync_init+0x38>)
     944:	4b09      	ldr	r3, [pc, #36]	; (96c <usart_sync_init+0x3c>)
     946:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     948:	0020      	movs	r0, r4
     94a:	3008      	adds	r0, #8
     94c:	0029      	movs	r1, r5
     94e:	4b08      	ldr	r3, [pc, #32]	; (970 <usart_sync_init+0x40>)
     950:	4798      	blx	r3
	if (init_status) {
     952:	2800      	cmp	r0, #0
     954:	d103      	bne.n	95e <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     956:	4b07      	ldr	r3, [pc, #28]	; (974 <usart_sync_init+0x44>)
     958:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     95a:	4b07      	ldr	r3, [pc, #28]	; (978 <usart_sync_init+0x48>)
     95c:	6023      	str	r3, [r4, #0]
}
     95e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     960:	2000      	movs	r0, #0
     962:	e7ed      	b.n	940 <usart_sync_init+0x10>
     964:	2000      	movs	r0, #0
     966:	e7eb      	b.n	940 <usart_sync_init+0x10>
     968:	00002588 	.word	0x00002588
     96c:	000009a9 	.word	0x000009a9
     970:	000012c1 	.word	0x000012c1
     974:	000008c5 	.word	0x000008c5
     978:	00000851 	.word	0x00000851

0000097c <usart_sync_enable>:
{
     97c:	b510      	push	{r4, lr}
     97e:	0004      	movs	r4, r0
	ASSERT(descr);
     980:	1e43      	subs	r3, r0, #1
     982:	4198      	sbcs	r0, r3
     984:	b2c0      	uxtb	r0, r0
     986:	2253      	movs	r2, #83	; 0x53
     988:	4904      	ldr	r1, [pc, #16]	; (99c <usart_sync_enable+0x20>)
     98a:	4b05      	ldr	r3, [pc, #20]	; (9a0 <usart_sync_enable+0x24>)
     98c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     98e:	0020      	movs	r0, r4
     990:	3008      	adds	r0, #8
     992:	4b04      	ldr	r3, [pc, #16]	; (9a4 <usart_sync_enable+0x28>)
     994:	4798      	blx	r3
}
     996:	2000      	movs	r0, #0
     998:	bd10      	pop	{r4, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	00002588 	.word	0x00002588
     9a0:	000009a9 	.word	0x000009a9
     9a4:	000012ed 	.word	0x000012ed

000009a8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     9a8:	2800      	cmp	r0, #0
     9aa:	d100      	bne.n	9ae <assert+0x6>
		__asm("BKPT #0");
     9ac:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     9ae:	4770      	bx	lr

000009b0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	0004      	movs	r4, r0
     9b4:	000e      	movs	r6, r1
     9b6:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     9b8:	2800      	cmp	r0, #0
     9ba:	d012      	beq.n	9e2 <ringbuffer_init+0x32>
     9bc:	2900      	cmp	r1, #0
     9be:	d012      	beq.n	9e6 <ringbuffer_init+0x36>
     9c0:	2a00      	cmp	r2, #0
     9c2:	d112      	bne.n	9ea <ringbuffer_init+0x3a>
     9c4:	2000      	movs	r0, #0
     9c6:	2228      	movs	r2, #40	; 0x28
     9c8:	490a      	ldr	r1, [pc, #40]	; (9f4 <ringbuffer_init+0x44>)
     9ca:	4b0b      	ldr	r3, [pc, #44]	; (9f8 <ringbuffer_init+0x48>)
     9cc:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     9ce:	1e6b      	subs	r3, r5, #1
     9d0:	422b      	tst	r3, r5
     9d2:	d10c      	bne.n	9ee <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     9d4:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     9d6:	2300      	movs	r3, #0
     9d8:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     9da:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     9dc:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     9de:	2000      	movs	r0, #0
}
     9e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     9e2:	2000      	movs	r0, #0
     9e4:	e7ef      	b.n	9c6 <ringbuffer_init+0x16>
     9e6:	2000      	movs	r0, #0
     9e8:	e7ed      	b.n	9c6 <ringbuffer_init+0x16>
     9ea:	2001      	movs	r0, #1
     9ec:	e7eb      	b.n	9c6 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     9ee:	200d      	movs	r0, #13
     9f0:	4240      	negs	r0, r0
     9f2:	e7f5      	b.n	9e0 <ringbuffer_init+0x30>
     9f4:	000025a4 	.word	0x000025a4
     9f8:	000009a9 	.word	0x000009a9

000009fc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     9fc:	b570      	push	{r4, r5, r6, lr}
     9fe:	0004      	movs	r4, r0
     a00:	000d      	movs	r5, r1
	ASSERT(rb && data);
     a02:	2800      	cmp	r0, #0
     a04:	d016      	beq.n	a34 <ringbuffer_get+0x38>
     a06:	2900      	cmp	r1, #0
     a08:	d012      	beq.n	a30 <ringbuffer_get+0x34>
     a0a:	2001      	movs	r0, #1
     a0c:	2240      	movs	r2, #64	; 0x40
     a0e:	490c      	ldr	r1, [pc, #48]	; (a40 <ringbuffer_get+0x44>)
     a10:	4b0c      	ldr	r3, [pc, #48]	; (a44 <ringbuffer_get+0x48>)
     a12:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     a14:	68a3      	ldr	r3, [r4, #8]
     a16:	68e2      	ldr	r2, [r4, #12]
     a18:	429a      	cmp	r2, r3
     a1a:	d00d      	beq.n	a38 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     a1c:	6862      	ldr	r2, [r4, #4]
     a1e:	4013      	ands	r3, r2
     a20:	6822      	ldr	r2, [r4, #0]
     a22:	5cd3      	ldrb	r3, [r2, r3]
     a24:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     a26:	68a3      	ldr	r3, [r4, #8]
     a28:	3301      	adds	r3, #1
     a2a:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     a2c:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     a2e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     a30:	2000      	movs	r0, #0
     a32:	e7eb      	b.n	a0c <ringbuffer_get+0x10>
     a34:	2000      	movs	r0, #0
     a36:	e7e9      	b.n	a0c <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     a38:	200a      	movs	r0, #10
     a3a:	4240      	negs	r0, r0
     a3c:	e7f7      	b.n	a2e <ringbuffer_get+0x32>
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	000025a4 	.word	0x000025a4
     a44:	000009a9 	.word	0x000009a9

00000a48 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     a48:	b570      	push	{r4, r5, r6, lr}
     a4a:	0004      	movs	r4, r0
     a4c:	000d      	movs	r5, r1
	ASSERT(rb);
     a4e:	1e43      	subs	r3, r0, #1
     a50:	4198      	sbcs	r0, r3
     a52:	b2c0      	uxtb	r0, r0
     a54:	2251      	movs	r2, #81	; 0x51
     a56:	490a      	ldr	r1, [pc, #40]	; (a80 <ringbuffer_put+0x38>)
     a58:	4b0a      	ldr	r3, [pc, #40]	; (a84 <ringbuffer_put+0x3c>)
     a5a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     a5c:	6863      	ldr	r3, [r4, #4]
     a5e:	68e2      	ldr	r2, [r4, #12]
     a60:	4013      	ands	r3, r2
     a62:	6822      	ldr	r2, [r4, #0]
     a64:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     a66:	68e3      	ldr	r3, [r4, #12]
     a68:	68a2      	ldr	r2, [r4, #8]
     a6a:	1a9a      	subs	r2, r3, r2
     a6c:	6861      	ldr	r1, [r4, #4]
     a6e:	428a      	cmp	r2, r1
     a70:	d901      	bls.n	a76 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     a72:	1a59      	subs	r1, r3, r1
     a74:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     a76:	3301      	adds	r3, #1
     a78:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     a7a:	2000      	movs	r0, #0
     a7c:	bd70      	pop	{r4, r5, r6, pc}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	000025a4 	.word	0x000025a4
     a84:	000009a9 	.word	0x000009a9

00000a88 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     a88:	b510      	push	{r4, lr}
     a8a:	0004      	movs	r4, r0
	ASSERT(rb);
     a8c:	1e43      	subs	r3, r0, #1
     a8e:	4198      	sbcs	r0, r3
     a90:	b2c0      	uxtb	r0, r0
     a92:	2267      	movs	r2, #103	; 0x67
     a94:	4903      	ldr	r1, [pc, #12]	; (aa4 <ringbuffer_num+0x1c>)
     a96:	4b04      	ldr	r3, [pc, #16]	; (aa8 <ringbuffer_num+0x20>)
     a98:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     a9a:	68e0      	ldr	r0, [r4, #12]
     a9c:	68a3      	ldr	r3, [r4, #8]
     a9e:	1ac0      	subs	r0, r0, r3
}
     aa0:	bd10      	pop	{r4, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	000025a4 	.word	0x000025a4
     aa8:	000009a9 	.word	0x000009a9

00000aac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     aac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <_sbrk+0x1c>)
     ab0:	6812      	ldr	r2, [r2, #0]
     ab2:	2a00      	cmp	r2, #0
     ab4:	d004      	beq.n	ac0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     ab6:	4a04      	ldr	r2, [pc, #16]	; (ac8 <_sbrk+0x1c>)
     ab8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     aba:	18c3      	adds	r3, r0, r3
     abc:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     abe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     ac0:	4902      	ldr	r1, [pc, #8]	; (acc <_sbrk+0x20>)
     ac2:	4a01      	ldr	r2, [pc, #4]	; (ac8 <_sbrk+0x1c>)
     ac4:	6011      	str	r1, [r2, #0]
     ac6:	e7f6      	b.n	ab6 <_sbrk+0xa>
     ac8:	200000a0 	.word	0x200000a0
     acc:	20002118 	.word	0x20002118

00000ad0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     ad0:	2001      	movs	r0, #1
     ad2:	4240      	negs	r0, r0
     ad4:	4770      	bx	lr

00000ad6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     ad6:	2380      	movs	r3, #128	; 0x80
     ad8:	019b      	lsls	r3, r3, #6
     ada:	604b      	str	r3, [r1, #4]

	return 0;
}
     adc:	2000      	movs	r0, #0
     ade:	4770      	bx	lr

00000ae0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     ae0:	2001      	movs	r0, #1
     ae2:	4770      	bx	lr

00000ae4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     ae4:	2000      	movs	r0, #0
     ae6:	4770      	bx	lr

00000ae8 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     ae8:	4b02      	ldr	r3, [pc, #8]	; (af4 <_adc_get_hardware_index+0xc>)
     aea:	469c      	mov	ip, r3
     aec:	4460      	add	r0, ip
     aee:	0a80      	lsrs	r0, r0, #10
     af0:	b2c0      	uxtb	r0, r0
}
     af2:	4770      	bx	lr
     af4:	bdffbc00 	.word	0xbdffbc00

00000af8 <_adc_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{
     af8:	b510      	push	{r4, lr}
	return ADC0_IRQn + _adc_get_hardware_index(device->hw);
     afa:	6940      	ldr	r0, [r0, #20]
     afc:	4b02      	ldr	r3, [pc, #8]	; (b08 <_adc_get_irq_num+0x10>)
     afe:	4798      	blx	r3
     b00:	3019      	adds	r0, #25
     b02:	b2c0      	uxtb	r0, r0
}
     b04:	bd10      	pop	{r4, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	00000ae9 	.word	0x00000ae9

00000b0c <_adc_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _adc_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == ADC0) {
     b0c:	4b03      	ldr	r3, [pc, #12]	; (b1c <_adc_init_irq_param+0x10>)
     b0e:	4298      	cmp	r0, r3
     b10:	d000      	beq.n	b14 <_adc_init_irq_param+0x8>
		_adc0_dev = dev;
	}
}
     b12:	4770      	bx	lr
		_adc0_dev = dev;
     b14:	4b02      	ldr	r3, [pc, #8]	; (b20 <_adc_init_irq_param+0x14>)
     b16:	6019      	str	r1, [r3, #0]
}
     b18:	e7fb      	b.n	b12 <_adc_init_irq_param+0x6>
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	42004400 	.word	0x42004400
     b20:	200000a4 	.word	0x200000a4

00000b24 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     b24:	b530      	push	{r4, r5, lr}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
     b26:	4b52      	ldr	r3, [pc, #328]	; (c70 <_adc_init+0x14c>)
     b28:	4298      	cmp	r0, r3
     b2a:	d100      	bne.n	b2e <_adc_init+0xa>
     b2c:	e088      	b.n	c40 <_adc_init+0x11c>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
     b2e:	4b51      	ldr	r3, [pc, #324]	; (c74 <_adc_init+0x150>)
     b30:	4298      	cmp	r0, r3
     b32:	d100      	bne.n	b36 <_adc_init+0x12>
     b34:	e08f      	b.n	c56 <_adc_init+0x132>
	uint16_t calib_reg = 0;
     b36:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     b38:	8c03      	ldrh	r3, [r0, #32]
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     b3a:	07db      	lsls	r3, r3, #31
     b3c:	d414      	bmi.n	b68 <_adc_init+0x44>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b3e:	8c03      	ldrh	r3, [r0, #32]
     b40:	079b      	lsls	r3, r3, #30
     b42:	d1fc      	bne.n	b3e <_adc_init+0x1a>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     b44:	7803      	ldrb	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     b46:	079b      	lsls	r3, r3, #30
     b48:	d509      	bpl.n	b5e <_adc_init+0x3a>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     b4a:	7803      	ldrb	r3, [r0, #0]
     b4c:	2402      	movs	r4, #2
     b4e:	43a3      	bics	r3, r4
     b50:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b52:	8c03      	ldrh	r3, [r0, #32]
     b54:	079b      	lsls	r3, r3, #30
     b56:	d1fc      	bne.n	b52 <_adc_init+0x2e>
     b58:	8c03      	ldrh	r3, [r0, #32]
     b5a:	079b      	lsls	r3, r3, #30
     b5c:	d4fc      	bmi.n	b58 <_adc_init+0x34>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     b5e:	2301      	movs	r3, #1
     b60:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b62:	8c03      	ldrh	r3, [r0, #32]
     b64:	079b      	lsls	r3, r3, #30
     b66:	d1fc      	bne.n	b62 <_adc_init+0x3e>
     b68:	8c03      	ldrh	r3, [r0, #32]
     b6a:	07db      	lsls	r3, r3, #31
     b6c:	d4fc      	bmi.n	b68 <_adc_init+0x44>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     b6e:	8582      	strh	r2, [r0, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     b70:	00ca      	lsls	r2, r1, #3
     b72:	1a52      	subs	r2, r2, r1
     b74:	0094      	lsls	r4, r2, #2
     b76:	4b40      	ldr	r3, [pc, #256]	; (c78 <_adc_init+0x154>)
     b78:	191b      	adds	r3, r3, r4
     b7a:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
     b7c:	7042      	strb	r2, [r0, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     b7e:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
     b80:	7082      	strb	r2, [r0, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     b82:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
     b84:	70c2      	strb	r2, [r0, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     b86:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
     b88:	8103      	strh	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b8a:	8c03      	ldrh	r3, [r0, #32]
     b8c:	055b      	lsls	r3, r3, #21
     b8e:	d1fc      	bne.n	b8a <_adc_init+0x66>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     b90:	00cb      	lsls	r3, r1, #3
     b92:	1a5b      	subs	r3, r3, r1
     b94:	009a      	lsls	r2, r3, #2
     b96:	4b38      	ldr	r3, [pc, #224]	; (c78 <_adc_init+0x154>)
     b98:	189b      	adds	r3, r3, r2
     b9a:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
     b9c:	8143      	strh	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b9e:	8c03      	ldrh	r3, [r0, #32]
     ba0:	055b      	lsls	r3, r3, #21
     ba2:	d1fc      	bne.n	b9e <_adc_init+0x7a>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     ba4:	00cb      	lsls	r3, r1, #3
     ba6:	1a5b      	subs	r3, r3, r1
     ba8:	009a      	lsls	r2, r3, #2
     baa:	4b33      	ldr	r3, [pc, #204]	; (c78 <_adc_init+0x154>)
     bac:	189b      	adds	r3, r3, r2
     bae:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     bb0:	7303      	strb	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bb2:	8c03      	ldrh	r3, [r0, #32]
     bb4:	055b      	lsls	r3, r3, #21
     bb6:	d1fc      	bne.n	bb2 <_adc_init+0x8e>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     bb8:	00cb      	lsls	r3, r1, #3
     bba:	1a5b      	subs	r3, r3, r1
     bbc:	009a      	lsls	r2, r3, #2
     bbe:	4b2e      	ldr	r3, [pc, #184]	; (c78 <_adc_init+0x154>)
     bc0:	189b      	adds	r3, r3, r2
     bc2:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     bc4:	7343      	strb	r3, [r0, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bc6:	8c03      	ldrh	r3, [r0, #32]
     bc8:	055b      	lsls	r3, r3, #21
     bca:	d1fc      	bne.n	bc6 <_adc_init+0xa2>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     bcc:	00cb      	lsls	r3, r1, #3
     bce:	1a5b      	subs	r3, r3, r1
     bd0:	009a      	lsls	r2, r3, #2
     bd2:	4b29      	ldr	r3, [pc, #164]	; (c78 <_adc_init+0x154>)
     bd4:	189b      	adds	r3, r3, r2
     bd6:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     bd8:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bda:	8c03      	ldrh	r3, [r0, #32]
     bdc:	065b      	lsls	r3, r3, #25
     bde:	d4fc      	bmi.n	bda <_adc_init+0xb6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     be0:	00cb      	lsls	r3, r1, #3
     be2:	1a5b      	subs	r3, r3, r1
     be4:	009a      	lsls	r2, r3, #2
     be6:	4b24      	ldr	r3, [pc, #144]	; (c78 <_adc_init+0x154>)
     be8:	189b      	adds	r3, r3, r2
     bea:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     bec:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bee:	8c03      	ldrh	r3, [r0, #32]
     bf0:	061b      	lsls	r3, r3, #24
     bf2:	d4fc      	bmi.n	bee <_adc_init+0xca>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     bf4:	00cb      	lsls	r3, r1, #3
     bf6:	1a5b      	subs	r3, r3, r1
     bf8:	009a      	lsls	r2, r3, #2
     bfa:	4b1f      	ldr	r3, [pc, #124]	; (c78 <_adc_init+0x154>)
     bfc:	189b      	adds	r3, r3, r2
     bfe:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     c00:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c02:	8c03      	ldrh	r3, [r0, #32]
     c04:	05db      	lsls	r3, r3, #23
     c06:	d4fc      	bmi.n	c02 <_adc_init+0xde>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     c08:	00cb      	lsls	r3, r1, #3
     c0a:	1a5b      	subs	r3, r3, r1
     c0c:	009a      	lsls	r2, r3, #2
     c0e:	4b1a      	ldr	r3, [pc, #104]	; (c78 <_adc_init+0x154>)
     c10:	189b      	adds	r3, r3, r2
     c12:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     c14:	8283      	strh	r3, [r0, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c16:	8c03      	ldrh	r3, [r0, #32]
     c18:	059b      	lsls	r3, r3, #22
     c1a:	d4fc      	bmi.n	c16 <_adc_init+0xf2>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     c1c:	4a16      	ldr	r2, [pc, #88]	; (c78 <_adc_init+0x154>)
     c1e:	00cb      	lsls	r3, r1, #3
     c20:	1a5d      	subs	r5, r3, r1
     c22:	00ac      	lsls	r4, r5, #2
     c24:	0025      	movs	r5, r4
     c26:	1914      	adds	r4, r2, r4
     c28:	7d24      	ldrb	r4, [r4, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     c2a:	7704      	strb	r4, [r0, #28]
	((Adc *)hw)->SEQCTRL.reg = data;
     c2c:	2400      	movs	r4, #0
     c2e:	6284      	str	r4, [r0, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     c30:	1952      	adds	r2, r2, r5
     c32:	7853      	ldrb	r3, [r2, #1]
	((Adc *)hw)->CTRLA.reg = data;
     c34:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c36:	8c03      	ldrh	r3, [r0, #32]
     c38:	079b      	lsls	r3, r3, #30
     c3a:	d1fc      	bne.n	c36 <_adc_init+0x112>

	return ERR_NONE;
}
     c3c:	2000      	movs	r0, #0
     c3e:	bd30      	pop	{r4, r5, pc}
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     c40:	4b0e      	ldr	r3, [pc, #56]	; (c7c <_adc_init+0x158>)
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	021a      	lsls	r2, r3, #8
     c46:	24e0      	movs	r4, #224	; 0xe0
     c48:	00e4      	lsls	r4, r4, #3
     c4a:	4014      	ands	r4, r2
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
     c4c:	08db      	lsrs	r3, r3, #3
     c4e:	2207      	movs	r2, #7
     c50:	401a      	ands	r2, r3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     c52:	4322      	orrs	r2, r4
     c54:	e770      	b.n	b38 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     c56:	4b09      	ldr	r3, [pc, #36]	; (c7c <_adc_init+0x158>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	099a      	lsrs	r2, r3, #6
     c5c:	0212      	lsls	r2, r2, #8
     c5e:	24e0      	movs	r4, #224	; 0xe0
     c60:	00e4      	lsls	r4, r4, #3
     c62:	4022      	ands	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
     c64:	0a5b      	lsrs	r3, r3, #9
     c66:	2407      	movs	r4, #7
     c68:	4023      	ands	r3, r4
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     c6a:	431a      	orrs	r2, r3
     c6c:	e764      	b.n	b38 <_adc_init+0x14>
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	42004400 	.word	0x42004400
     c74:	42004800 	.word	0x42004800
     c78:	000025c8 	.word	0x000025c8
     c7c:	00806020 	.word	0x00806020

00000c80 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
     c80:	b510      	push	{r4, lr}
	void *const hw      = device->hw;
     c82:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
     c84:	7991      	ldrb	r1, [r2, #6]
	return ((Adc *)hw)->INTENSET.reg;
     c86:	7953      	ldrb	r3, [r2, #5]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
     c88:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
     c8a:	07d9      	lsls	r1, r3, #31
     c8c:	d404      	bmi.n	c98 <_adc_interrupt_handler+0x18>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
     c8e:	0799      	lsls	r1, r3, #30
     c90:	d40a      	bmi.n	ca8 <_adc_interrupt_handler+0x28>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
     c92:	075b      	lsls	r3, r3, #29
     c94:	d40e      	bmi.n	cb4 <_adc_interrupt_handler+0x34>
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
     c96:	bd10      	pop	{r4, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     c98:	2301      	movs	r3, #1
     c9a:	7193      	strb	r3, [r2, #6]
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
     c9c:	6883      	ldr	r3, [r0, #8]
	return ((Adc *)hw)->RESULT.reg;
     c9e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     ca0:	b292      	uxth	r2, r2
     ca2:	2100      	movs	r1, #0
     ca4:	4798      	blx	r3
     ca6:	e7f6      	b.n	c96 <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     ca8:	2302      	movs	r3, #2
     caa:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.error_cb(device, 0);
     cac:	6843      	ldr	r3, [r0, #4]
     cae:	2100      	movs	r1, #0
     cb0:	4798      	blx	r3
     cb2:	e7f0      	b.n	c96 <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
     cb4:	2304      	movs	r3, #4
     cb6:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.window_cb(device, 0);
     cb8:	6803      	ldr	r3, [r0, #0]
     cba:	2100      	movs	r1, #0
     cbc:	4798      	blx	r3
}
     cbe:	e7ea      	b.n	c96 <_adc_interrupt_handler+0x16>

00000cc0 <_adc_get_regs>:
{
     cc0:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     cc2:	4b0b      	ldr	r3, [pc, #44]	; (cf0 <_adc_get_regs+0x30>)
     cc4:	4798      	blx	r3
     cc6:	0002      	movs	r2, r0
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     cc8:	2000      	movs	r0, #0
     cca:	2800      	cmp	r0, #0
     ccc:	d006      	beq.n	cdc <_adc_get_regs+0x1c>
	ASSERT(false);
     cce:	228f      	movs	r2, #143	; 0x8f
     cd0:	4908      	ldr	r1, [pc, #32]	; (cf4 <_adc_get_regs+0x34>)
     cd2:	2000      	movs	r0, #0
     cd4:	4b08      	ldr	r3, [pc, #32]	; (cf8 <_adc_get_regs+0x38>)
     cd6:	4798      	blx	r3
	return 0;
     cd8:	2000      	movs	r0, #0
}
     cda:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     cdc:	00c3      	lsls	r3, r0, #3
     cde:	1a1b      	subs	r3, r3, r0
     ce0:	0099      	lsls	r1, r3, #2
     ce2:	4b06      	ldr	r3, [pc, #24]	; (cfc <_adc_get_regs+0x3c>)
     ce4:	5ccb      	ldrb	r3, [r1, r3]
     ce6:	429a      	cmp	r2, r3
     ce8:	d0f7      	beq.n	cda <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     cea:	3001      	adds	r0, #1
     cec:	b2c0      	uxtb	r0, r0
     cee:	e7ec      	b.n	cca <_adc_get_regs+0xa>
     cf0:	00000ae9 	.word	0x00000ae9
     cf4:	000025e4 	.word	0x000025e4
     cf8:	000009a9 	.word	0x000009a9
     cfc:	000025c8 	.word	0x000025c8

00000d00 <_adc_async_init>:
{
     d00:	b570      	push	{r4, r5, r6, lr}
     d02:	0004      	movs	r4, r0
     d04:	000d      	movs	r5, r1
	ASSERT(device);
     d06:	1e43      	subs	r3, r0, #1
     d08:	4198      	sbcs	r0, r3
     d0a:	b2c0      	uxtb	r0, r0
     d0c:	22f0      	movs	r2, #240	; 0xf0
     d0e:	491e      	ldr	r1, [pc, #120]	; (d88 <_adc_async_init+0x88>)
     d10:	4b1e      	ldr	r3, [pc, #120]	; (d8c <_adc_async_init+0x8c>)
     d12:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
     d14:	0028      	movs	r0, r5
     d16:	4b1e      	ldr	r3, [pc, #120]	; (d90 <_adc_async_init+0x90>)
     d18:	4798      	blx	r3
     d1a:	0001      	movs	r1, r0
     d1c:	0028      	movs	r0, r5
     d1e:	4b1d      	ldr	r3, [pc, #116]	; (d94 <_adc_async_init+0x94>)
     d20:	4798      	blx	r3
     d22:	1e06      	subs	r6, r0, #0
	if (init_status) {
     d24:	d001      	beq.n	d2a <_adc_async_init+0x2a>
}
     d26:	0030      	movs	r0, r6
     d28:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     d2a:	6165      	str	r5, [r4, #20]
	_adc_init_irq_param(hw, device);
     d2c:	0021      	movs	r1, r4
     d2e:	0028      	movs	r0, r5
     d30:	4b19      	ldr	r3, [pc, #100]	; (d98 <_adc_async_init+0x98>)
     d32:	4798      	blx	r3
	NVIC_DisableIRQ(_adc_get_irq_num(device));
     d34:	0020      	movs	r0, r4
     d36:	4b19      	ldr	r3, [pc, #100]	; (d9c <_adc_async_init+0x9c>)
     d38:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     d3a:	0603      	lsls	r3, r0, #24
     d3c:	d40a      	bmi.n	d54 <_adc_async_init+0x54>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d3e:	231f      	movs	r3, #31
     d40:	4018      	ands	r0, r3
     d42:	3b1e      	subs	r3, #30
     d44:	4083      	lsls	r3, r0
     d46:	2280      	movs	r2, #128	; 0x80
     d48:	4915      	ldr	r1, [pc, #84]	; (da0 <_adc_async_init+0xa0>)
     d4a:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
     d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d50:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device));
     d54:	0020      	movs	r0, r4
     d56:	4b11      	ldr	r3, [pc, #68]	; (d9c <_adc_async_init+0x9c>)
     d58:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     d5a:	0603      	lsls	r3, r0, #24
     d5c:	d407      	bmi.n	d6e <_adc_async_init+0x6e>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d5e:	231f      	movs	r3, #31
     d60:	4018      	ands	r0, r3
     d62:	3b1e      	subs	r3, #30
     d64:	4083      	lsls	r3, r0
     d66:	22c0      	movs	r2, #192	; 0xc0
     d68:	0052      	lsls	r2, r2, #1
     d6a:	490d      	ldr	r1, [pc, #52]	; (da0 <_adc_async_init+0xa0>)
     d6c:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ(_adc_get_irq_num(device));
     d6e:	0020      	movs	r0, r4
     d70:	4b0a      	ldr	r3, [pc, #40]	; (d9c <_adc_async_init+0x9c>)
     d72:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
     d74:	0603      	lsls	r3, r0, #24
     d76:	d4d6      	bmi.n	d26 <_adc_async_init+0x26>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d78:	231f      	movs	r3, #31
     d7a:	4018      	ands	r0, r3
     d7c:	3b1e      	subs	r3, #30
     d7e:	4083      	lsls	r3, r0
     d80:	4a07      	ldr	r2, [pc, #28]	; (da0 <_adc_async_init+0xa0>)
     d82:	6013      	str	r3, [r2, #0]
     d84:	e7cf      	b.n	d26 <_adc_async_init+0x26>
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	000025e4 	.word	0x000025e4
     d8c:	000009a9 	.word	0x000009a9
     d90:	00000cc1 	.word	0x00000cc1
     d94:	00000b25 	.word	0x00000b25
     d98:	00000b0d 	.word	0x00000b0d
     d9c:	00000af9 	.word	0x00000af9
     da0:	e000e100 	.word	0xe000e100

00000da4 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     da4:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     da6:	7813      	ldrb	r3, [r2, #0]
     da8:	2102      	movs	r1, #2
     daa:	430b      	orrs	r3, r1
     dac:	b2db      	uxtb	r3, r3
     dae:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     db0:	8c13      	ldrh	r3, [r2, #32]
     db2:	079b      	lsls	r3, r3, #30
     db4:	d1fc      	bne.n	db0 <_adc_async_enable_channel+0xc>
}
     db6:	4770      	bx	lr

00000db8 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     db8:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLC.reg;
     dba:	895a      	ldrh	r2, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     dbc:	0912      	lsrs	r2, r2, #4
     dbe:	2303      	movs	r3, #3
     dc0:	4013      	ands	r3, r2
     dc2:	2b03      	cmp	r3, #3
     dc4:	d001      	beq.n	dca <_adc_async_get_data_size+0x12>
     dc6:	2002      	movs	r0, #2
}
     dc8:	4770      	bx	lr
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     dca:	2001      	movs	r0, #1
     dcc:	e7fc      	b.n	dc8 <_adc_async_get_data_size+0x10>

00000dce <_adc_async_set_irq_state>:
	void *const hw = device->hw;
     dce:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
     dd0:	2a01      	cmp	r2, #1
     dd2:	d008      	beq.n	de6 <_adc_async_set_irq_state+0x18>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
     dd4:	2a02      	cmp	r2, #2
     dd6:	d00e      	beq.n	df6 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
     dd8:	2a00      	cmp	r2, #0
     dda:	d103      	bne.n	de4 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
     ddc:	2b00      	cmp	r3, #0
     dde:	d012      	beq.n	e06 <_adc_async_set_irq_state+0x38>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
     de0:	2301      	movs	r3, #1
     de2:	714b      	strb	r3, [r1, #5]
}
     de4:	4770      	bx	lr
	if (value == 0x0) {
     de6:	2b00      	cmp	r3, #0
     de8:	d102      	bne.n	df0 <_adc_async_set_irq_state+0x22>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
     dea:	3304      	adds	r3, #4
     dec:	710b      	strb	r3, [r1, #4]
     dee:	e7f9      	b.n	de4 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
     df0:	2304      	movs	r3, #4
     df2:	714b      	strb	r3, [r1, #5]
     df4:	e7f6      	b.n	de4 <_adc_async_set_irq_state+0x16>
	if (value == 0x0) {
     df6:	2b00      	cmp	r3, #0
     df8:	d102      	bne.n	e00 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
     dfa:	3302      	adds	r3, #2
     dfc:	710b      	strb	r3, [r1, #4]
     dfe:	e7f1      	b.n	de4 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
     e00:	2302      	movs	r3, #2
     e02:	714b      	strb	r3, [r1, #5]
     e04:	e7ee      	b.n	de4 <_adc_async_set_irq_state+0x16>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
     e06:	3301      	adds	r3, #1
     e08:	710b      	strb	r3, [r1, #4]
     e0a:	e7eb      	b.n	de4 <_adc_async_set_irq_state+0x16>

00000e0c <ADC0_Handler>:

void ADC0_Handler(void)
{
     e0c:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <ADC0_Handler+0xc>)
     e10:	6818      	ldr	r0, [r3, #0]
     e12:	4b02      	ldr	r3, [pc, #8]	; (e1c <ADC0_Handler+0x10>)
     e14:	4798      	blx	r3
}
     e16:	bd10      	pop	{r4, pc}
     e18:	200000a4 	.word	0x200000a4
     e1c:	00000c81 	.word	0x00000c81

00000e20 <_adc_get_adc_async>:
 * \brief Retrieve ADC async helper functions
 */
void *_adc_get_adc_async(void)
{
	return (void *)NULL;
}
     e20:	2000      	movs	r0, #0
     e22:	4770      	bx	lr

00000e24 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e24:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     e26:	4b08      	ldr	r3, [pc, #32]	; (e48 <_init_chip+0x24>)
     e28:	685a      	ldr	r2, [r3, #4]
     e2a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     e2c:	4b07      	ldr	r3, [pc, #28]	; (e4c <_init_chip+0x28>)
     e2e:	4798      	blx	r3
	_oscctrl_init_sources();
     e30:	4b07      	ldr	r3, [pc, #28]	; (e50 <_init_chip+0x2c>)
     e32:	4798      	blx	r3
	_mclk_init();
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <_init_chip+0x30>)
     e36:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     e38:	4b07      	ldr	r3, [pc, #28]	; (e58 <_init_chip+0x34>)
     e3a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e3c:	20ff      	movs	r0, #255	; 0xff
     e3e:	4b07      	ldr	r3, [pc, #28]	; (e5c <_init_chip+0x38>)
     e40:	4798      	blx	r3

	_div_init();
     e42:	4b07      	ldr	r3, [pc, #28]	; (e60 <_init_chip+0x3c>)
     e44:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     e46:	bd10      	pop	{r4, pc}
     e48:	41004000 	.word	0x41004000
     e4c:	00001121 	.word	0x00001121
     e50:	0000113d 	.word	0x0000113d
     e54:	00001115 	.word	0x00001115
     e58:	00001179 	.word	0x00001179
     e5c:	000010d9 	.word	0x000010d9
     e60:	00000e65 	.word	0x00000e65

00000e64 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     e64:	2290      	movs	r2, #144	; 0x90
     e66:	05d2      	lsls	r2, r2, #23
     e68:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     e6a:	2102      	movs	r1, #2
     e6c:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     e6e:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     e70:	4770      	bx	lr

00000e72 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     e72:	b510      	push	{r4, lr}
     e74:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e76:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     e7a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     e7c:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     e7e:	2390      	movs	r3, #144	; 0x90
     e80:	05db      	lsls	r3, r3, #23
     e82:	781a      	ldrb	r2, [r3, #0]
     e84:	2401      	movs	r4, #1
     e86:	43a2      	bics	r2, r4
     e88:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     e8a:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     e8c:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     e8e:	2390      	movs	r3, #144	; 0x90
     e90:	05db      	lsls	r3, r3, #23
     e92:	791b      	ldrb	r3, [r3, #4]
     e94:	07db      	lsls	r3, r3, #31
     e96:	d4fa      	bmi.n	e8e <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     e98:	2390      	movs	r3, #144	; 0x90
     e9a:	05db      	lsls	r3, r3, #23
     e9c:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     e9e:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ea0:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     ea4:	b002      	add	sp, #8
     ea6:	bd10      	pop	{r4, pc}

00000ea8 <__aeabi_idivmod>:

/**
 * \brief Do signed division, return result and remainder
 */
uint64_t __aeabi_idivmod(int numerator, int denominator)
{
     ea8:	b510      	push	{r4, lr}
     eaa:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     eac:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     eb0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     eb2:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     eb4:	2390      	movs	r3, #144	; 0x90
     eb6:	05db      	lsls	r3, r3, #23
     eb8:	781a      	ldrb	r2, [r3, #0]
     eba:	2401      	movs	r4, #1
     ebc:	4322      	orrs	r2, r4
     ebe:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     ec0:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     ec2:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     ec4:	2390      	movs	r3, #144	; 0x90
     ec6:	05db      	lsls	r3, r3, #23
     ec8:	791b      	ldrb	r3, [r3, #4]
     eca:	07db      	lsls	r3, r3, #31
     ecc:	d4fa      	bmi.n	ec4 <__aeabi_idivmod+0x1c>
	_divas_div(1, numerator, denominator);
	res = _divas_result64();
     ece:	4b04      	ldr	r3, [pc, #16]	; (ee0 <__aeabi_idivmod+0x38>)
     ed0:	6818      	ldr	r0, [r3, #0]
     ed2:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     ed4:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     ed6:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     eda:	b002      	add	sp, #8
     edc:	bd10      	pop	{r4, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	48000010 	.word	0x48000010

00000ee4 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     ee4:	b510      	push	{r4, lr}
     ee6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ee8:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     eec:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     eee:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     ef0:	2390      	movs	r3, #144	; 0x90
     ef2:	05db      	lsls	r3, r3, #23
     ef4:	781a      	ldrb	r2, [r3, #0]
     ef6:	2401      	movs	r4, #1
     ef8:	43a2      	bics	r2, r4
     efa:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     efc:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     efe:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     f00:	2390      	movs	r3, #144	; 0x90
     f02:	05db      	lsls	r3, r3, #23
     f04:	791b      	ldrb	r3, [r3, #4]
     f06:	07db      	lsls	r3, r3, #31
     f08:	d4fa      	bmi.n	f00 <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
     f0a:	4b04      	ldr	r3, [pc, #16]	; (f1c <__aeabi_uidivmod+0x38>)
     f0c:	6818      	ldr	r0, [r3, #0]
     f0e:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     f10:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f12:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     f16:	b002      	add	sp, #8
     f18:	bd10      	pop	{r4, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	48000010 	.word	0x48000010

00000f20 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
     f20:	b570      	push	{r4, r5, r6, lr}
     f22:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
     f24:	4b24      	ldr	r3, [pc, #144]	; (fb8 <_ext_irq_handler+0x98>)
     f26:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
     f28:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     f2a:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
     f2c:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
     f2e:	4b23      	ldr	r3, [pc, #140]	; (fbc <_ext_irq_handler+0x9c>)
     f30:	6818      	ldr	r0, [r3, #0]
     f32:	1e43      	subs	r3, r0, #1
     f34:	4198      	sbcs	r0, r3
     f36:	b2c0      	uxtb	r0, r0
     f38:	22da      	movs	r2, #218	; 0xda
     f3a:	4921      	ldr	r1, [pc, #132]	; (fc0 <_ext_irq_handler+0xa0>)
     f3c:	4b21      	ldr	r3, [pc, #132]	; (fc4 <_ext_irq_handler+0xa4>)
     f3e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
     f40:	2501      	movs	r5, #1
     f42:	426d      	negs	r5, r5

	while (flags) {
     f44:	e02c      	b.n	fa0 <_ext_irq_handler+0x80>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     f46:	3901      	subs	r1, #1
     f48:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     f4a:	42b0      	cmp	r0, r6
     f4c:	d80e      	bhi.n	f6c <_ext_irq_handler+0x4c>
				middle = (upper + lower) >> 1;
     f4e:	1832      	adds	r2, r6, r0
     f50:	1052      	asrs	r2, r2, #1
     f52:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
     f54:	23ff      	movs	r3, #255	; 0xff
     f56:	4013      	ands	r3, r2
     f58:	00db      	lsls	r3, r3, #3
     f5a:	4a1b      	ldr	r2, [pc, #108]	; (fc8 <_ext_irq_handler+0xa8>)
     f5c:	5c9b      	ldrb	r3, [r3, r2]
     f5e:	42a3      	cmp	r3, r4
     f60:	d003      	beq.n	f6a <_ext_irq_handler+0x4a>
				if (_map[middle].extint < pos) {
     f62:	daf0      	bge.n	f46 <_ext_irq_handler+0x26>
					lower = middle + 1;
     f64:	3101      	adds	r1, #1
     f66:	b2c8      	uxtb	r0, r1
     f68:	e7ef      	b.n	f4a <_ext_irq_handler+0x2a>
					pin = _map[middle].pin;
     f6a:	251c      	movs	r5, #28
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     f6c:	1c6b      	adds	r3, r5, #1
     f6e:	d003      	beq.n	f78 <_ext_irq_handler+0x58>
				callback(pin);
     f70:	4b12      	ldr	r3, [pc, #72]	; (fbc <_ext_irq_handler+0x9c>)
     f72:	681b      	ldr	r3, [r3, #0]
     f74:	0028      	movs	r0, r5
     f76:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     f78:	2201      	movs	r2, #1
     f7a:	40a2      	lsls	r2, r4
     f7c:	9b01      	ldr	r3, [sp, #4]
     f7e:	4393      	bics	r3, r2
     f80:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     f82:	9801      	ldr	r0, [sp, #4]
     f84:	4b11      	ldr	r3, [pc, #68]	; (fcc <_ext_irq_handler+0xac>)
     f86:	4798      	blx	r3
     f88:	3801      	subs	r0, #1
     f8a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     f8c:	1c63      	adds	r3, r4, #1
     f8e:	d002      	beq.n	f96 <_ext_irq_handler+0x76>
     f90:	2601      	movs	r6, #1
     f92:	2000      	movs	r0, #0
     f94:	e7d9      	b.n	f4a <_ext_irq_handler+0x2a>
	return ((Eic *)hw)->INTFLAG.reg;
     f96:	4b08      	ldr	r3, [pc, #32]	; (fb8 <_ext_irq_handler+0x98>)
     f98:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
     f9a:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     f9c:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     f9e:	615a      	str	r2, [r3, #20]
	while (flags) {
     fa0:	9b01      	ldr	r3, [sp, #4]
     fa2:	2b00      	cmp	r3, #0
     fa4:	d005      	beq.n	fb2 <_ext_irq_handler+0x92>
		pos = ffs(flags) - 1;
     fa6:	9801      	ldr	r0, [sp, #4]
     fa8:	4b08      	ldr	r3, [pc, #32]	; (fcc <_ext_irq_handler+0xac>)
     faa:	4798      	blx	r3
     fac:	3801      	subs	r0, #1
     fae:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     fb0:	e7ec      	b.n	f8c <_ext_irq_handler+0x6c>
	}
}
     fb2:	b002      	add	sp, #8
     fb4:	bd70      	pop	{r4, r5, r6, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	40002800 	.word	0x40002800
     fbc:	200000a8 	.word	0x200000a8
     fc0:	00002604 	.word	0x00002604
     fc4:	000009a9 	.word	0x000009a9
     fc8:	000025fc 	.word	0x000025fc
     fcc:	000014c9 	.word	0x000014c9

00000fd0 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     fd0:	4b27      	ldr	r3, [pc, #156]	; (1070 <_ext_irq_init+0xa0>)
     fd2:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     fd4:	07db      	lsls	r3, r3, #31
     fd6:	d41b      	bmi.n	1010 <_ext_irq_init+0x40>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     fd8:	4b25      	ldr	r3, [pc, #148]	; (1070 <_ext_irq_init+0xa0>)
     fda:	685b      	ldr	r3, [r3, #4]
     fdc:	079b      	lsls	r3, r3, #30
     fde:	d1fb      	bne.n	fd8 <_ext_irq_init+0x8>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     fe0:	4b23      	ldr	r3, [pc, #140]	; (1070 <_ext_irq_init+0xa0>)
     fe2:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     fe4:	079b      	lsls	r3, r3, #30
     fe6:	d50c      	bpl.n	1002 <_ext_irq_init+0x32>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     fe8:	4a21      	ldr	r2, [pc, #132]	; (1070 <_ext_irq_init+0xa0>)
     fea:	7813      	ldrb	r3, [r2, #0]
     fec:	2102      	movs	r1, #2
     fee:	438b      	bics	r3, r1
     ff0:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     ff2:	4b1f      	ldr	r3, [pc, #124]	; (1070 <_ext_irq_init+0xa0>)
     ff4:	685b      	ldr	r3, [r3, #4]
     ff6:	079b      	lsls	r3, r3, #30
     ff8:	d1fb      	bne.n	ff2 <_ext_irq_init+0x22>
     ffa:	4b1d      	ldr	r3, [pc, #116]	; (1070 <_ext_irq_init+0xa0>)
     ffc:	685b      	ldr	r3, [r3, #4]
     ffe:	079b      	lsls	r3, r3, #30
    1000:	d4fb      	bmi.n	ffa <_ext_irq_init+0x2a>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    1002:	2201      	movs	r2, #1
    1004:	4b1a      	ldr	r3, [pc, #104]	; (1070 <_ext_irq_init+0xa0>)
    1006:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1008:	4b19      	ldr	r3, [pc, #100]	; (1070 <_ext_irq_init+0xa0>)
    100a:	685b      	ldr	r3, [r3, #4]
    100c:	079b      	lsls	r3, r3, #30
    100e:	d1fb      	bne.n	1008 <_ext_irq_init+0x38>
    1010:	4b17      	ldr	r3, [pc, #92]	; (1070 <_ext_irq_init+0xa0>)
    1012:	685b      	ldr	r3, [r3, #4]
    1014:	07db      	lsls	r3, r3, #31
    1016:	d4fb      	bmi.n	1010 <_ext_irq_init+0x40>
	tmp = ((Eic *)hw)->CTRLA.reg;
    1018:	4a15      	ldr	r2, [pc, #84]	; (1070 <_ext_irq_init+0xa0>)
    101a:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    101c:	2110      	movs	r1, #16
    101e:	438b      	bics	r3, r1
	((Eic *)hw)->CTRLA.reg = tmp;
    1020:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1022:	4b13      	ldr	r3, [pc, #76]	; (1070 <_ext_irq_init+0xa0>)
    1024:	685b      	ldr	r3, [r3, #4]
    1026:	079b      	lsls	r3, r3, #30
    1028:	d1fb      	bne.n	1022 <_ext_irq_init+0x52>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    102a:	4b11      	ldr	r3, [pc, #68]	; (1070 <_ext_irq_init+0xa0>)
    102c:	2200      	movs	r2, #0
    102e:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1030:	2180      	movs	r1, #128	; 0x80
    1032:	0049      	lsls	r1, r1, #1
    1034:	6099      	str	r1, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1036:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    1038:	61da      	str	r2, [r3, #28]
    103a:	3202      	adds	r2, #2
    103c:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    103e:	781a      	ldrb	r2, [r3, #0]
    1040:	2102      	movs	r1, #2
    1042:	430a      	orrs	r2, r1
    1044:	b2d2      	uxtb	r2, r2
    1046:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1048:	4b09      	ldr	r3, [pc, #36]	; (1070 <_ext_irq_init+0xa0>)
    104a:	685b      	ldr	r3, [r3, #4]
    104c:	079b      	lsls	r3, r3, #30
    104e:	d1fb      	bne.n	1048 <_ext_irq_init+0x78>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1050:	4b08      	ldr	r3, [pc, #32]	; (1074 <_ext_irq_init+0xa4>)
    1052:	2208      	movs	r2, #8
    1054:	2180      	movs	r1, #128	; 0x80
    1056:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1058:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    105c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1060:	3101      	adds	r1, #1
    1062:	31ff      	adds	r1, #255	; 0xff
    1064:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1066:	601a      	str	r2, [r3, #0]
	callback = cb;
    1068:	4b03      	ldr	r3, [pc, #12]	; (1078 <_ext_irq_init+0xa8>)
    106a:	6018      	str	r0, [r3, #0]
}
    106c:	2000      	movs	r0, #0
    106e:	4770      	bx	lr
    1070:	40002800 	.word	0x40002800
    1074:	e000e100 	.word	0xe000e100
    1078:	200000a8 	.word	0x200000a8

0000107c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    107c:	b510      	push	{r4, lr}
	_ext_irq_handler();
    107e:	4b01      	ldr	r3, [pc, #4]	; (1084 <EIC_Handler+0x8>)
    1080:	4798      	blx	r3
}
    1082:	bd10      	pop	{r4, pc}
    1084:	00000f21 	.word	0x00000f21

00001088 <_event_system_init>:
int32_t _event_system_init(void)
{
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    1088:	2300      	movs	r3, #0
    108a:	e009      	b.n	10a0 <_event_system_init+0x18>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    108c:	4a11      	ldr	r2, [pc, #68]	; (10d4 <_event_system_init+0x4c>)
    108e:	5cd0      	ldrb	r0, [r2, r3]
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1090:	001a      	movs	r2, r3
    1092:	3220      	adds	r2, #32
    1094:	0092      	lsls	r2, r2, #2
    1096:	2184      	movs	r1, #132	; 0x84
    1098:	05c9      	lsls	r1, r1, #23
    109a:	5050      	str	r0, [r2, r1]
	for (i = 0; i < EVSYS_USERS; i++) {
    109c:	3301      	adds	r3, #1
    109e:	b2db      	uxtb	r3, r3
    10a0:	2b2e      	cmp	r3, #46	; 0x2e
    10a2:	d9f3      	bls.n	108c <_event_system_init+0x4>
    10a4:	2300      	movs	r3, #0
    10a6:	e00b      	b.n	10c0 <_event_system_init+0x38>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    10a8:	0059      	lsls	r1, r3, #1
    10aa:	4a0a      	ldr	r2, [pc, #40]	; (10d4 <_event_system_init+0x4c>)
    10ac:	1852      	adds	r2, r2, r1
    10ae:	8e10      	ldrh	r0, [r2, #48]	; 0x30
	((Evsys *)hw)->CHANNEL[index].reg = data;
    10b0:	001a      	movs	r2, r3
    10b2:	3208      	adds	r2, #8
    10b4:	0092      	lsls	r2, r2, #2
    10b6:	2184      	movs	r1, #132	; 0x84
    10b8:	05c9      	lsls	r1, r1, #23
    10ba:	5050      	str	r0, [r2, r1]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    10bc:	3301      	adds	r3, #1
    10be:	b2db      	uxtb	r3, r3
    10c0:	2b0b      	cmp	r3, #11
    10c2:	d9f1      	bls.n	10a8 <_event_system_init+0x20>
	((Evsys *)hw)->INTENSET.reg = data;
    10c4:	2384      	movs	r3, #132	; 0x84
    10c6:	05db      	lsls	r3, r3, #23
    10c8:	2200      	movs	r2, #0
    10ca:	615a      	str	r2, [r3, #20]
	((Evsys *)hw)->INTENCLR.reg = ~data;
    10cc:	3a01      	subs	r2, #1
    10ce:	611a      	str	r2, [r3, #16]
	}

	hri_evsys_write_INTEN_reg(EVSYS, interrupt_cfg);

	return ERR_NONE;
}
    10d0:	2000      	movs	r0, #0
    10d2:	4770      	bx	lr
    10d4:	0000261c 	.word	0x0000261c

000010d8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    10d8:	07c3      	lsls	r3, r0, #31
    10da:	d507      	bpl.n	10ec <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10dc:	4a09      	ldr	r2, [pc, #36]	; (1104 <_gclk_init_generators_by_fref+0x2c>)
    10de:	4b0a      	ldr	r3, [pc, #40]	; (1108 <_gclk_init_generators_by_fref+0x30>)
    10e0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10e2:	4b09      	ldr	r3, [pc, #36]	; (1108 <_gclk_init_generators_by_fref+0x30>)
    10e4:	685a      	ldr	r2, [r3, #4]
    10e6:	4b09      	ldr	r3, [pc, #36]	; (110c <_gclk_init_generators_by_fref+0x34>)
    10e8:	421a      	tst	r2, r3
    10ea:	d1fa      	bne.n	10e2 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    10ec:	0783      	lsls	r3, r0, #30
    10ee:	d507      	bpl.n	1100 <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10f0:	4a07      	ldr	r2, [pc, #28]	; (1110 <_gclk_init_generators_by_fref+0x38>)
    10f2:	4b05      	ldr	r3, [pc, #20]	; (1108 <_gclk_init_generators_by_fref+0x30>)
    10f4:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10f6:	4b04      	ldr	r3, [pc, #16]	; (1108 <_gclk_init_generators_by_fref+0x30>)
    10f8:	685a      	ldr	r2, [r3, #4]
    10fa:	4b04      	ldr	r3, [pc, #16]	; (110c <_gclk_init_generators_by_fref+0x34>)
    10fc:	421a      	tst	r2, r3
    10fe:	d1fa      	bne.n	10f6 <_gclk_init_generators_by_fref+0x1e>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    1100:	4770      	bx	lr
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	00010106 	.word	0x00010106
    1108:	40001c00 	.word	0x40001c00
    110c:	000007fd 	.word	0x000007fd
    1110:	00080106 	.word	0x00080106

00001114 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1114:	2201      	movs	r2, #1
    1116:	4b01      	ldr	r3, [pc, #4]	; (111c <_mclk_init+0x8>)
    1118:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    111a:	4770      	bx	lr
    111c:	40000800 	.word	0x40000800

00001120 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1120:	4a05      	ldr	r2, [pc, #20]	; (1138 <_osc32kctrl_init_sources+0x18>)
    1122:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    1124:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1126:	021b      	lsls	r3, r3, #8
    1128:	21f8      	movs	r1, #248	; 0xf8
    112a:	0149      	lsls	r1, r1, #5
    112c:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    112e:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1130:	2300      	movs	r3, #0
    1132:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1134:	4770      	bx	lr
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	40001400 	.word	0x40001400

0000113c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    113c:	4b0d      	ldr	r3, [pc, #52]	; (1174 <_oscctrl_init_sources+0x38>)
    113e:	2202      	movs	r2, #2
    1140:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    1142:	3203      	adds	r2, #3
    1144:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    1146:	4b0b      	ldr	r3, [pc, #44]	; (1174 <_oscctrl_init_sources+0x38>)
    1148:	699b      	ldr	r3, [r3, #24]
    114a:	075b      	lsls	r3, r3, #29
    114c:	d4fb      	bmi.n	1146 <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    114e:	4b09      	ldr	r3, [pc, #36]	; (1174 <_oscctrl_init_sources+0x38>)
    1150:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    1152:	075b      	lsls	r3, r3, #29
    1154:	d4fb      	bmi.n	114e <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    1156:	2207      	movs	r2, #7
    1158:	4b06      	ldr	r3, [pc, #24]	; (1174 <_oscctrl_init_sources+0x38>)
    115a:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    115c:	4b05      	ldr	r3, [pc, #20]	; (1174 <_oscctrl_init_sources+0x38>)
    115e:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    1160:	06db      	lsls	r3, r3, #27
    1162:	d5fb      	bpl.n	115c <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    1164:	4a03      	ldr	r2, [pc, #12]	; (1174 <_oscctrl_init_sources+0x38>)
    1166:	7d13      	ldrb	r3, [r2, #20]
    1168:	2180      	movs	r1, #128	; 0x80
    116a:	4249      	negs	r1, r1
    116c:	430b      	orrs	r3, r1
    116e:	b2db      	uxtb	r3, r3
    1170:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1172:	4770      	bx	lr
    1174:	40001000 	.word	0x40001000

00001178 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    1178:	4770      	bx	lr
	...

0000117c <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    117c:	4b02      	ldr	r3, [pc, #8]	; (1188 <_sercom_get_hardware_index+0xc>)
    117e:	469c      	mov	ip, r3
    1180:	4460      	add	r0, ip
    1182:	0a80      	lsrs	r0, r0, #10
    1184:	b2c0      	uxtb	r0, r0
}
    1186:	4770      	bx	lr
    1188:	bdfffc00 	.word	0xbdfffc00

0000118c <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    118c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    118e:	4b0b      	ldr	r3, [pc, #44]	; (11bc <_get_sercom_index+0x30>)
    1190:	4798      	blx	r3
    1192:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1194:	2000      	movs	r0, #0
    1196:	2800      	cmp	r0, #0
    1198:	d006      	beq.n	11a8 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    119a:	4a09      	ldr	r2, [pc, #36]	; (11c0 <_get_sercom_index+0x34>)
    119c:	4909      	ldr	r1, [pc, #36]	; (11c4 <_get_sercom_index+0x38>)
    119e:	2000      	movs	r0, #0
    11a0:	4b09      	ldr	r3, [pc, #36]	; (11c8 <_get_sercom_index+0x3c>)
    11a2:	4798      	blx	r3
	return 0;
    11a4:	2000      	movs	r0, #0
}
    11a6:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    11a8:	0083      	lsls	r3, r0, #2
    11aa:	181b      	adds	r3, r3, r0
    11ac:	0099      	lsls	r1, r3, #2
    11ae:	4b07      	ldr	r3, [pc, #28]	; (11cc <_get_sercom_index+0x40>)
    11b0:	5ccb      	ldrb	r3, [r1, r3]
    11b2:	429a      	cmp	r2, r3
    11b4:	d0f7      	beq.n	11a6 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    11b6:	3001      	adds	r0, #1
    11b8:	b2c0      	uxtb	r0, r0
    11ba:	e7ec      	b.n	1196 <_get_sercom_index+0xa>
    11bc:	0000117d 	.word	0x0000117d
    11c0:	0000023a 	.word	0x0000023a
    11c4:	000026b4 	.word	0x000026b4
    11c8:	000009a9 	.word	0x000009a9
    11cc:	00002664 	.word	0x00002664

000011d0 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    11d0:	b570      	push	{r4, r5, r6, lr}
    11d2:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    11d4:	4b38      	ldr	r3, [pc, #224]	; (12b8 <_usart_init+0xe8>)
    11d6:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    11d8:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    11da:	07db      	lsls	r3, r3, #31
    11dc:	d41d      	bmi.n	121a <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    11de:	0083      	lsls	r3, r0, #2
    11e0:	181b      	adds	r3, r3, r0
    11e2:	009a      	lsls	r2, r3, #2
    11e4:	4b35      	ldr	r3, [pc, #212]	; (12bc <_usart_init+0xec>)
    11e6:	189b      	adds	r3, r3, r2
    11e8:	685a      	ldr	r2, [r3, #4]
    11ea:	231c      	movs	r3, #28
    11ec:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11ee:	69e3      	ldr	r3, [r4, #28]
    11f0:	079b      	lsls	r3, r3, #30
    11f2:	d1fc      	bne.n	11ee <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    11f4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    11f6:	079b      	lsls	r3, r3, #30
    11f8:	d509      	bpl.n	120e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    11fa:	6823      	ldr	r3, [r4, #0]
    11fc:	2102      	movs	r1, #2
    11fe:	438b      	bics	r3, r1
    1200:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1202:	69e3      	ldr	r3, [r4, #28]
    1204:	079b      	lsls	r3, r3, #30
    1206:	d1fc      	bne.n	1202 <_usart_init+0x32>
    1208:	69e3      	ldr	r3, [r4, #28]
    120a:	079b      	lsls	r3, r3, #30
    120c:	d4fc      	bmi.n	1208 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    120e:	2301      	movs	r3, #1
    1210:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1212:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1214:	69e3      	ldr	r3, [r4, #28]
    1216:	079b      	lsls	r3, r3, #30
    1218:	d1fc      	bne.n	1214 <_usart_init+0x44>
    121a:	69e3      	ldr	r3, [r4, #28]
    121c:	07db      	lsls	r3, r3, #31
    121e:	d4fc      	bmi.n	121a <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1220:	0083      	lsls	r3, r0, #2
    1222:	181b      	adds	r3, r3, r0
    1224:	009a      	lsls	r2, r3, #2
    1226:	4b25      	ldr	r3, [pc, #148]	; (12bc <_usart_init+0xec>)
    1228:	189b      	adds	r3, r3, r2
    122a:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    122c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    122e:	69e3      	ldr	r3, [r4, #28]
    1230:	079b      	lsls	r3, r3, #30
    1232:	d1fc      	bne.n	122e <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1234:	0083      	lsls	r3, r0, #2
    1236:	181b      	adds	r3, r3, r0
    1238:	009a      	lsls	r2, r3, #2
    123a:	4b20      	ldr	r3, [pc, #128]	; (12bc <_usart_init+0xec>)
    123c:	189b      	adds	r3, r3, r2
    123e:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1240:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1242:	69e3      	ldr	r3, [r4, #28]
    1244:	075b      	lsls	r3, r3, #29
    1246:	d1fc      	bne.n	1242 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1248:	0083      	lsls	r3, r0, #2
    124a:	181b      	adds	r3, r3, r0
    124c:	009a      	lsls	r2, r3, #2
    124e:	4b1b      	ldr	r3, [pc, #108]	; (12bc <_usart_init+0xec>)
    1250:	189b      	adds	r3, r3, r2
    1252:	685b      	ldr	r3, [r3, #4]
    1254:	049a      	lsls	r2, r3, #18
    1256:	d40b      	bmi.n	1270 <_usart_init+0xa0>
    1258:	22c0      	movs	r2, #192	; 0xc0
    125a:	01d2      	lsls	r2, r2, #7
    125c:	4213      	tst	r3, r2
    125e:	d107      	bne.n	1270 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1260:	0083      	lsls	r3, r0, #2
    1262:	181b      	adds	r3, r3, r0
    1264:	009a      	lsls	r2, r3, #2
    1266:	4b15      	ldr	r3, [pc, #84]	; (12bc <_usart_init+0xec>)
    1268:	189b      	adds	r3, r3, r2
    126a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    126c:	81a3      	strh	r3, [r4, #12]
    126e:	e015      	b.n	129c <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1270:	0083      	lsls	r3, r0, #2
    1272:	181b      	adds	r3, r3, r0
    1274:	009a      	lsls	r2, r3, #2
    1276:	4911      	ldr	r1, [pc, #68]	; (12bc <_usart_init+0xec>)
    1278:	1889      	adds	r1, r1, r2
    127a:	898a      	ldrh	r2, [r1, #12]
    127c:	89a3      	ldrh	r3, [r4, #12]
    127e:	04d2      	lsls	r2, r2, #19
    1280:	0cd2      	lsrs	r2, r2, #19
    1282:	0b5b      	lsrs	r3, r3, #13
    1284:	035b      	lsls	r3, r3, #13
    1286:	4313      	orrs	r3, r2
    1288:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    128a:	7b8b      	ldrb	r3, [r1, #14]
    128c:	2207      	movs	r2, #7
    128e:	401a      	ands	r2, r3
    1290:	89a3      	ldrh	r3, [r4, #12]
    1292:	0352      	lsls	r2, r2, #13
    1294:	04db      	lsls	r3, r3, #19
    1296:	0cdb      	lsrs	r3, r3, #19
    1298:	4313      	orrs	r3, r2
    129a:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    129c:	4a07      	ldr	r2, [pc, #28]	; (12bc <_usart_init+0xec>)
    129e:	0083      	lsls	r3, r0, #2
    12a0:	181d      	adds	r5, r3, r0
    12a2:	00a9      	lsls	r1, r5, #2
    12a4:	000d      	movs	r5, r1
    12a6:	1851      	adds	r1, r2, r1
    12a8:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    12aa:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    12ac:	1952      	adds	r2, r2, r5
    12ae:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    12b0:	2330      	movs	r3, #48	; 0x30
    12b2:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
    12b4:	2000      	movs	r0, #0
    12b6:	bd70      	pop	{r4, r5, r6, pc}
    12b8:	0000118d 	.word	0x0000118d
    12bc:	00002664 	.word	0x00002664

000012c0 <_usart_sync_init>:
{
    12c0:	b570      	push	{r4, r5, r6, lr}
    12c2:	0005      	movs	r5, r0
    12c4:	000c      	movs	r4, r1
	ASSERT(device);
    12c6:	1e43      	subs	r3, r0, #1
    12c8:	4198      	sbcs	r0, r3
    12ca:	b2c0      	uxtb	r0, r0
    12cc:	22b4      	movs	r2, #180	; 0xb4
    12ce:	4904      	ldr	r1, [pc, #16]	; (12e0 <_usart_sync_init+0x20>)
    12d0:	4b04      	ldr	r3, [pc, #16]	; (12e4 <_usart_sync_init+0x24>)
    12d2:	4798      	blx	r3
	device->hw = hw;
    12d4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    12d6:	0020      	movs	r0, r4
    12d8:	4b03      	ldr	r3, [pc, #12]	; (12e8 <_usart_sync_init+0x28>)
    12da:	4798      	blx	r3
}
    12dc:	bd70      	pop	{r4, r5, r6, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	000026b4 	.word	0x000026b4
    12e4:	000009a9 	.word	0x000009a9
    12e8:	000011d1 	.word	0x000011d1

000012ec <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    12ec:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    12ee:	6813      	ldr	r3, [r2, #0]
    12f0:	2102      	movs	r1, #2
    12f2:	430b      	orrs	r3, r1
    12f4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12f6:	69d3      	ldr	r3, [r2, #28]
    12f8:	079b      	lsls	r3, r3, #30
    12fa:	d1fc      	bne.n	12f6 <_usart_sync_enable+0xa>
}
    12fc:	4770      	bx	lr

000012fe <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    12fe:	6803      	ldr	r3, [r0, #0]
    1300:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1302:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1304:	4770      	bx	lr

00001306 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1306:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1308:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    130a:	b2c0      	uxtb	r0, r0
}
    130c:	4770      	bx	lr

0000130e <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    130e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1310:	7e18      	ldrb	r0, [r3, #24]
    1312:	2301      	movs	r3, #1
    1314:	4018      	ands	r0, r3
}
    1316:	4770      	bx	lr

00001318 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1318:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    131a:	7e1b      	ldrb	r3, [r3, #24]
    131c:	085b      	lsrs	r3, r3, #1
    131e:	2001      	movs	r0, #1
    1320:	4018      	ands	r0, r3
}
    1322:	4770      	bx	lr

00001324 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1324:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1326:	7e1b      	ldrb	r3, [r3, #24]
    1328:	089b      	lsrs	r3, r3, #2
    132a:	2001      	movs	r0, #1
    132c:	4018      	ands	r0, r3
}
    132e:	4770      	bx	lr

00001330 <convert_cb_ADC_0>:
uint16_t      adc_value  = 0;
volatile bool adc_flag   = false;

static void convert_cb_ADC_0(const struct adc_async_descriptor *const descr, const uint8_t channel)
{
	adc_flag = true;
    1330:	2201      	movs	r2, #1
    1332:	4b01      	ldr	r3, [pc, #4]	; (1338 <convert_cb_ADC_0+0x8>)
    1334:	701a      	strb	r2, [r3, #0]
}
    1336:	4770      	bx	lr
    1338:	200000ac 	.word	0x200000ac

0000133c <main>:

int main(void)
{
    133c:	b570      	push	{r4, r5, r6, lr}
	atmel_start_init();
    133e:	4b1d      	ldr	r3, [pc, #116]	; (13b4 <main+0x78>)
    1340:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1342:	22c0      	movs	r2, #192	; 0xc0
    1344:	05d2      	lsls	r2, r2, #23
    1346:	2180      	movs	r1, #128	; 0x80
    1348:	0549      	lsls	r1, r1, #21
    134a:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    134c:	2482      	movs	r4, #130	; 0x82
    134e:	05e4      	lsls	r4, r4, #23
    1350:	205c      	movs	r0, #92	; 0x5c
    1352:	5c23      	ldrb	r3, [r4, r0]
    1354:	2504      	movs	r5, #4
    1356:	432b      	orrs	r3, r5
    1358:	b2db      	uxtb	r3, r3
    135a:	5423      	strb	r3, [r4, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    135c:	6191      	str	r1, [r2, #24]

	/* make sure pull-up enabled for the pin*/
	gpio_set_pin_pull_mode(BUTTON, GPIO_PULL_UP);

	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, convert_cb_ADC_0);
    135e:	4c16      	ldr	r4, [pc, #88]	; (13b8 <main+0x7c>)
    1360:	4b16      	ldr	r3, [pc, #88]	; (13bc <main+0x80>)
    1362:	2200      	movs	r2, #0
    1364:	2100      	movs	r1, #0
    1366:	0020      	movs	r0, r4
    1368:	4d15      	ldr	r5, [pc, #84]	; (13c0 <main+0x84>)
    136a:	47a8      	blx	r5
	adc_async_enable_channel(&ADC_0, 0);
    136c:	2100      	movs	r1, #0
    136e:	0020      	movs	r0, r4
    1370:	4b14      	ldr	r3, [pc, #80]	; (13c4 <main+0x88>)
    1372:	4798      	blx	r3

	while (1) {
		if (adc_flag) {
    1374:	4b14      	ldr	r3, [pc, #80]	; (13c8 <main+0x8c>)
    1376:	781b      	ldrb	r3, [r3, #0]
    1378:	2b00      	cmp	r3, #0
    137a:	d0fb      	beq.n	1374 <main+0x38>
			adc_async_read_channel(&ADC_0, 0, adc_buffer, adc_length);
    137c:	4b13      	ldr	r3, [pc, #76]	; (13cc <main+0x90>)
    137e:	881b      	ldrh	r3, [r3, #0]
    1380:	4c13      	ldr	r4, [pc, #76]	; (13d0 <main+0x94>)
    1382:	0022      	movs	r2, r4
    1384:	2100      	movs	r1, #0
    1386:	480c      	ldr	r0, [pc, #48]	; (13b8 <main+0x7c>)
    1388:	4d12      	ldr	r5, [pc, #72]	; (13d4 <main+0x98>)
    138a:	47a8      	blx	r5
			adc_value = adc_buffer[1] << 8 | adc_buffer[0];
    138c:	7861      	ldrb	r1, [r4, #1]
    138e:	0209      	lsls	r1, r1, #8
    1390:	7823      	ldrb	r3, [r4, #0]
    1392:	430b      	orrs	r3, r1
			adc_value = adc_value * 5000 / 4096;
    1394:	4910      	ldr	r1, [pc, #64]	; (13d8 <main+0x9c>)
    1396:	434b      	muls	r3, r1
    1398:	17d9      	asrs	r1, r3, #31
    139a:	0509      	lsls	r1, r1, #20
    139c:	0d09      	lsrs	r1, r1, #20
    139e:	18c9      	adds	r1, r1, r3
    13a0:	1309      	asrs	r1, r1, #12
    13a2:	b289      	uxth	r1, r1
    13a4:	4c08      	ldr	r4, [pc, #32]	; (13c8 <main+0x8c>)
    13a6:	8061      	strh	r1, [r4, #2]
			printf("ADC Value: %d\r\n", adc_value);
    13a8:	480c      	ldr	r0, [pc, #48]	; (13dc <main+0xa0>)
    13aa:	4b0d      	ldr	r3, [pc, #52]	; (13e0 <main+0xa4>)
    13ac:	4798      	blx	r3
			adc_flag = false;
    13ae:	2300      	movs	r3, #0
    13b0:	7023      	strb	r3, [r4, #0]
    13b2:	e7df      	b.n	1374 <main+0x38>
    13b4:	0000011d 	.word	0x0000011d
    13b8:	200000c8 	.word	0x200000c8
    13bc:	00001331 	.word	0x00001331
    13c0:	000005ed 	.word	0x000005ed
    13c4:	000005ad 	.word	0x000005ad
    13c8:	200000ac 	.word	0x200000ac
    13cc:	20000000 	.word	0x20000000
    13d0:	2000010c 	.word	0x2000010c
    13d4:	00000669 	.word	0x00000669
    13d8:	00001388 	.word	0x00001388
    13dc:	000026d0 	.word	0x000026d0
    13e0:	00001575 	.word	0x00001575

000013e4 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    13e4:	b510      	push	{r4, lr}
    13e6:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    13e8:	2800      	cmp	r0, #0
    13ea:	d109      	bne.n	1400 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    13ec:	0011      	movs	r1, r2
    13ee:	0018      	movs	r0, r3
    13f0:	4b05      	ldr	r3, [pc, #20]	; (1408 <_read+0x24>)
    13f2:	4798      	blx	r3
	if (n < 0) {
    13f4:	2800      	cmp	r0, #0
    13f6:	db00      	blt.n	13fa <_read+0x16>
		return -1;
	}

	return n;
}
    13f8:	bd10      	pop	{r4, pc}
		return -1;
    13fa:	2001      	movs	r0, #1
    13fc:	4240      	negs	r0, r0
    13fe:	e7fb      	b.n	13f8 <_read+0x14>
		return -1;
    1400:	2001      	movs	r0, #1
    1402:	4240      	negs	r0, r0
    1404:	e7f8      	b.n	13f8 <_read+0x14>
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	00001461 	.word	0x00001461

0000140c <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    140c:	b510      	push	{r4, lr}
    140e:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1410:	3801      	subs	r0, #1
    1412:	2802      	cmp	r0, #2
    1414:	d809      	bhi.n	142a <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1416:	0011      	movs	r1, r2
    1418:	0018      	movs	r0, r3
    141a:	4b05      	ldr	r3, [pc, #20]	; (1430 <_write+0x24>)
    141c:	4798      	blx	r3
	if (n < 0) {
    141e:	2800      	cmp	r0, #0
    1420:	db00      	blt.n	1424 <_write+0x18>
		return -1;
	}

	return n;
}
    1422:	bd10      	pop	{r4, pc}
		return -1;
    1424:	2001      	movs	r0, #1
    1426:	4240      	negs	r0, r0
    1428:	e7fb      	b.n	1422 <_write+0x16>
		return -1;
    142a:	2001      	movs	r0, #1
    142c:	4240      	negs	r0, r0
    142e:	e7f8      	b.n	1422 <_write+0x16>
    1430:	00001485 	.word	0x00001485

00001434 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1434:	b570      	push	{r4, r5, r6, lr}
    1436:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1438:	4d06      	ldr	r5, [pc, #24]	; (1454 <stdio_io_init+0x20>)
    143a:	682b      	ldr	r3, [r5, #0]
    143c:	6898      	ldr	r0, [r3, #8]
    143e:	2100      	movs	r1, #0
    1440:	4c05      	ldr	r4, [pc, #20]	; (1458 <stdio_io_init+0x24>)
    1442:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1444:	682b      	ldr	r3, [r5, #0]
    1446:	6858      	ldr	r0, [r3, #4]
    1448:	2100      	movs	r1, #0
    144a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    144c:	4b03      	ldr	r3, [pc, #12]	; (145c <stdio_io_init+0x28>)
    144e:	601e      	str	r6, [r3, #0]
}
    1450:	bd70      	pop	{r4, r5, r6, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	20000004 	.word	0x20000004
    1458:	000015a9 	.word	0x000015a9
    145c:	200000b0 	.word	0x200000b0

00001460 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1460:	b510      	push	{r4, lr}
    1462:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1464:	4b05      	ldr	r3, [pc, #20]	; (147c <stdio_io_read+0x1c>)
    1466:	6818      	ldr	r0, [r3, #0]
    1468:	2800      	cmp	r0, #0
    146a:	d004      	beq.n	1476 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    146c:	b28a      	uxth	r2, r1
    146e:	0021      	movs	r1, r4
    1470:	4b03      	ldr	r3, [pc, #12]	; (1480 <stdio_io_read+0x20>)
    1472:	4798      	blx	r3
}
    1474:	bd10      	pop	{r4, pc}
		return 0;
    1476:	2000      	movs	r0, #0
    1478:	e7fc      	b.n	1474 <stdio_io_read+0x14>
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	200000b0 	.word	0x200000b0
    1480:	00000819 	.word	0x00000819

00001484 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1484:	b510      	push	{r4, lr}
    1486:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1488:	4b05      	ldr	r3, [pc, #20]	; (14a0 <stdio_io_write+0x1c>)
    148a:	6818      	ldr	r0, [r3, #0]
    148c:	2800      	cmp	r0, #0
    148e:	d004      	beq.n	149a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1490:	b28a      	uxth	r2, r1
    1492:	0021      	movs	r1, r4
    1494:	4b03      	ldr	r3, [pc, #12]	; (14a4 <stdio_io_write+0x20>)
    1496:	4798      	blx	r3
}
    1498:	bd10      	pop	{r4, pc}
		return 0;
    149a:	2000      	movs	r0, #0
    149c:	e7fc      	b.n	1498 <stdio_io_write+0x14>
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	200000b0 	.word	0x200000b0
    14a4:	000007e1 	.word	0x000007e1

000014a8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    14a8:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    14aa:	4c04      	ldr	r4, [pc, #16]	; (14bc <stdio_redirect_init+0x14>)
    14ac:	0020      	movs	r0, r4
    14ae:	4b04      	ldr	r3, [pc, #16]	; (14c0 <stdio_redirect_init+0x18>)
    14b0:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    14b2:	0020      	movs	r0, r4
    14b4:	4b03      	ldr	r3, [pc, #12]	; (14c4 <stdio_redirect_init+0x1c>)
    14b6:	4798      	blx	r3
}
    14b8:	bd10      	pop	{r4, pc}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	200000bc 	.word	0x200000bc
    14c0:	0000097d 	.word	0x0000097d
    14c4:	00001435 	.word	0x00001435

000014c8 <__ffssi2>:
    14c8:	b510      	push	{r4, lr}
    14ca:	2300      	movs	r3, #0
    14cc:	2800      	cmp	r0, #0
    14ce:	d002      	beq.n	14d6 <__ffssi2+0xe>
    14d0:	f000 f804 	bl	14dc <__ctzsi2>
    14d4:	1c43      	adds	r3, r0, #1
    14d6:	0018      	movs	r0, r3
    14d8:	bd10      	pop	{r4, pc}
    14da:	46c0      	nop			; (mov r8, r8)

000014dc <__ctzsi2>:
    14dc:	4241      	negs	r1, r0
    14de:	4008      	ands	r0, r1
    14e0:	211c      	movs	r1, #28
    14e2:	2301      	movs	r3, #1
    14e4:	041b      	lsls	r3, r3, #16
    14e6:	4298      	cmp	r0, r3
    14e8:	d301      	bcc.n	14ee <__ctzsi2+0x12>
    14ea:	0c00      	lsrs	r0, r0, #16
    14ec:	3910      	subs	r1, #16
    14ee:	0a1b      	lsrs	r3, r3, #8
    14f0:	4298      	cmp	r0, r3
    14f2:	d301      	bcc.n	14f8 <__ctzsi2+0x1c>
    14f4:	0a00      	lsrs	r0, r0, #8
    14f6:	3908      	subs	r1, #8
    14f8:	091b      	lsrs	r3, r3, #4
    14fa:	4298      	cmp	r0, r3
    14fc:	d301      	bcc.n	1502 <__ctzsi2+0x26>
    14fe:	0900      	lsrs	r0, r0, #4
    1500:	3904      	subs	r1, #4
    1502:	a202      	add	r2, pc, #8	; (adr r2, 150c <__ctzsi2+0x30>)
    1504:	5c10      	ldrb	r0, [r2, r0]
    1506:	1a40      	subs	r0, r0, r1
    1508:	4770      	bx	lr
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	1d1d1c1b 	.word	0x1d1d1c1b
    1510:	1e1e1e1e 	.word	0x1e1e1e1e
    1514:	1f1f1f1f 	.word	0x1f1f1f1f
    1518:	1f1f1f1f 	.word	0x1f1f1f1f

0000151c <__libc_init_array>:
    151c:	b570      	push	{r4, r5, r6, lr}
    151e:	2600      	movs	r6, #0
    1520:	4d0c      	ldr	r5, [pc, #48]	; (1554 <__libc_init_array+0x38>)
    1522:	4c0d      	ldr	r4, [pc, #52]	; (1558 <__libc_init_array+0x3c>)
    1524:	1b64      	subs	r4, r4, r5
    1526:	10a4      	asrs	r4, r4, #2
    1528:	42a6      	cmp	r6, r4
    152a:	d109      	bne.n	1540 <__libc_init_array+0x24>
    152c:	2600      	movs	r6, #0
    152e:	f001 f923 	bl	2778 <_init>
    1532:	4d0a      	ldr	r5, [pc, #40]	; (155c <__libc_init_array+0x40>)
    1534:	4c0a      	ldr	r4, [pc, #40]	; (1560 <__libc_init_array+0x44>)
    1536:	1b64      	subs	r4, r4, r5
    1538:	10a4      	asrs	r4, r4, #2
    153a:	42a6      	cmp	r6, r4
    153c:	d105      	bne.n	154a <__libc_init_array+0x2e>
    153e:	bd70      	pop	{r4, r5, r6, pc}
    1540:	00b3      	lsls	r3, r6, #2
    1542:	58eb      	ldr	r3, [r5, r3]
    1544:	4798      	blx	r3
    1546:	3601      	adds	r6, #1
    1548:	e7ee      	b.n	1528 <__libc_init_array+0xc>
    154a:	00b3      	lsls	r3, r6, #2
    154c:	58eb      	ldr	r3, [r5, r3]
    154e:	4798      	blx	r3
    1550:	3601      	adds	r6, #1
    1552:	e7f2      	b.n	153a <__libc_init_array+0x1e>
    1554:	00002784 	.word	0x00002784
    1558:	00002784 	.word	0x00002784
    155c:	00002784 	.word	0x00002784
    1560:	00002788 	.word	0x00002788

00001564 <memset>:
    1564:	0003      	movs	r3, r0
    1566:	1882      	adds	r2, r0, r2
    1568:	4293      	cmp	r3, r2
    156a:	d100      	bne.n	156e <memset+0xa>
    156c:	4770      	bx	lr
    156e:	7019      	strb	r1, [r3, #0]
    1570:	3301      	adds	r3, #1
    1572:	e7f9      	b.n	1568 <memset+0x4>

00001574 <iprintf>:
    1574:	b40f      	push	{r0, r1, r2, r3}
    1576:	4b0b      	ldr	r3, [pc, #44]	; (15a4 <iprintf+0x30>)
    1578:	b513      	push	{r0, r1, r4, lr}
    157a:	681c      	ldr	r4, [r3, #0]
    157c:	2c00      	cmp	r4, #0
    157e:	d005      	beq.n	158c <iprintf+0x18>
    1580:	69a3      	ldr	r3, [r4, #24]
    1582:	2b00      	cmp	r3, #0
    1584:	d102      	bne.n	158c <iprintf+0x18>
    1586:	0020      	movs	r0, r4
    1588:	f000 fa88 	bl	1a9c <__sinit>
    158c:	ab05      	add	r3, sp, #20
    158e:	9a04      	ldr	r2, [sp, #16]
    1590:	68a1      	ldr	r1, [r4, #8]
    1592:	0020      	movs	r0, r4
    1594:	9301      	str	r3, [sp, #4]
    1596:	f000 fc5d 	bl	1e54 <_vfiprintf_r>
    159a:	bc16      	pop	{r1, r2, r4}
    159c:	bc08      	pop	{r3}
    159e:	b004      	add	sp, #16
    15a0:	4718      	bx	r3
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	20000004 	.word	0x20000004

000015a8 <setbuf>:
    15a8:	424a      	negs	r2, r1
    15aa:	414a      	adcs	r2, r1
    15ac:	2380      	movs	r3, #128	; 0x80
    15ae:	b510      	push	{r4, lr}
    15b0:	0052      	lsls	r2, r2, #1
    15b2:	00db      	lsls	r3, r3, #3
    15b4:	f000 f802 	bl	15bc <setvbuf>
    15b8:	bd10      	pop	{r4, pc}
	...

000015bc <setvbuf>:
    15bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15be:	001d      	movs	r5, r3
    15c0:	4b4f      	ldr	r3, [pc, #316]	; (1700 <setvbuf+0x144>)
    15c2:	b085      	sub	sp, #20
    15c4:	681e      	ldr	r6, [r3, #0]
    15c6:	0004      	movs	r4, r0
    15c8:	000f      	movs	r7, r1
    15ca:	9200      	str	r2, [sp, #0]
    15cc:	2e00      	cmp	r6, #0
    15ce:	d005      	beq.n	15dc <setvbuf+0x20>
    15d0:	69b3      	ldr	r3, [r6, #24]
    15d2:	2b00      	cmp	r3, #0
    15d4:	d102      	bne.n	15dc <setvbuf+0x20>
    15d6:	0030      	movs	r0, r6
    15d8:	f000 fa60 	bl	1a9c <__sinit>
    15dc:	4b49      	ldr	r3, [pc, #292]	; (1704 <setvbuf+0x148>)
    15de:	429c      	cmp	r4, r3
    15e0:	d150      	bne.n	1684 <setvbuf+0xc8>
    15e2:	6874      	ldr	r4, [r6, #4]
    15e4:	9b00      	ldr	r3, [sp, #0]
    15e6:	2b02      	cmp	r3, #2
    15e8:	d005      	beq.n	15f6 <setvbuf+0x3a>
    15ea:	2b01      	cmp	r3, #1
    15ec:	d900      	bls.n	15f0 <setvbuf+0x34>
    15ee:	e084      	b.n	16fa <setvbuf+0x13e>
    15f0:	2d00      	cmp	r5, #0
    15f2:	da00      	bge.n	15f6 <setvbuf+0x3a>
    15f4:	e081      	b.n	16fa <setvbuf+0x13e>
    15f6:	0021      	movs	r1, r4
    15f8:	0030      	movs	r0, r6
    15fa:	f000 f9e1 	bl	19c0 <_fflush_r>
    15fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1600:	2900      	cmp	r1, #0
    1602:	d008      	beq.n	1616 <setvbuf+0x5a>
    1604:	0023      	movs	r3, r4
    1606:	3344      	adds	r3, #68	; 0x44
    1608:	4299      	cmp	r1, r3
    160a:	d002      	beq.n	1612 <setvbuf+0x56>
    160c:	0030      	movs	r0, r6
    160e:	f000 fb51 	bl	1cb4 <_free_r>
    1612:	2300      	movs	r3, #0
    1614:	6363      	str	r3, [r4, #52]	; 0x34
    1616:	2300      	movs	r3, #0
    1618:	61a3      	str	r3, [r4, #24]
    161a:	6063      	str	r3, [r4, #4]
    161c:	89a3      	ldrh	r3, [r4, #12]
    161e:	061b      	lsls	r3, r3, #24
    1620:	d503      	bpl.n	162a <setvbuf+0x6e>
    1622:	6921      	ldr	r1, [r4, #16]
    1624:	0030      	movs	r0, r6
    1626:	f000 fb45 	bl	1cb4 <_free_r>
    162a:	89a3      	ldrh	r3, [r4, #12]
    162c:	4a36      	ldr	r2, [pc, #216]	; (1708 <setvbuf+0x14c>)
    162e:	4013      	ands	r3, r2
    1630:	81a3      	strh	r3, [r4, #12]
    1632:	9b00      	ldr	r3, [sp, #0]
    1634:	2b02      	cmp	r3, #2
    1636:	d05a      	beq.n	16ee <setvbuf+0x132>
    1638:	ab03      	add	r3, sp, #12
    163a:	aa02      	add	r2, sp, #8
    163c:	0021      	movs	r1, r4
    163e:	0030      	movs	r0, r6
    1640:	f000 fac2 	bl	1bc8 <__swhatbuf_r>
    1644:	89a3      	ldrh	r3, [r4, #12]
    1646:	4318      	orrs	r0, r3
    1648:	81a0      	strh	r0, [r4, #12]
    164a:	2d00      	cmp	r5, #0
    164c:	d124      	bne.n	1698 <setvbuf+0xdc>
    164e:	9d02      	ldr	r5, [sp, #8]
    1650:	0028      	movs	r0, r5
    1652:	f000 fb25 	bl	1ca0 <malloc>
    1656:	9501      	str	r5, [sp, #4]
    1658:	1e07      	subs	r7, r0, #0
    165a:	d142      	bne.n	16e2 <setvbuf+0x126>
    165c:	9b02      	ldr	r3, [sp, #8]
    165e:	9301      	str	r3, [sp, #4]
    1660:	42ab      	cmp	r3, r5
    1662:	d139      	bne.n	16d8 <setvbuf+0x11c>
    1664:	2001      	movs	r0, #1
    1666:	4240      	negs	r0, r0
    1668:	2302      	movs	r3, #2
    166a:	89a2      	ldrh	r2, [r4, #12]
    166c:	4313      	orrs	r3, r2
    166e:	81a3      	strh	r3, [r4, #12]
    1670:	2300      	movs	r3, #0
    1672:	60a3      	str	r3, [r4, #8]
    1674:	0023      	movs	r3, r4
    1676:	3347      	adds	r3, #71	; 0x47
    1678:	6023      	str	r3, [r4, #0]
    167a:	6123      	str	r3, [r4, #16]
    167c:	2301      	movs	r3, #1
    167e:	6163      	str	r3, [r4, #20]
    1680:	b005      	add	sp, #20
    1682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1684:	4b21      	ldr	r3, [pc, #132]	; (170c <setvbuf+0x150>)
    1686:	429c      	cmp	r4, r3
    1688:	d101      	bne.n	168e <setvbuf+0xd2>
    168a:	68b4      	ldr	r4, [r6, #8]
    168c:	e7aa      	b.n	15e4 <setvbuf+0x28>
    168e:	4b20      	ldr	r3, [pc, #128]	; (1710 <setvbuf+0x154>)
    1690:	429c      	cmp	r4, r3
    1692:	d1a7      	bne.n	15e4 <setvbuf+0x28>
    1694:	68f4      	ldr	r4, [r6, #12]
    1696:	e7a5      	b.n	15e4 <setvbuf+0x28>
    1698:	2f00      	cmp	r7, #0
    169a:	d0d9      	beq.n	1650 <setvbuf+0x94>
    169c:	69b3      	ldr	r3, [r6, #24]
    169e:	2b00      	cmp	r3, #0
    16a0:	d102      	bne.n	16a8 <setvbuf+0xec>
    16a2:	0030      	movs	r0, r6
    16a4:	f000 f9fa 	bl	1a9c <__sinit>
    16a8:	9b00      	ldr	r3, [sp, #0]
    16aa:	2b01      	cmp	r3, #1
    16ac:	d103      	bne.n	16b6 <setvbuf+0xfa>
    16ae:	89a3      	ldrh	r3, [r4, #12]
    16b0:	9a00      	ldr	r2, [sp, #0]
    16b2:	431a      	orrs	r2, r3
    16b4:	81a2      	strh	r2, [r4, #12]
    16b6:	2008      	movs	r0, #8
    16b8:	89a3      	ldrh	r3, [r4, #12]
    16ba:	6027      	str	r7, [r4, #0]
    16bc:	6127      	str	r7, [r4, #16]
    16be:	6165      	str	r5, [r4, #20]
    16c0:	4018      	ands	r0, r3
    16c2:	d018      	beq.n	16f6 <setvbuf+0x13a>
    16c4:	2001      	movs	r0, #1
    16c6:	4018      	ands	r0, r3
    16c8:	2300      	movs	r3, #0
    16ca:	4298      	cmp	r0, r3
    16cc:	d011      	beq.n	16f2 <setvbuf+0x136>
    16ce:	426d      	negs	r5, r5
    16d0:	60a3      	str	r3, [r4, #8]
    16d2:	61a5      	str	r5, [r4, #24]
    16d4:	0018      	movs	r0, r3
    16d6:	e7d3      	b.n	1680 <setvbuf+0xc4>
    16d8:	9801      	ldr	r0, [sp, #4]
    16da:	f000 fae1 	bl	1ca0 <malloc>
    16de:	1e07      	subs	r7, r0, #0
    16e0:	d0c0      	beq.n	1664 <setvbuf+0xa8>
    16e2:	2380      	movs	r3, #128	; 0x80
    16e4:	89a2      	ldrh	r2, [r4, #12]
    16e6:	9d01      	ldr	r5, [sp, #4]
    16e8:	4313      	orrs	r3, r2
    16ea:	81a3      	strh	r3, [r4, #12]
    16ec:	e7d6      	b.n	169c <setvbuf+0xe0>
    16ee:	2000      	movs	r0, #0
    16f0:	e7ba      	b.n	1668 <setvbuf+0xac>
    16f2:	60a5      	str	r5, [r4, #8]
    16f4:	e7c4      	b.n	1680 <setvbuf+0xc4>
    16f6:	60a0      	str	r0, [r4, #8]
    16f8:	e7c2      	b.n	1680 <setvbuf+0xc4>
    16fa:	2001      	movs	r0, #1
    16fc:	4240      	negs	r0, r0
    16fe:	e7bf      	b.n	1680 <setvbuf+0xc4>
    1700:	20000004 	.word	0x20000004
    1704:	00002704 	.word	0x00002704
    1708:	fffff35c 	.word	0xfffff35c
    170c:	00002724 	.word	0x00002724
    1710:	000026e4 	.word	0x000026e4

00001714 <__swbuf_r>:
    1714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1716:	0005      	movs	r5, r0
    1718:	000e      	movs	r6, r1
    171a:	0014      	movs	r4, r2
    171c:	2800      	cmp	r0, #0
    171e:	d004      	beq.n	172a <__swbuf_r+0x16>
    1720:	6983      	ldr	r3, [r0, #24]
    1722:	2b00      	cmp	r3, #0
    1724:	d101      	bne.n	172a <__swbuf_r+0x16>
    1726:	f000 f9b9 	bl	1a9c <__sinit>
    172a:	4b22      	ldr	r3, [pc, #136]	; (17b4 <__swbuf_r+0xa0>)
    172c:	429c      	cmp	r4, r3
    172e:	d12d      	bne.n	178c <__swbuf_r+0x78>
    1730:	686c      	ldr	r4, [r5, #4]
    1732:	69a3      	ldr	r3, [r4, #24]
    1734:	60a3      	str	r3, [r4, #8]
    1736:	89a3      	ldrh	r3, [r4, #12]
    1738:	071b      	lsls	r3, r3, #28
    173a:	d531      	bpl.n	17a0 <__swbuf_r+0x8c>
    173c:	6923      	ldr	r3, [r4, #16]
    173e:	2b00      	cmp	r3, #0
    1740:	d02e      	beq.n	17a0 <__swbuf_r+0x8c>
    1742:	6823      	ldr	r3, [r4, #0]
    1744:	6922      	ldr	r2, [r4, #16]
    1746:	b2f7      	uxtb	r7, r6
    1748:	1a98      	subs	r0, r3, r2
    174a:	6963      	ldr	r3, [r4, #20]
    174c:	b2f6      	uxtb	r6, r6
    174e:	4298      	cmp	r0, r3
    1750:	db05      	blt.n	175e <__swbuf_r+0x4a>
    1752:	0021      	movs	r1, r4
    1754:	0028      	movs	r0, r5
    1756:	f000 f933 	bl	19c0 <_fflush_r>
    175a:	2800      	cmp	r0, #0
    175c:	d126      	bne.n	17ac <__swbuf_r+0x98>
    175e:	68a3      	ldr	r3, [r4, #8]
    1760:	3001      	adds	r0, #1
    1762:	3b01      	subs	r3, #1
    1764:	60a3      	str	r3, [r4, #8]
    1766:	6823      	ldr	r3, [r4, #0]
    1768:	1c5a      	adds	r2, r3, #1
    176a:	6022      	str	r2, [r4, #0]
    176c:	701f      	strb	r7, [r3, #0]
    176e:	6963      	ldr	r3, [r4, #20]
    1770:	4298      	cmp	r0, r3
    1772:	d004      	beq.n	177e <__swbuf_r+0x6a>
    1774:	89a3      	ldrh	r3, [r4, #12]
    1776:	07db      	lsls	r3, r3, #31
    1778:	d51a      	bpl.n	17b0 <__swbuf_r+0x9c>
    177a:	2e0a      	cmp	r6, #10
    177c:	d118      	bne.n	17b0 <__swbuf_r+0x9c>
    177e:	0021      	movs	r1, r4
    1780:	0028      	movs	r0, r5
    1782:	f000 f91d 	bl	19c0 <_fflush_r>
    1786:	2800      	cmp	r0, #0
    1788:	d012      	beq.n	17b0 <__swbuf_r+0x9c>
    178a:	e00f      	b.n	17ac <__swbuf_r+0x98>
    178c:	4b0a      	ldr	r3, [pc, #40]	; (17b8 <__swbuf_r+0xa4>)
    178e:	429c      	cmp	r4, r3
    1790:	d101      	bne.n	1796 <__swbuf_r+0x82>
    1792:	68ac      	ldr	r4, [r5, #8]
    1794:	e7cd      	b.n	1732 <__swbuf_r+0x1e>
    1796:	4b09      	ldr	r3, [pc, #36]	; (17bc <__swbuf_r+0xa8>)
    1798:	429c      	cmp	r4, r3
    179a:	d1ca      	bne.n	1732 <__swbuf_r+0x1e>
    179c:	68ec      	ldr	r4, [r5, #12]
    179e:	e7c8      	b.n	1732 <__swbuf_r+0x1e>
    17a0:	0021      	movs	r1, r4
    17a2:	0028      	movs	r0, r5
    17a4:	f000 f80c 	bl	17c0 <__swsetup_r>
    17a8:	2800      	cmp	r0, #0
    17aa:	d0ca      	beq.n	1742 <__swbuf_r+0x2e>
    17ac:	2601      	movs	r6, #1
    17ae:	4276      	negs	r6, r6
    17b0:	0030      	movs	r0, r6
    17b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17b4:	00002704 	.word	0x00002704
    17b8:	00002724 	.word	0x00002724
    17bc:	000026e4 	.word	0x000026e4

000017c0 <__swsetup_r>:
    17c0:	4b36      	ldr	r3, [pc, #216]	; (189c <__swsetup_r+0xdc>)
    17c2:	b570      	push	{r4, r5, r6, lr}
    17c4:	681d      	ldr	r5, [r3, #0]
    17c6:	0006      	movs	r6, r0
    17c8:	000c      	movs	r4, r1
    17ca:	2d00      	cmp	r5, #0
    17cc:	d005      	beq.n	17da <__swsetup_r+0x1a>
    17ce:	69ab      	ldr	r3, [r5, #24]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d102      	bne.n	17da <__swsetup_r+0x1a>
    17d4:	0028      	movs	r0, r5
    17d6:	f000 f961 	bl	1a9c <__sinit>
    17da:	4b31      	ldr	r3, [pc, #196]	; (18a0 <__swsetup_r+0xe0>)
    17dc:	429c      	cmp	r4, r3
    17de:	d10f      	bne.n	1800 <__swsetup_r+0x40>
    17e0:	686c      	ldr	r4, [r5, #4]
    17e2:	230c      	movs	r3, #12
    17e4:	5ee2      	ldrsh	r2, [r4, r3]
    17e6:	b293      	uxth	r3, r2
    17e8:	0719      	lsls	r1, r3, #28
    17ea:	d42d      	bmi.n	1848 <__swsetup_r+0x88>
    17ec:	06d9      	lsls	r1, r3, #27
    17ee:	d411      	bmi.n	1814 <__swsetup_r+0x54>
    17f0:	2309      	movs	r3, #9
    17f2:	2001      	movs	r0, #1
    17f4:	6033      	str	r3, [r6, #0]
    17f6:	3337      	adds	r3, #55	; 0x37
    17f8:	4313      	orrs	r3, r2
    17fa:	81a3      	strh	r3, [r4, #12]
    17fc:	4240      	negs	r0, r0
    17fe:	bd70      	pop	{r4, r5, r6, pc}
    1800:	4b28      	ldr	r3, [pc, #160]	; (18a4 <__swsetup_r+0xe4>)
    1802:	429c      	cmp	r4, r3
    1804:	d101      	bne.n	180a <__swsetup_r+0x4a>
    1806:	68ac      	ldr	r4, [r5, #8]
    1808:	e7eb      	b.n	17e2 <__swsetup_r+0x22>
    180a:	4b27      	ldr	r3, [pc, #156]	; (18a8 <__swsetup_r+0xe8>)
    180c:	429c      	cmp	r4, r3
    180e:	d1e8      	bne.n	17e2 <__swsetup_r+0x22>
    1810:	68ec      	ldr	r4, [r5, #12]
    1812:	e7e6      	b.n	17e2 <__swsetup_r+0x22>
    1814:	075b      	lsls	r3, r3, #29
    1816:	d513      	bpl.n	1840 <__swsetup_r+0x80>
    1818:	6b61      	ldr	r1, [r4, #52]	; 0x34
    181a:	2900      	cmp	r1, #0
    181c:	d008      	beq.n	1830 <__swsetup_r+0x70>
    181e:	0023      	movs	r3, r4
    1820:	3344      	adds	r3, #68	; 0x44
    1822:	4299      	cmp	r1, r3
    1824:	d002      	beq.n	182c <__swsetup_r+0x6c>
    1826:	0030      	movs	r0, r6
    1828:	f000 fa44 	bl	1cb4 <_free_r>
    182c:	2300      	movs	r3, #0
    182e:	6363      	str	r3, [r4, #52]	; 0x34
    1830:	2224      	movs	r2, #36	; 0x24
    1832:	89a3      	ldrh	r3, [r4, #12]
    1834:	4393      	bics	r3, r2
    1836:	81a3      	strh	r3, [r4, #12]
    1838:	2300      	movs	r3, #0
    183a:	6063      	str	r3, [r4, #4]
    183c:	6923      	ldr	r3, [r4, #16]
    183e:	6023      	str	r3, [r4, #0]
    1840:	2308      	movs	r3, #8
    1842:	89a2      	ldrh	r2, [r4, #12]
    1844:	4313      	orrs	r3, r2
    1846:	81a3      	strh	r3, [r4, #12]
    1848:	6923      	ldr	r3, [r4, #16]
    184a:	2b00      	cmp	r3, #0
    184c:	d10b      	bne.n	1866 <__swsetup_r+0xa6>
    184e:	21a0      	movs	r1, #160	; 0xa0
    1850:	2280      	movs	r2, #128	; 0x80
    1852:	89a3      	ldrh	r3, [r4, #12]
    1854:	0089      	lsls	r1, r1, #2
    1856:	0092      	lsls	r2, r2, #2
    1858:	400b      	ands	r3, r1
    185a:	4293      	cmp	r3, r2
    185c:	d003      	beq.n	1866 <__swsetup_r+0xa6>
    185e:	0021      	movs	r1, r4
    1860:	0030      	movs	r0, r6
    1862:	f000 f9d9 	bl	1c18 <__smakebuf_r>
    1866:	2301      	movs	r3, #1
    1868:	89a2      	ldrh	r2, [r4, #12]
    186a:	4013      	ands	r3, r2
    186c:	d011      	beq.n	1892 <__swsetup_r+0xd2>
    186e:	2300      	movs	r3, #0
    1870:	60a3      	str	r3, [r4, #8]
    1872:	6963      	ldr	r3, [r4, #20]
    1874:	425b      	negs	r3, r3
    1876:	61a3      	str	r3, [r4, #24]
    1878:	2000      	movs	r0, #0
    187a:	6923      	ldr	r3, [r4, #16]
    187c:	4283      	cmp	r3, r0
    187e:	d1be      	bne.n	17fe <__swsetup_r+0x3e>
    1880:	230c      	movs	r3, #12
    1882:	5ee2      	ldrsh	r2, [r4, r3]
    1884:	0613      	lsls	r3, r2, #24
    1886:	d5ba      	bpl.n	17fe <__swsetup_r+0x3e>
    1888:	2340      	movs	r3, #64	; 0x40
    188a:	4313      	orrs	r3, r2
    188c:	81a3      	strh	r3, [r4, #12]
    188e:	3801      	subs	r0, #1
    1890:	e7b5      	b.n	17fe <__swsetup_r+0x3e>
    1892:	0792      	lsls	r2, r2, #30
    1894:	d400      	bmi.n	1898 <__swsetup_r+0xd8>
    1896:	6963      	ldr	r3, [r4, #20]
    1898:	60a3      	str	r3, [r4, #8]
    189a:	e7ed      	b.n	1878 <__swsetup_r+0xb8>
    189c:	20000004 	.word	0x20000004
    18a0:	00002704 	.word	0x00002704
    18a4:	00002724 	.word	0x00002724
    18a8:	000026e4 	.word	0x000026e4

000018ac <__sflush_r>:
    18ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18ae:	898a      	ldrh	r2, [r1, #12]
    18b0:	0005      	movs	r5, r0
    18b2:	000c      	movs	r4, r1
    18b4:	0713      	lsls	r3, r2, #28
    18b6:	d460      	bmi.n	197a <__sflush_r+0xce>
    18b8:	684b      	ldr	r3, [r1, #4]
    18ba:	2b00      	cmp	r3, #0
    18bc:	dc04      	bgt.n	18c8 <__sflush_r+0x1c>
    18be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    18c0:	2b00      	cmp	r3, #0
    18c2:	dc01      	bgt.n	18c8 <__sflush_r+0x1c>
    18c4:	2000      	movs	r0, #0
    18c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    18c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    18ca:	2f00      	cmp	r7, #0
    18cc:	d0fa      	beq.n	18c4 <__sflush_r+0x18>
    18ce:	2300      	movs	r3, #0
    18d0:	682e      	ldr	r6, [r5, #0]
    18d2:	602b      	str	r3, [r5, #0]
    18d4:	2380      	movs	r3, #128	; 0x80
    18d6:	015b      	lsls	r3, r3, #5
    18d8:	401a      	ands	r2, r3
    18da:	d034      	beq.n	1946 <__sflush_r+0x9a>
    18dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    18de:	89a3      	ldrh	r3, [r4, #12]
    18e0:	075b      	lsls	r3, r3, #29
    18e2:	d506      	bpl.n	18f2 <__sflush_r+0x46>
    18e4:	6863      	ldr	r3, [r4, #4]
    18e6:	1ac0      	subs	r0, r0, r3
    18e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    18ea:	2b00      	cmp	r3, #0
    18ec:	d001      	beq.n	18f2 <__sflush_r+0x46>
    18ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    18f0:	1ac0      	subs	r0, r0, r3
    18f2:	0002      	movs	r2, r0
    18f4:	6a21      	ldr	r1, [r4, #32]
    18f6:	2300      	movs	r3, #0
    18f8:	0028      	movs	r0, r5
    18fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    18fc:	47b8      	blx	r7
    18fe:	89a1      	ldrh	r1, [r4, #12]
    1900:	1c43      	adds	r3, r0, #1
    1902:	d106      	bne.n	1912 <__sflush_r+0x66>
    1904:	682b      	ldr	r3, [r5, #0]
    1906:	2b1d      	cmp	r3, #29
    1908:	d831      	bhi.n	196e <__sflush_r+0xc2>
    190a:	4a2c      	ldr	r2, [pc, #176]	; (19bc <__sflush_r+0x110>)
    190c:	40da      	lsrs	r2, r3
    190e:	07d3      	lsls	r3, r2, #31
    1910:	d52d      	bpl.n	196e <__sflush_r+0xc2>
    1912:	2300      	movs	r3, #0
    1914:	6063      	str	r3, [r4, #4]
    1916:	6923      	ldr	r3, [r4, #16]
    1918:	6023      	str	r3, [r4, #0]
    191a:	04cb      	lsls	r3, r1, #19
    191c:	d505      	bpl.n	192a <__sflush_r+0x7e>
    191e:	1c43      	adds	r3, r0, #1
    1920:	d102      	bne.n	1928 <__sflush_r+0x7c>
    1922:	682b      	ldr	r3, [r5, #0]
    1924:	2b00      	cmp	r3, #0
    1926:	d100      	bne.n	192a <__sflush_r+0x7e>
    1928:	6560      	str	r0, [r4, #84]	; 0x54
    192a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    192c:	602e      	str	r6, [r5, #0]
    192e:	2900      	cmp	r1, #0
    1930:	d0c8      	beq.n	18c4 <__sflush_r+0x18>
    1932:	0023      	movs	r3, r4
    1934:	3344      	adds	r3, #68	; 0x44
    1936:	4299      	cmp	r1, r3
    1938:	d002      	beq.n	1940 <__sflush_r+0x94>
    193a:	0028      	movs	r0, r5
    193c:	f000 f9ba 	bl	1cb4 <_free_r>
    1940:	2000      	movs	r0, #0
    1942:	6360      	str	r0, [r4, #52]	; 0x34
    1944:	e7bf      	b.n	18c6 <__sflush_r+0x1a>
    1946:	2301      	movs	r3, #1
    1948:	6a21      	ldr	r1, [r4, #32]
    194a:	0028      	movs	r0, r5
    194c:	47b8      	blx	r7
    194e:	1c43      	adds	r3, r0, #1
    1950:	d1c5      	bne.n	18de <__sflush_r+0x32>
    1952:	682b      	ldr	r3, [r5, #0]
    1954:	2b00      	cmp	r3, #0
    1956:	d0c2      	beq.n	18de <__sflush_r+0x32>
    1958:	2b1d      	cmp	r3, #29
    195a:	d001      	beq.n	1960 <__sflush_r+0xb4>
    195c:	2b16      	cmp	r3, #22
    195e:	d101      	bne.n	1964 <__sflush_r+0xb8>
    1960:	602e      	str	r6, [r5, #0]
    1962:	e7af      	b.n	18c4 <__sflush_r+0x18>
    1964:	2340      	movs	r3, #64	; 0x40
    1966:	89a2      	ldrh	r2, [r4, #12]
    1968:	4313      	orrs	r3, r2
    196a:	81a3      	strh	r3, [r4, #12]
    196c:	e7ab      	b.n	18c6 <__sflush_r+0x1a>
    196e:	2340      	movs	r3, #64	; 0x40
    1970:	430b      	orrs	r3, r1
    1972:	2001      	movs	r0, #1
    1974:	81a3      	strh	r3, [r4, #12]
    1976:	4240      	negs	r0, r0
    1978:	e7a5      	b.n	18c6 <__sflush_r+0x1a>
    197a:	690f      	ldr	r7, [r1, #16]
    197c:	2f00      	cmp	r7, #0
    197e:	d0a1      	beq.n	18c4 <__sflush_r+0x18>
    1980:	680b      	ldr	r3, [r1, #0]
    1982:	600f      	str	r7, [r1, #0]
    1984:	1bdb      	subs	r3, r3, r7
    1986:	9301      	str	r3, [sp, #4]
    1988:	2300      	movs	r3, #0
    198a:	0792      	lsls	r2, r2, #30
    198c:	d100      	bne.n	1990 <__sflush_r+0xe4>
    198e:	694b      	ldr	r3, [r1, #20]
    1990:	60a3      	str	r3, [r4, #8]
    1992:	9b01      	ldr	r3, [sp, #4]
    1994:	2b00      	cmp	r3, #0
    1996:	dc00      	bgt.n	199a <__sflush_r+0xee>
    1998:	e794      	b.n	18c4 <__sflush_r+0x18>
    199a:	9b01      	ldr	r3, [sp, #4]
    199c:	003a      	movs	r2, r7
    199e:	6a21      	ldr	r1, [r4, #32]
    19a0:	0028      	movs	r0, r5
    19a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    19a4:	47b0      	blx	r6
    19a6:	2800      	cmp	r0, #0
    19a8:	dc03      	bgt.n	19b2 <__sflush_r+0x106>
    19aa:	2340      	movs	r3, #64	; 0x40
    19ac:	89a2      	ldrh	r2, [r4, #12]
    19ae:	4313      	orrs	r3, r2
    19b0:	e7df      	b.n	1972 <__sflush_r+0xc6>
    19b2:	9b01      	ldr	r3, [sp, #4]
    19b4:	183f      	adds	r7, r7, r0
    19b6:	1a1b      	subs	r3, r3, r0
    19b8:	9301      	str	r3, [sp, #4]
    19ba:	e7ea      	b.n	1992 <__sflush_r+0xe6>
    19bc:	20400001 	.word	0x20400001

000019c0 <_fflush_r>:
    19c0:	690b      	ldr	r3, [r1, #16]
    19c2:	b570      	push	{r4, r5, r6, lr}
    19c4:	0005      	movs	r5, r0
    19c6:	000c      	movs	r4, r1
    19c8:	2b00      	cmp	r3, #0
    19ca:	d101      	bne.n	19d0 <_fflush_r+0x10>
    19cc:	2000      	movs	r0, #0
    19ce:	bd70      	pop	{r4, r5, r6, pc}
    19d0:	2800      	cmp	r0, #0
    19d2:	d004      	beq.n	19de <_fflush_r+0x1e>
    19d4:	6983      	ldr	r3, [r0, #24]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d101      	bne.n	19de <_fflush_r+0x1e>
    19da:	f000 f85f 	bl	1a9c <__sinit>
    19de:	4b0b      	ldr	r3, [pc, #44]	; (1a0c <_fflush_r+0x4c>)
    19e0:	429c      	cmp	r4, r3
    19e2:	d109      	bne.n	19f8 <_fflush_r+0x38>
    19e4:	686c      	ldr	r4, [r5, #4]
    19e6:	220c      	movs	r2, #12
    19e8:	5ea3      	ldrsh	r3, [r4, r2]
    19ea:	2b00      	cmp	r3, #0
    19ec:	d0ee      	beq.n	19cc <_fflush_r+0xc>
    19ee:	0021      	movs	r1, r4
    19f0:	0028      	movs	r0, r5
    19f2:	f7ff ff5b 	bl	18ac <__sflush_r>
    19f6:	e7ea      	b.n	19ce <_fflush_r+0xe>
    19f8:	4b05      	ldr	r3, [pc, #20]	; (1a10 <_fflush_r+0x50>)
    19fa:	429c      	cmp	r4, r3
    19fc:	d101      	bne.n	1a02 <_fflush_r+0x42>
    19fe:	68ac      	ldr	r4, [r5, #8]
    1a00:	e7f1      	b.n	19e6 <_fflush_r+0x26>
    1a02:	4b04      	ldr	r3, [pc, #16]	; (1a14 <_fflush_r+0x54>)
    1a04:	429c      	cmp	r4, r3
    1a06:	d1ee      	bne.n	19e6 <_fflush_r+0x26>
    1a08:	68ec      	ldr	r4, [r5, #12]
    1a0a:	e7ec      	b.n	19e6 <_fflush_r+0x26>
    1a0c:	00002704 	.word	0x00002704
    1a10:	00002724 	.word	0x00002724
    1a14:	000026e4 	.word	0x000026e4

00001a18 <_cleanup_r>:
    1a18:	b510      	push	{r4, lr}
    1a1a:	4902      	ldr	r1, [pc, #8]	; (1a24 <_cleanup_r+0xc>)
    1a1c:	f000 f8b2 	bl	1b84 <_fwalk_reent>
    1a20:	bd10      	pop	{r4, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	000019c1 	.word	0x000019c1

00001a28 <std.isra.0>:
    1a28:	2300      	movs	r3, #0
    1a2a:	b510      	push	{r4, lr}
    1a2c:	0004      	movs	r4, r0
    1a2e:	6003      	str	r3, [r0, #0]
    1a30:	6043      	str	r3, [r0, #4]
    1a32:	6083      	str	r3, [r0, #8]
    1a34:	8181      	strh	r1, [r0, #12]
    1a36:	6643      	str	r3, [r0, #100]	; 0x64
    1a38:	81c2      	strh	r2, [r0, #14]
    1a3a:	6103      	str	r3, [r0, #16]
    1a3c:	6143      	str	r3, [r0, #20]
    1a3e:	6183      	str	r3, [r0, #24]
    1a40:	0019      	movs	r1, r3
    1a42:	2208      	movs	r2, #8
    1a44:	305c      	adds	r0, #92	; 0x5c
    1a46:	f7ff fd8d 	bl	1564 <memset>
    1a4a:	4b05      	ldr	r3, [pc, #20]	; (1a60 <std.isra.0+0x38>)
    1a4c:	6224      	str	r4, [r4, #32]
    1a4e:	6263      	str	r3, [r4, #36]	; 0x24
    1a50:	4b04      	ldr	r3, [pc, #16]	; (1a64 <std.isra.0+0x3c>)
    1a52:	62a3      	str	r3, [r4, #40]	; 0x28
    1a54:	4b04      	ldr	r3, [pc, #16]	; (1a68 <std.isra.0+0x40>)
    1a56:	62e3      	str	r3, [r4, #44]	; 0x2c
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <std.isra.0+0x44>)
    1a5a:	6323      	str	r3, [r4, #48]	; 0x30
    1a5c:	bd10      	pop	{r4, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	000023c1 	.word	0x000023c1
    1a64:	000023e9 	.word	0x000023e9
    1a68:	00002421 	.word	0x00002421
    1a6c:	0000244d 	.word	0x0000244d

00001a70 <__sfmoreglue>:
    1a70:	b570      	push	{r4, r5, r6, lr}
    1a72:	2568      	movs	r5, #104	; 0x68
    1a74:	1e4a      	subs	r2, r1, #1
    1a76:	4355      	muls	r5, r2
    1a78:	000e      	movs	r6, r1
    1a7a:	0029      	movs	r1, r5
    1a7c:	3174      	adds	r1, #116	; 0x74
    1a7e:	f000 f963 	bl	1d48 <_malloc_r>
    1a82:	1e04      	subs	r4, r0, #0
    1a84:	d008      	beq.n	1a98 <__sfmoreglue+0x28>
    1a86:	2100      	movs	r1, #0
    1a88:	002a      	movs	r2, r5
    1a8a:	6001      	str	r1, [r0, #0]
    1a8c:	6046      	str	r6, [r0, #4]
    1a8e:	300c      	adds	r0, #12
    1a90:	60a0      	str	r0, [r4, #8]
    1a92:	3268      	adds	r2, #104	; 0x68
    1a94:	f7ff fd66 	bl	1564 <memset>
    1a98:	0020      	movs	r0, r4
    1a9a:	bd70      	pop	{r4, r5, r6, pc}

00001a9c <__sinit>:
    1a9c:	6983      	ldr	r3, [r0, #24]
    1a9e:	b513      	push	{r0, r1, r4, lr}
    1aa0:	0004      	movs	r4, r0
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d128      	bne.n	1af8 <__sinit+0x5c>
    1aa6:	6483      	str	r3, [r0, #72]	; 0x48
    1aa8:	64c3      	str	r3, [r0, #76]	; 0x4c
    1aaa:	6503      	str	r3, [r0, #80]	; 0x50
    1aac:	4b13      	ldr	r3, [pc, #76]	; (1afc <__sinit+0x60>)
    1aae:	4a14      	ldr	r2, [pc, #80]	; (1b00 <__sinit+0x64>)
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	6282      	str	r2, [r0, #40]	; 0x28
    1ab4:	9301      	str	r3, [sp, #4]
    1ab6:	4298      	cmp	r0, r3
    1ab8:	d101      	bne.n	1abe <__sinit+0x22>
    1aba:	2301      	movs	r3, #1
    1abc:	6183      	str	r3, [r0, #24]
    1abe:	0020      	movs	r0, r4
    1ac0:	f000 f820 	bl	1b04 <__sfp>
    1ac4:	6060      	str	r0, [r4, #4]
    1ac6:	0020      	movs	r0, r4
    1ac8:	f000 f81c 	bl	1b04 <__sfp>
    1acc:	60a0      	str	r0, [r4, #8]
    1ace:	0020      	movs	r0, r4
    1ad0:	f000 f818 	bl	1b04 <__sfp>
    1ad4:	2200      	movs	r2, #0
    1ad6:	60e0      	str	r0, [r4, #12]
    1ad8:	2104      	movs	r1, #4
    1ada:	6860      	ldr	r0, [r4, #4]
    1adc:	f7ff ffa4 	bl	1a28 <std.isra.0>
    1ae0:	2201      	movs	r2, #1
    1ae2:	2109      	movs	r1, #9
    1ae4:	68a0      	ldr	r0, [r4, #8]
    1ae6:	f7ff ff9f 	bl	1a28 <std.isra.0>
    1aea:	2202      	movs	r2, #2
    1aec:	2112      	movs	r1, #18
    1aee:	68e0      	ldr	r0, [r4, #12]
    1af0:	f7ff ff9a 	bl	1a28 <std.isra.0>
    1af4:	2301      	movs	r3, #1
    1af6:	61a3      	str	r3, [r4, #24]
    1af8:	bd13      	pop	{r0, r1, r4, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	000026e0 	.word	0x000026e0
    1b00:	00001a19 	.word	0x00001a19

00001b04 <__sfp>:
    1b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b06:	4b1e      	ldr	r3, [pc, #120]	; (1b80 <__sfp+0x7c>)
    1b08:	0007      	movs	r7, r0
    1b0a:	681e      	ldr	r6, [r3, #0]
    1b0c:	69b3      	ldr	r3, [r6, #24]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d102      	bne.n	1b18 <__sfp+0x14>
    1b12:	0030      	movs	r0, r6
    1b14:	f7ff ffc2 	bl	1a9c <__sinit>
    1b18:	3648      	adds	r6, #72	; 0x48
    1b1a:	68b4      	ldr	r4, [r6, #8]
    1b1c:	6873      	ldr	r3, [r6, #4]
    1b1e:	3b01      	subs	r3, #1
    1b20:	d504      	bpl.n	1b2c <__sfp+0x28>
    1b22:	6833      	ldr	r3, [r6, #0]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d007      	beq.n	1b38 <__sfp+0x34>
    1b28:	6836      	ldr	r6, [r6, #0]
    1b2a:	e7f6      	b.n	1b1a <__sfp+0x16>
    1b2c:	220c      	movs	r2, #12
    1b2e:	5ea5      	ldrsh	r5, [r4, r2]
    1b30:	2d00      	cmp	r5, #0
    1b32:	d00d      	beq.n	1b50 <__sfp+0x4c>
    1b34:	3468      	adds	r4, #104	; 0x68
    1b36:	e7f2      	b.n	1b1e <__sfp+0x1a>
    1b38:	2104      	movs	r1, #4
    1b3a:	0038      	movs	r0, r7
    1b3c:	f7ff ff98 	bl	1a70 <__sfmoreglue>
    1b40:	6030      	str	r0, [r6, #0]
    1b42:	2800      	cmp	r0, #0
    1b44:	d1f0      	bne.n	1b28 <__sfp+0x24>
    1b46:	230c      	movs	r3, #12
    1b48:	0004      	movs	r4, r0
    1b4a:	603b      	str	r3, [r7, #0]
    1b4c:	0020      	movs	r0, r4
    1b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b50:	2301      	movs	r3, #1
    1b52:	0020      	movs	r0, r4
    1b54:	425b      	negs	r3, r3
    1b56:	81e3      	strh	r3, [r4, #14]
    1b58:	3302      	adds	r3, #2
    1b5a:	81a3      	strh	r3, [r4, #12]
    1b5c:	6665      	str	r5, [r4, #100]	; 0x64
    1b5e:	6025      	str	r5, [r4, #0]
    1b60:	60a5      	str	r5, [r4, #8]
    1b62:	6065      	str	r5, [r4, #4]
    1b64:	6125      	str	r5, [r4, #16]
    1b66:	6165      	str	r5, [r4, #20]
    1b68:	61a5      	str	r5, [r4, #24]
    1b6a:	2208      	movs	r2, #8
    1b6c:	0029      	movs	r1, r5
    1b6e:	305c      	adds	r0, #92	; 0x5c
    1b70:	f7ff fcf8 	bl	1564 <memset>
    1b74:	6365      	str	r5, [r4, #52]	; 0x34
    1b76:	63a5      	str	r5, [r4, #56]	; 0x38
    1b78:	64a5      	str	r5, [r4, #72]	; 0x48
    1b7a:	64e5      	str	r5, [r4, #76]	; 0x4c
    1b7c:	e7e6      	b.n	1b4c <__sfp+0x48>
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	000026e0 	.word	0x000026e0

00001b84 <_fwalk_reent>:
    1b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b86:	0004      	movs	r4, r0
    1b88:	0007      	movs	r7, r0
    1b8a:	2600      	movs	r6, #0
    1b8c:	9101      	str	r1, [sp, #4]
    1b8e:	3448      	adds	r4, #72	; 0x48
    1b90:	2c00      	cmp	r4, #0
    1b92:	d101      	bne.n	1b98 <_fwalk_reent+0x14>
    1b94:	0030      	movs	r0, r6
    1b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b98:	6863      	ldr	r3, [r4, #4]
    1b9a:	68a5      	ldr	r5, [r4, #8]
    1b9c:	9300      	str	r3, [sp, #0]
    1b9e:	9b00      	ldr	r3, [sp, #0]
    1ba0:	3b01      	subs	r3, #1
    1ba2:	9300      	str	r3, [sp, #0]
    1ba4:	d501      	bpl.n	1baa <_fwalk_reent+0x26>
    1ba6:	6824      	ldr	r4, [r4, #0]
    1ba8:	e7f2      	b.n	1b90 <_fwalk_reent+0xc>
    1baa:	89ab      	ldrh	r3, [r5, #12]
    1bac:	2b01      	cmp	r3, #1
    1bae:	d908      	bls.n	1bc2 <_fwalk_reent+0x3e>
    1bb0:	220e      	movs	r2, #14
    1bb2:	5eab      	ldrsh	r3, [r5, r2]
    1bb4:	3301      	adds	r3, #1
    1bb6:	d004      	beq.n	1bc2 <_fwalk_reent+0x3e>
    1bb8:	0029      	movs	r1, r5
    1bba:	0038      	movs	r0, r7
    1bbc:	9b01      	ldr	r3, [sp, #4]
    1bbe:	4798      	blx	r3
    1bc0:	4306      	orrs	r6, r0
    1bc2:	3568      	adds	r5, #104	; 0x68
    1bc4:	e7eb      	b.n	1b9e <_fwalk_reent+0x1a>
	...

00001bc8 <__swhatbuf_r>:
    1bc8:	b570      	push	{r4, r5, r6, lr}
    1bca:	000e      	movs	r6, r1
    1bcc:	001d      	movs	r5, r3
    1bce:	230e      	movs	r3, #14
    1bd0:	5ec9      	ldrsh	r1, [r1, r3]
    1bd2:	b090      	sub	sp, #64	; 0x40
    1bd4:	0014      	movs	r4, r2
    1bd6:	2900      	cmp	r1, #0
    1bd8:	da07      	bge.n	1bea <__swhatbuf_r+0x22>
    1bda:	2300      	movs	r3, #0
    1bdc:	602b      	str	r3, [r5, #0]
    1bde:	89b3      	ldrh	r3, [r6, #12]
    1be0:	061b      	lsls	r3, r3, #24
    1be2:	d411      	bmi.n	1c08 <__swhatbuf_r+0x40>
    1be4:	2380      	movs	r3, #128	; 0x80
    1be6:	00db      	lsls	r3, r3, #3
    1be8:	e00f      	b.n	1c0a <__swhatbuf_r+0x42>
    1bea:	aa01      	add	r2, sp, #4
    1bec:	f000 fc5a 	bl	24a4 <_fstat_r>
    1bf0:	2800      	cmp	r0, #0
    1bf2:	dbf2      	blt.n	1bda <__swhatbuf_r+0x12>
    1bf4:	22f0      	movs	r2, #240	; 0xf0
    1bf6:	9b02      	ldr	r3, [sp, #8]
    1bf8:	0212      	lsls	r2, r2, #8
    1bfa:	4013      	ands	r3, r2
    1bfc:	4a05      	ldr	r2, [pc, #20]	; (1c14 <__swhatbuf_r+0x4c>)
    1bfe:	189b      	adds	r3, r3, r2
    1c00:	425a      	negs	r2, r3
    1c02:	4153      	adcs	r3, r2
    1c04:	602b      	str	r3, [r5, #0]
    1c06:	e7ed      	b.n	1be4 <__swhatbuf_r+0x1c>
    1c08:	2340      	movs	r3, #64	; 0x40
    1c0a:	2000      	movs	r0, #0
    1c0c:	6023      	str	r3, [r4, #0]
    1c0e:	b010      	add	sp, #64	; 0x40
    1c10:	bd70      	pop	{r4, r5, r6, pc}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	ffffe000 	.word	0xffffe000

00001c18 <__smakebuf_r>:
    1c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1c1a:	2602      	movs	r6, #2
    1c1c:	898b      	ldrh	r3, [r1, #12]
    1c1e:	0005      	movs	r5, r0
    1c20:	000c      	movs	r4, r1
    1c22:	4233      	tst	r3, r6
    1c24:	d006      	beq.n	1c34 <__smakebuf_r+0x1c>
    1c26:	0023      	movs	r3, r4
    1c28:	3347      	adds	r3, #71	; 0x47
    1c2a:	6023      	str	r3, [r4, #0]
    1c2c:	6123      	str	r3, [r4, #16]
    1c2e:	2301      	movs	r3, #1
    1c30:	6163      	str	r3, [r4, #20]
    1c32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1c34:	ab01      	add	r3, sp, #4
    1c36:	466a      	mov	r2, sp
    1c38:	f7ff ffc6 	bl	1bc8 <__swhatbuf_r>
    1c3c:	9900      	ldr	r1, [sp, #0]
    1c3e:	0007      	movs	r7, r0
    1c40:	0028      	movs	r0, r5
    1c42:	f000 f881 	bl	1d48 <_malloc_r>
    1c46:	2800      	cmp	r0, #0
    1c48:	d108      	bne.n	1c5c <__smakebuf_r+0x44>
    1c4a:	220c      	movs	r2, #12
    1c4c:	5ea3      	ldrsh	r3, [r4, r2]
    1c4e:	059a      	lsls	r2, r3, #22
    1c50:	d4ef      	bmi.n	1c32 <__smakebuf_r+0x1a>
    1c52:	2203      	movs	r2, #3
    1c54:	4393      	bics	r3, r2
    1c56:	431e      	orrs	r6, r3
    1c58:	81a6      	strh	r6, [r4, #12]
    1c5a:	e7e4      	b.n	1c26 <__smakebuf_r+0xe>
    1c5c:	4b0f      	ldr	r3, [pc, #60]	; (1c9c <__smakebuf_r+0x84>)
    1c5e:	62ab      	str	r3, [r5, #40]	; 0x28
    1c60:	2380      	movs	r3, #128	; 0x80
    1c62:	89a2      	ldrh	r2, [r4, #12]
    1c64:	6020      	str	r0, [r4, #0]
    1c66:	4313      	orrs	r3, r2
    1c68:	81a3      	strh	r3, [r4, #12]
    1c6a:	9b00      	ldr	r3, [sp, #0]
    1c6c:	6120      	str	r0, [r4, #16]
    1c6e:	6163      	str	r3, [r4, #20]
    1c70:	9b01      	ldr	r3, [sp, #4]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d00d      	beq.n	1c92 <__smakebuf_r+0x7a>
    1c76:	230e      	movs	r3, #14
    1c78:	5ee1      	ldrsh	r1, [r4, r3]
    1c7a:	0028      	movs	r0, r5
    1c7c:	f000 fc24 	bl	24c8 <_isatty_r>
    1c80:	2800      	cmp	r0, #0
    1c82:	d006      	beq.n	1c92 <__smakebuf_r+0x7a>
    1c84:	2203      	movs	r2, #3
    1c86:	89a3      	ldrh	r3, [r4, #12]
    1c88:	4393      	bics	r3, r2
    1c8a:	001a      	movs	r2, r3
    1c8c:	2301      	movs	r3, #1
    1c8e:	4313      	orrs	r3, r2
    1c90:	81a3      	strh	r3, [r4, #12]
    1c92:	89a0      	ldrh	r0, [r4, #12]
    1c94:	4338      	orrs	r0, r7
    1c96:	81a0      	strh	r0, [r4, #12]
    1c98:	e7cb      	b.n	1c32 <__smakebuf_r+0x1a>
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	00001a19 	.word	0x00001a19

00001ca0 <malloc>:
    1ca0:	b510      	push	{r4, lr}
    1ca2:	4b03      	ldr	r3, [pc, #12]	; (1cb0 <malloc+0x10>)
    1ca4:	0001      	movs	r1, r0
    1ca6:	6818      	ldr	r0, [r3, #0]
    1ca8:	f000 f84e 	bl	1d48 <_malloc_r>
    1cac:	bd10      	pop	{r4, pc}
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	20000004 	.word	0x20000004

00001cb4 <_free_r>:
    1cb4:	b570      	push	{r4, r5, r6, lr}
    1cb6:	0005      	movs	r5, r0
    1cb8:	2900      	cmp	r1, #0
    1cba:	d010      	beq.n	1cde <_free_r+0x2a>
    1cbc:	1f0c      	subs	r4, r1, #4
    1cbe:	6823      	ldr	r3, [r4, #0]
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	da00      	bge.n	1cc6 <_free_r+0x12>
    1cc4:	18e4      	adds	r4, r4, r3
    1cc6:	0028      	movs	r0, r5
    1cc8:	f000 fc2f 	bl	252a <__malloc_lock>
    1ccc:	4a1d      	ldr	r2, [pc, #116]	; (1d44 <_free_r+0x90>)
    1cce:	6813      	ldr	r3, [r2, #0]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d105      	bne.n	1ce0 <_free_r+0x2c>
    1cd4:	6063      	str	r3, [r4, #4]
    1cd6:	6014      	str	r4, [r2, #0]
    1cd8:	0028      	movs	r0, r5
    1cda:	f000 fc27 	bl	252c <__malloc_unlock>
    1cde:	bd70      	pop	{r4, r5, r6, pc}
    1ce0:	42a3      	cmp	r3, r4
    1ce2:	d909      	bls.n	1cf8 <_free_r+0x44>
    1ce4:	6821      	ldr	r1, [r4, #0]
    1ce6:	1860      	adds	r0, r4, r1
    1ce8:	4283      	cmp	r3, r0
    1cea:	d1f3      	bne.n	1cd4 <_free_r+0x20>
    1cec:	6818      	ldr	r0, [r3, #0]
    1cee:	685b      	ldr	r3, [r3, #4]
    1cf0:	1841      	adds	r1, r0, r1
    1cf2:	6021      	str	r1, [r4, #0]
    1cf4:	e7ee      	b.n	1cd4 <_free_r+0x20>
    1cf6:	0013      	movs	r3, r2
    1cf8:	685a      	ldr	r2, [r3, #4]
    1cfa:	2a00      	cmp	r2, #0
    1cfc:	d001      	beq.n	1d02 <_free_r+0x4e>
    1cfe:	42a2      	cmp	r2, r4
    1d00:	d9f9      	bls.n	1cf6 <_free_r+0x42>
    1d02:	6819      	ldr	r1, [r3, #0]
    1d04:	1858      	adds	r0, r3, r1
    1d06:	42a0      	cmp	r0, r4
    1d08:	d10b      	bne.n	1d22 <_free_r+0x6e>
    1d0a:	6820      	ldr	r0, [r4, #0]
    1d0c:	1809      	adds	r1, r1, r0
    1d0e:	1858      	adds	r0, r3, r1
    1d10:	6019      	str	r1, [r3, #0]
    1d12:	4282      	cmp	r2, r0
    1d14:	d1e0      	bne.n	1cd8 <_free_r+0x24>
    1d16:	6810      	ldr	r0, [r2, #0]
    1d18:	6852      	ldr	r2, [r2, #4]
    1d1a:	1841      	adds	r1, r0, r1
    1d1c:	6019      	str	r1, [r3, #0]
    1d1e:	605a      	str	r2, [r3, #4]
    1d20:	e7da      	b.n	1cd8 <_free_r+0x24>
    1d22:	42a0      	cmp	r0, r4
    1d24:	d902      	bls.n	1d2c <_free_r+0x78>
    1d26:	230c      	movs	r3, #12
    1d28:	602b      	str	r3, [r5, #0]
    1d2a:	e7d5      	b.n	1cd8 <_free_r+0x24>
    1d2c:	6821      	ldr	r1, [r4, #0]
    1d2e:	1860      	adds	r0, r4, r1
    1d30:	4282      	cmp	r2, r0
    1d32:	d103      	bne.n	1d3c <_free_r+0x88>
    1d34:	6810      	ldr	r0, [r2, #0]
    1d36:	6852      	ldr	r2, [r2, #4]
    1d38:	1841      	adds	r1, r0, r1
    1d3a:	6021      	str	r1, [r4, #0]
    1d3c:	6062      	str	r2, [r4, #4]
    1d3e:	605c      	str	r4, [r3, #4]
    1d40:	e7ca      	b.n	1cd8 <_free_r+0x24>
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	200000b4 	.word	0x200000b4

00001d48 <_malloc_r>:
    1d48:	2303      	movs	r3, #3
    1d4a:	b570      	push	{r4, r5, r6, lr}
    1d4c:	1ccd      	adds	r5, r1, #3
    1d4e:	439d      	bics	r5, r3
    1d50:	3508      	adds	r5, #8
    1d52:	0006      	movs	r6, r0
    1d54:	2d0c      	cmp	r5, #12
    1d56:	d21e      	bcs.n	1d96 <_malloc_r+0x4e>
    1d58:	250c      	movs	r5, #12
    1d5a:	42a9      	cmp	r1, r5
    1d5c:	d81d      	bhi.n	1d9a <_malloc_r+0x52>
    1d5e:	0030      	movs	r0, r6
    1d60:	f000 fbe3 	bl	252a <__malloc_lock>
    1d64:	4a25      	ldr	r2, [pc, #148]	; (1dfc <_malloc_r+0xb4>)
    1d66:	6814      	ldr	r4, [r2, #0]
    1d68:	0021      	movs	r1, r4
    1d6a:	2900      	cmp	r1, #0
    1d6c:	d119      	bne.n	1da2 <_malloc_r+0x5a>
    1d6e:	4c24      	ldr	r4, [pc, #144]	; (1e00 <_malloc_r+0xb8>)
    1d70:	6823      	ldr	r3, [r4, #0]
    1d72:	2b00      	cmp	r3, #0
    1d74:	d103      	bne.n	1d7e <_malloc_r+0x36>
    1d76:	0030      	movs	r0, r6
    1d78:	f000 fb10 	bl	239c <_sbrk_r>
    1d7c:	6020      	str	r0, [r4, #0]
    1d7e:	0029      	movs	r1, r5
    1d80:	0030      	movs	r0, r6
    1d82:	f000 fb0b 	bl	239c <_sbrk_r>
    1d86:	1c43      	adds	r3, r0, #1
    1d88:	d12c      	bne.n	1de4 <_malloc_r+0x9c>
    1d8a:	230c      	movs	r3, #12
    1d8c:	0030      	movs	r0, r6
    1d8e:	6033      	str	r3, [r6, #0]
    1d90:	f000 fbcc 	bl	252c <__malloc_unlock>
    1d94:	e003      	b.n	1d9e <_malloc_r+0x56>
    1d96:	2d00      	cmp	r5, #0
    1d98:	dadf      	bge.n	1d5a <_malloc_r+0x12>
    1d9a:	230c      	movs	r3, #12
    1d9c:	6033      	str	r3, [r6, #0]
    1d9e:	2000      	movs	r0, #0
    1da0:	bd70      	pop	{r4, r5, r6, pc}
    1da2:	680b      	ldr	r3, [r1, #0]
    1da4:	1b5b      	subs	r3, r3, r5
    1da6:	d41a      	bmi.n	1dde <_malloc_r+0x96>
    1da8:	2b0b      	cmp	r3, #11
    1daa:	d903      	bls.n	1db4 <_malloc_r+0x6c>
    1dac:	600b      	str	r3, [r1, #0]
    1dae:	18cc      	adds	r4, r1, r3
    1db0:	6025      	str	r5, [r4, #0]
    1db2:	e003      	b.n	1dbc <_malloc_r+0x74>
    1db4:	428c      	cmp	r4, r1
    1db6:	d10e      	bne.n	1dd6 <_malloc_r+0x8e>
    1db8:	6863      	ldr	r3, [r4, #4]
    1dba:	6013      	str	r3, [r2, #0]
    1dbc:	0030      	movs	r0, r6
    1dbe:	f000 fbb5 	bl	252c <__malloc_unlock>
    1dc2:	0020      	movs	r0, r4
    1dc4:	2207      	movs	r2, #7
    1dc6:	300b      	adds	r0, #11
    1dc8:	1d23      	adds	r3, r4, #4
    1dca:	4390      	bics	r0, r2
    1dcc:	1ac3      	subs	r3, r0, r3
    1dce:	d0e7      	beq.n	1da0 <_malloc_r+0x58>
    1dd0:	425a      	negs	r2, r3
    1dd2:	50e2      	str	r2, [r4, r3]
    1dd4:	e7e4      	b.n	1da0 <_malloc_r+0x58>
    1dd6:	684b      	ldr	r3, [r1, #4]
    1dd8:	6063      	str	r3, [r4, #4]
    1dda:	000c      	movs	r4, r1
    1ddc:	e7ee      	b.n	1dbc <_malloc_r+0x74>
    1dde:	000c      	movs	r4, r1
    1de0:	6849      	ldr	r1, [r1, #4]
    1de2:	e7c2      	b.n	1d6a <_malloc_r+0x22>
    1de4:	2303      	movs	r3, #3
    1de6:	1cc4      	adds	r4, r0, #3
    1de8:	439c      	bics	r4, r3
    1dea:	42a0      	cmp	r0, r4
    1dec:	d0e0      	beq.n	1db0 <_malloc_r+0x68>
    1dee:	1a21      	subs	r1, r4, r0
    1df0:	0030      	movs	r0, r6
    1df2:	f000 fad3 	bl	239c <_sbrk_r>
    1df6:	1c43      	adds	r3, r0, #1
    1df8:	d1da      	bne.n	1db0 <_malloc_r+0x68>
    1dfa:	e7c6      	b.n	1d8a <_malloc_r+0x42>
    1dfc:	200000b4 	.word	0x200000b4
    1e00:	200000b8 	.word	0x200000b8

00001e04 <__sfputc_r>:
    1e04:	6893      	ldr	r3, [r2, #8]
    1e06:	b510      	push	{r4, lr}
    1e08:	3b01      	subs	r3, #1
    1e0a:	6093      	str	r3, [r2, #8]
    1e0c:	2b00      	cmp	r3, #0
    1e0e:	da05      	bge.n	1e1c <__sfputc_r+0x18>
    1e10:	6994      	ldr	r4, [r2, #24]
    1e12:	42a3      	cmp	r3, r4
    1e14:	db08      	blt.n	1e28 <__sfputc_r+0x24>
    1e16:	b2cb      	uxtb	r3, r1
    1e18:	2b0a      	cmp	r3, #10
    1e1a:	d005      	beq.n	1e28 <__sfputc_r+0x24>
    1e1c:	6813      	ldr	r3, [r2, #0]
    1e1e:	1c58      	adds	r0, r3, #1
    1e20:	6010      	str	r0, [r2, #0]
    1e22:	7019      	strb	r1, [r3, #0]
    1e24:	b2c8      	uxtb	r0, r1
    1e26:	bd10      	pop	{r4, pc}
    1e28:	f7ff fc74 	bl	1714 <__swbuf_r>
    1e2c:	e7fb      	b.n	1e26 <__sfputc_r+0x22>

00001e2e <__sfputs_r>:
    1e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e30:	0006      	movs	r6, r0
    1e32:	000f      	movs	r7, r1
    1e34:	0014      	movs	r4, r2
    1e36:	18d5      	adds	r5, r2, r3
    1e38:	42ac      	cmp	r4, r5
    1e3a:	d101      	bne.n	1e40 <__sfputs_r+0x12>
    1e3c:	2000      	movs	r0, #0
    1e3e:	e007      	b.n	1e50 <__sfputs_r+0x22>
    1e40:	7821      	ldrb	r1, [r4, #0]
    1e42:	003a      	movs	r2, r7
    1e44:	0030      	movs	r0, r6
    1e46:	f7ff ffdd 	bl	1e04 <__sfputc_r>
    1e4a:	3401      	adds	r4, #1
    1e4c:	1c43      	adds	r3, r0, #1
    1e4e:	d1f3      	bne.n	1e38 <__sfputs_r+0xa>
    1e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001e54 <_vfiprintf_r>:
    1e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e56:	b09f      	sub	sp, #124	; 0x7c
    1e58:	0006      	movs	r6, r0
    1e5a:	000f      	movs	r7, r1
    1e5c:	0014      	movs	r4, r2
    1e5e:	9305      	str	r3, [sp, #20]
    1e60:	2800      	cmp	r0, #0
    1e62:	d004      	beq.n	1e6e <_vfiprintf_r+0x1a>
    1e64:	6983      	ldr	r3, [r0, #24]
    1e66:	2b00      	cmp	r3, #0
    1e68:	d101      	bne.n	1e6e <_vfiprintf_r+0x1a>
    1e6a:	f7ff fe17 	bl	1a9c <__sinit>
    1e6e:	4b7f      	ldr	r3, [pc, #508]	; (206c <STACK_SIZE+0x6c>)
    1e70:	429f      	cmp	r7, r3
    1e72:	d15c      	bne.n	1f2e <_vfiprintf_r+0xda>
    1e74:	6877      	ldr	r7, [r6, #4]
    1e76:	89bb      	ldrh	r3, [r7, #12]
    1e78:	071b      	lsls	r3, r3, #28
    1e7a:	d562      	bpl.n	1f42 <_vfiprintf_r+0xee>
    1e7c:	693b      	ldr	r3, [r7, #16]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d05f      	beq.n	1f42 <_vfiprintf_r+0xee>
    1e82:	2300      	movs	r3, #0
    1e84:	ad06      	add	r5, sp, #24
    1e86:	616b      	str	r3, [r5, #20]
    1e88:	3320      	adds	r3, #32
    1e8a:	766b      	strb	r3, [r5, #25]
    1e8c:	3310      	adds	r3, #16
    1e8e:	76ab      	strb	r3, [r5, #26]
    1e90:	9402      	str	r4, [sp, #8]
    1e92:	9c02      	ldr	r4, [sp, #8]
    1e94:	7823      	ldrb	r3, [r4, #0]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d15d      	bne.n	1f56 <_vfiprintf_r+0x102>
    1e9a:	9b02      	ldr	r3, [sp, #8]
    1e9c:	1ae3      	subs	r3, r4, r3
    1e9e:	9304      	str	r3, [sp, #16]
    1ea0:	d00d      	beq.n	1ebe <_vfiprintf_r+0x6a>
    1ea2:	9b04      	ldr	r3, [sp, #16]
    1ea4:	9a02      	ldr	r2, [sp, #8]
    1ea6:	0039      	movs	r1, r7
    1ea8:	0030      	movs	r0, r6
    1eaa:	f7ff ffc0 	bl	1e2e <__sfputs_r>
    1eae:	1c43      	adds	r3, r0, #1
    1eb0:	d100      	bne.n	1eb4 <_vfiprintf_r+0x60>
    1eb2:	e0cc      	b.n	204e <STACK_SIZE+0x4e>
    1eb4:	696a      	ldr	r2, [r5, #20]
    1eb6:	9b04      	ldr	r3, [sp, #16]
    1eb8:	4694      	mov	ip, r2
    1eba:	4463      	add	r3, ip
    1ebc:	616b      	str	r3, [r5, #20]
    1ebe:	7823      	ldrb	r3, [r4, #0]
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d100      	bne.n	1ec6 <_vfiprintf_r+0x72>
    1ec4:	e0c3      	b.n	204e <STACK_SIZE+0x4e>
    1ec6:	2201      	movs	r2, #1
    1ec8:	2300      	movs	r3, #0
    1eca:	4252      	negs	r2, r2
    1ecc:	606a      	str	r2, [r5, #4]
    1ece:	a902      	add	r1, sp, #8
    1ed0:	3254      	adds	r2, #84	; 0x54
    1ed2:	1852      	adds	r2, r2, r1
    1ed4:	3401      	adds	r4, #1
    1ed6:	602b      	str	r3, [r5, #0]
    1ed8:	60eb      	str	r3, [r5, #12]
    1eda:	60ab      	str	r3, [r5, #8]
    1edc:	7013      	strb	r3, [r2, #0]
    1ede:	65ab      	str	r3, [r5, #88]	; 0x58
    1ee0:	7821      	ldrb	r1, [r4, #0]
    1ee2:	2205      	movs	r2, #5
    1ee4:	4862      	ldr	r0, [pc, #392]	; (2070 <STACK_SIZE+0x70>)
    1ee6:	f000 fb15 	bl	2514 <memchr>
    1eea:	1c63      	adds	r3, r4, #1
    1eec:	469c      	mov	ip, r3
    1eee:	2800      	cmp	r0, #0
    1ef0:	d135      	bne.n	1f5e <_vfiprintf_r+0x10a>
    1ef2:	6829      	ldr	r1, [r5, #0]
    1ef4:	06cb      	lsls	r3, r1, #27
    1ef6:	d504      	bpl.n	1f02 <_vfiprintf_r+0xae>
    1ef8:	2353      	movs	r3, #83	; 0x53
    1efa:	aa02      	add	r2, sp, #8
    1efc:	3020      	adds	r0, #32
    1efe:	189b      	adds	r3, r3, r2
    1f00:	7018      	strb	r0, [r3, #0]
    1f02:	070b      	lsls	r3, r1, #28
    1f04:	d504      	bpl.n	1f10 <_vfiprintf_r+0xbc>
    1f06:	2353      	movs	r3, #83	; 0x53
    1f08:	202b      	movs	r0, #43	; 0x2b
    1f0a:	aa02      	add	r2, sp, #8
    1f0c:	189b      	adds	r3, r3, r2
    1f0e:	7018      	strb	r0, [r3, #0]
    1f10:	7823      	ldrb	r3, [r4, #0]
    1f12:	2b2a      	cmp	r3, #42	; 0x2a
    1f14:	d02c      	beq.n	1f70 <_vfiprintf_r+0x11c>
    1f16:	2000      	movs	r0, #0
    1f18:	210a      	movs	r1, #10
    1f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f1c:	7822      	ldrb	r2, [r4, #0]
    1f1e:	3a30      	subs	r2, #48	; 0x30
    1f20:	2a09      	cmp	r2, #9
    1f22:	d800      	bhi.n	1f26 <_vfiprintf_r+0xd2>
    1f24:	e06b      	b.n	1ffe <_vfiprintf_r+0x1aa>
    1f26:	2800      	cmp	r0, #0
    1f28:	d02a      	beq.n	1f80 <_vfiprintf_r+0x12c>
    1f2a:	9309      	str	r3, [sp, #36]	; 0x24
    1f2c:	e028      	b.n	1f80 <_vfiprintf_r+0x12c>
    1f2e:	4b51      	ldr	r3, [pc, #324]	; (2074 <STACK_SIZE+0x74>)
    1f30:	429f      	cmp	r7, r3
    1f32:	d101      	bne.n	1f38 <_vfiprintf_r+0xe4>
    1f34:	68b7      	ldr	r7, [r6, #8]
    1f36:	e79e      	b.n	1e76 <_vfiprintf_r+0x22>
    1f38:	4b4f      	ldr	r3, [pc, #316]	; (2078 <STACK_SIZE+0x78>)
    1f3a:	429f      	cmp	r7, r3
    1f3c:	d19b      	bne.n	1e76 <_vfiprintf_r+0x22>
    1f3e:	68f7      	ldr	r7, [r6, #12]
    1f40:	e799      	b.n	1e76 <_vfiprintf_r+0x22>
    1f42:	0039      	movs	r1, r7
    1f44:	0030      	movs	r0, r6
    1f46:	f7ff fc3b 	bl	17c0 <__swsetup_r>
    1f4a:	2800      	cmp	r0, #0
    1f4c:	d099      	beq.n	1e82 <_vfiprintf_r+0x2e>
    1f4e:	2001      	movs	r0, #1
    1f50:	4240      	negs	r0, r0
    1f52:	b01f      	add	sp, #124	; 0x7c
    1f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f56:	2b25      	cmp	r3, #37	; 0x25
    1f58:	d09f      	beq.n	1e9a <_vfiprintf_r+0x46>
    1f5a:	3401      	adds	r4, #1
    1f5c:	e79a      	b.n	1e94 <_vfiprintf_r+0x40>
    1f5e:	4b44      	ldr	r3, [pc, #272]	; (2070 <STACK_SIZE+0x70>)
    1f60:	6829      	ldr	r1, [r5, #0]
    1f62:	1ac0      	subs	r0, r0, r3
    1f64:	2301      	movs	r3, #1
    1f66:	4083      	lsls	r3, r0
    1f68:	430b      	orrs	r3, r1
    1f6a:	602b      	str	r3, [r5, #0]
    1f6c:	4664      	mov	r4, ip
    1f6e:	e7b7      	b.n	1ee0 <_vfiprintf_r+0x8c>
    1f70:	9b05      	ldr	r3, [sp, #20]
    1f72:	1d18      	adds	r0, r3, #4
    1f74:	681b      	ldr	r3, [r3, #0]
    1f76:	9005      	str	r0, [sp, #20]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	db3a      	blt.n	1ff2 <_vfiprintf_r+0x19e>
    1f7c:	9309      	str	r3, [sp, #36]	; 0x24
    1f7e:	4664      	mov	r4, ip
    1f80:	7823      	ldrb	r3, [r4, #0]
    1f82:	2b2e      	cmp	r3, #46	; 0x2e
    1f84:	d10b      	bne.n	1f9e <_vfiprintf_r+0x14a>
    1f86:	7863      	ldrb	r3, [r4, #1]
    1f88:	1c62      	adds	r2, r4, #1
    1f8a:	2b2a      	cmp	r3, #42	; 0x2a
    1f8c:	d13f      	bne.n	200e <STACK_SIZE+0xe>
    1f8e:	9b05      	ldr	r3, [sp, #20]
    1f90:	3402      	adds	r4, #2
    1f92:	1d1a      	adds	r2, r3, #4
    1f94:	681b      	ldr	r3, [r3, #0]
    1f96:	9205      	str	r2, [sp, #20]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	db35      	blt.n	2008 <STACK_SIZE+0x8>
    1f9c:	9307      	str	r3, [sp, #28]
    1f9e:	7821      	ldrb	r1, [r4, #0]
    1fa0:	2203      	movs	r2, #3
    1fa2:	4836      	ldr	r0, [pc, #216]	; (207c <STACK_SIZE+0x7c>)
    1fa4:	f000 fab6 	bl	2514 <memchr>
    1fa8:	2800      	cmp	r0, #0
    1faa:	d007      	beq.n	1fbc <_vfiprintf_r+0x168>
    1fac:	4b33      	ldr	r3, [pc, #204]	; (207c <STACK_SIZE+0x7c>)
    1fae:	682a      	ldr	r2, [r5, #0]
    1fb0:	1ac0      	subs	r0, r0, r3
    1fb2:	2340      	movs	r3, #64	; 0x40
    1fb4:	4083      	lsls	r3, r0
    1fb6:	4313      	orrs	r3, r2
    1fb8:	602b      	str	r3, [r5, #0]
    1fba:	3401      	adds	r4, #1
    1fbc:	7821      	ldrb	r1, [r4, #0]
    1fbe:	1c63      	adds	r3, r4, #1
    1fc0:	2206      	movs	r2, #6
    1fc2:	482f      	ldr	r0, [pc, #188]	; (2080 <STACK_SIZE+0x80>)
    1fc4:	9302      	str	r3, [sp, #8]
    1fc6:	7629      	strb	r1, [r5, #24]
    1fc8:	f000 faa4 	bl	2514 <memchr>
    1fcc:	2800      	cmp	r0, #0
    1fce:	d044      	beq.n	205a <STACK_SIZE+0x5a>
    1fd0:	4b2c      	ldr	r3, [pc, #176]	; (2084 <STACK_SIZE+0x84>)
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d12f      	bne.n	2036 <STACK_SIZE+0x36>
    1fd6:	6829      	ldr	r1, [r5, #0]
    1fd8:	9b05      	ldr	r3, [sp, #20]
    1fda:	2207      	movs	r2, #7
    1fdc:	05c9      	lsls	r1, r1, #23
    1fde:	d528      	bpl.n	2032 <STACK_SIZE+0x32>
    1fe0:	189b      	adds	r3, r3, r2
    1fe2:	4393      	bics	r3, r2
    1fe4:	3308      	adds	r3, #8
    1fe6:	9305      	str	r3, [sp, #20]
    1fe8:	696b      	ldr	r3, [r5, #20]
    1fea:	9a03      	ldr	r2, [sp, #12]
    1fec:	189b      	adds	r3, r3, r2
    1fee:	616b      	str	r3, [r5, #20]
    1ff0:	e74f      	b.n	1e92 <_vfiprintf_r+0x3e>
    1ff2:	425b      	negs	r3, r3
    1ff4:	60eb      	str	r3, [r5, #12]
    1ff6:	2302      	movs	r3, #2
    1ff8:	430b      	orrs	r3, r1
    1ffa:	602b      	str	r3, [r5, #0]
    1ffc:	e7bf      	b.n	1f7e <_vfiprintf_r+0x12a>
    1ffe:	434b      	muls	r3, r1
    2000:	3401      	adds	r4, #1
    2002:	189b      	adds	r3, r3, r2
    2004:	2001      	movs	r0, #1
    2006:	e789      	b.n	1f1c <_vfiprintf_r+0xc8>
    2008:	2301      	movs	r3, #1
    200a:	425b      	negs	r3, r3
    200c:	e7c6      	b.n	1f9c <_vfiprintf_r+0x148>
    200e:	2300      	movs	r3, #0
    2010:	0014      	movs	r4, r2
    2012:	200a      	movs	r0, #10
    2014:	001a      	movs	r2, r3
    2016:	606b      	str	r3, [r5, #4]
    2018:	7821      	ldrb	r1, [r4, #0]
    201a:	3930      	subs	r1, #48	; 0x30
    201c:	2909      	cmp	r1, #9
    201e:	d903      	bls.n	2028 <STACK_SIZE+0x28>
    2020:	2b00      	cmp	r3, #0
    2022:	d0bc      	beq.n	1f9e <_vfiprintf_r+0x14a>
    2024:	9207      	str	r2, [sp, #28]
    2026:	e7ba      	b.n	1f9e <_vfiprintf_r+0x14a>
    2028:	4342      	muls	r2, r0
    202a:	3401      	adds	r4, #1
    202c:	1852      	adds	r2, r2, r1
    202e:	2301      	movs	r3, #1
    2030:	e7f2      	b.n	2018 <STACK_SIZE+0x18>
    2032:	3307      	adds	r3, #7
    2034:	e7d5      	b.n	1fe2 <_vfiprintf_r+0x18e>
    2036:	ab05      	add	r3, sp, #20
    2038:	9300      	str	r3, [sp, #0]
    203a:	003a      	movs	r2, r7
    203c:	4b12      	ldr	r3, [pc, #72]	; (2088 <STACK_SIZE+0x88>)
    203e:	0029      	movs	r1, r5
    2040:	0030      	movs	r0, r6
    2042:	e000      	b.n	2046 <STACK_SIZE+0x46>
    2044:	bf00      	nop
    2046:	9003      	str	r0, [sp, #12]
    2048:	9b03      	ldr	r3, [sp, #12]
    204a:	3301      	adds	r3, #1
    204c:	d1cc      	bne.n	1fe8 <_vfiprintf_r+0x194>
    204e:	89bb      	ldrh	r3, [r7, #12]
    2050:	065b      	lsls	r3, r3, #25
    2052:	d500      	bpl.n	2056 <STACK_SIZE+0x56>
    2054:	e77b      	b.n	1f4e <_vfiprintf_r+0xfa>
    2056:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2058:	e77b      	b.n	1f52 <_vfiprintf_r+0xfe>
    205a:	ab05      	add	r3, sp, #20
    205c:	9300      	str	r3, [sp, #0]
    205e:	003a      	movs	r2, r7
    2060:	4b09      	ldr	r3, [pc, #36]	; (2088 <STACK_SIZE+0x88>)
    2062:	0029      	movs	r1, r5
    2064:	0030      	movs	r0, r6
    2066:	f000 f87f 	bl	2168 <_printf_i>
    206a:	e7ec      	b.n	2046 <STACK_SIZE+0x46>
    206c:	00002704 	.word	0x00002704
    2070:	00002744 	.word	0x00002744
    2074:	00002724 	.word	0x00002724
    2078:	000026e4 	.word	0x000026e4
    207c:	0000274a 	.word	0x0000274a
    2080:	0000274e 	.word	0x0000274e
    2084:	00000000 	.word	0x00000000
    2088:	00001e2f 	.word	0x00001e2f

0000208c <_printf_common>:
    208c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    208e:	0015      	movs	r5, r2
    2090:	9301      	str	r3, [sp, #4]
    2092:	688a      	ldr	r2, [r1, #8]
    2094:	690b      	ldr	r3, [r1, #16]
    2096:	9000      	str	r0, [sp, #0]
    2098:	000c      	movs	r4, r1
    209a:	4293      	cmp	r3, r2
    209c:	da00      	bge.n	20a0 <_printf_common+0x14>
    209e:	0013      	movs	r3, r2
    20a0:	0022      	movs	r2, r4
    20a2:	602b      	str	r3, [r5, #0]
    20a4:	3243      	adds	r2, #67	; 0x43
    20a6:	7812      	ldrb	r2, [r2, #0]
    20a8:	2a00      	cmp	r2, #0
    20aa:	d001      	beq.n	20b0 <_printf_common+0x24>
    20ac:	3301      	adds	r3, #1
    20ae:	602b      	str	r3, [r5, #0]
    20b0:	6823      	ldr	r3, [r4, #0]
    20b2:	069b      	lsls	r3, r3, #26
    20b4:	d502      	bpl.n	20bc <_printf_common+0x30>
    20b6:	682b      	ldr	r3, [r5, #0]
    20b8:	3302      	adds	r3, #2
    20ba:	602b      	str	r3, [r5, #0]
    20bc:	2706      	movs	r7, #6
    20be:	6823      	ldr	r3, [r4, #0]
    20c0:	401f      	ands	r7, r3
    20c2:	d027      	beq.n	2114 <_printf_common+0x88>
    20c4:	0023      	movs	r3, r4
    20c6:	3343      	adds	r3, #67	; 0x43
    20c8:	781b      	ldrb	r3, [r3, #0]
    20ca:	1e5a      	subs	r2, r3, #1
    20cc:	4193      	sbcs	r3, r2
    20ce:	6822      	ldr	r2, [r4, #0]
    20d0:	0692      	lsls	r2, r2, #26
    20d2:	d430      	bmi.n	2136 <_printf_common+0xaa>
    20d4:	0022      	movs	r2, r4
    20d6:	9901      	ldr	r1, [sp, #4]
    20d8:	3243      	adds	r2, #67	; 0x43
    20da:	9800      	ldr	r0, [sp, #0]
    20dc:	9e08      	ldr	r6, [sp, #32]
    20de:	47b0      	blx	r6
    20e0:	1c43      	adds	r3, r0, #1
    20e2:	d025      	beq.n	2130 <_printf_common+0xa4>
    20e4:	2306      	movs	r3, #6
    20e6:	6820      	ldr	r0, [r4, #0]
    20e8:	682a      	ldr	r2, [r5, #0]
    20ea:	68e1      	ldr	r1, [r4, #12]
    20ec:	4003      	ands	r3, r0
    20ee:	2500      	movs	r5, #0
    20f0:	2b04      	cmp	r3, #4
    20f2:	d103      	bne.n	20fc <_printf_common+0x70>
    20f4:	1a8d      	subs	r5, r1, r2
    20f6:	43eb      	mvns	r3, r5
    20f8:	17db      	asrs	r3, r3, #31
    20fa:	401d      	ands	r5, r3
    20fc:	68a3      	ldr	r3, [r4, #8]
    20fe:	6922      	ldr	r2, [r4, #16]
    2100:	4293      	cmp	r3, r2
    2102:	dd01      	ble.n	2108 <_printf_common+0x7c>
    2104:	1a9b      	subs	r3, r3, r2
    2106:	18ed      	adds	r5, r5, r3
    2108:	2700      	movs	r7, #0
    210a:	42bd      	cmp	r5, r7
    210c:	d120      	bne.n	2150 <_printf_common+0xc4>
    210e:	2000      	movs	r0, #0
    2110:	e010      	b.n	2134 <_printf_common+0xa8>
    2112:	3701      	adds	r7, #1
    2114:	68e3      	ldr	r3, [r4, #12]
    2116:	682a      	ldr	r2, [r5, #0]
    2118:	1a9b      	subs	r3, r3, r2
    211a:	429f      	cmp	r7, r3
    211c:	dad2      	bge.n	20c4 <_printf_common+0x38>
    211e:	0022      	movs	r2, r4
    2120:	2301      	movs	r3, #1
    2122:	3219      	adds	r2, #25
    2124:	9901      	ldr	r1, [sp, #4]
    2126:	9800      	ldr	r0, [sp, #0]
    2128:	9e08      	ldr	r6, [sp, #32]
    212a:	47b0      	blx	r6
    212c:	1c43      	adds	r3, r0, #1
    212e:	d1f0      	bne.n	2112 <_printf_common+0x86>
    2130:	2001      	movs	r0, #1
    2132:	4240      	negs	r0, r0
    2134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2136:	2030      	movs	r0, #48	; 0x30
    2138:	18e1      	adds	r1, r4, r3
    213a:	3143      	adds	r1, #67	; 0x43
    213c:	7008      	strb	r0, [r1, #0]
    213e:	0021      	movs	r1, r4
    2140:	1c5a      	adds	r2, r3, #1
    2142:	3145      	adds	r1, #69	; 0x45
    2144:	7809      	ldrb	r1, [r1, #0]
    2146:	18a2      	adds	r2, r4, r2
    2148:	3243      	adds	r2, #67	; 0x43
    214a:	3302      	adds	r3, #2
    214c:	7011      	strb	r1, [r2, #0]
    214e:	e7c1      	b.n	20d4 <_printf_common+0x48>
    2150:	0022      	movs	r2, r4
    2152:	2301      	movs	r3, #1
    2154:	321a      	adds	r2, #26
    2156:	9901      	ldr	r1, [sp, #4]
    2158:	9800      	ldr	r0, [sp, #0]
    215a:	9e08      	ldr	r6, [sp, #32]
    215c:	47b0      	blx	r6
    215e:	1c43      	adds	r3, r0, #1
    2160:	d0e6      	beq.n	2130 <_printf_common+0xa4>
    2162:	3701      	adds	r7, #1
    2164:	e7d1      	b.n	210a <_printf_common+0x7e>
	...

00002168 <_printf_i>:
    2168:	b5f0      	push	{r4, r5, r6, r7, lr}
    216a:	b08b      	sub	sp, #44	; 0x2c
    216c:	9206      	str	r2, [sp, #24]
    216e:	000a      	movs	r2, r1
    2170:	3243      	adds	r2, #67	; 0x43
    2172:	9307      	str	r3, [sp, #28]
    2174:	9005      	str	r0, [sp, #20]
    2176:	9204      	str	r2, [sp, #16]
    2178:	7e0a      	ldrb	r2, [r1, #24]
    217a:	000c      	movs	r4, r1
    217c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    217e:	2a6e      	cmp	r2, #110	; 0x6e
    2180:	d100      	bne.n	2184 <_printf_i+0x1c>
    2182:	e08f      	b.n	22a4 <_printf_i+0x13c>
    2184:	d817      	bhi.n	21b6 <_printf_i+0x4e>
    2186:	2a63      	cmp	r2, #99	; 0x63
    2188:	d02c      	beq.n	21e4 <_printf_i+0x7c>
    218a:	d808      	bhi.n	219e <_printf_i+0x36>
    218c:	2a00      	cmp	r2, #0
    218e:	d100      	bne.n	2192 <_printf_i+0x2a>
    2190:	e099      	b.n	22c6 <_printf_i+0x15e>
    2192:	2a58      	cmp	r2, #88	; 0x58
    2194:	d054      	beq.n	2240 <_printf_i+0xd8>
    2196:	0026      	movs	r6, r4
    2198:	3642      	adds	r6, #66	; 0x42
    219a:	7032      	strb	r2, [r6, #0]
    219c:	e029      	b.n	21f2 <_printf_i+0x8a>
    219e:	2a64      	cmp	r2, #100	; 0x64
    21a0:	d001      	beq.n	21a6 <_printf_i+0x3e>
    21a2:	2a69      	cmp	r2, #105	; 0x69
    21a4:	d1f7      	bne.n	2196 <_printf_i+0x2e>
    21a6:	6821      	ldr	r1, [r4, #0]
    21a8:	681a      	ldr	r2, [r3, #0]
    21aa:	0608      	lsls	r0, r1, #24
    21ac:	d523      	bpl.n	21f6 <_printf_i+0x8e>
    21ae:	1d11      	adds	r1, r2, #4
    21b0:	6019      	str	r1, [r3, #0]
    21b2:	6815      	ldr	r5, [r2, #0]
    21b4:	e025      	b.n	2202 <_printf_i+0x9a>
    21b6:	2a73      	cmp	r2, #115	; 0x73
    21b8:	d100      	bne.n	21bc <_printf_i+0x54>
    21ba:	e088      	b.n	22ce <_printf_i+0x166>
    21bc:	d808      	bhi.n	21d0 <_printf_i+0x68>
    21be:	2a6f      	cmp	r2, #111	; 0x6f
    21c0:	d029      	beq.n	2216 <_printf_i+0xae>
    21c2:	2a70      	cmp	r2, #112	; 0x70
    21c4:	d1e7      	bne.n	2196 <_printf_i+0x2e>
    21c6:	2220      	movs	r2, #32
    21c8:	6809      	ldr	r1, [r1, #0]
    21ca:	430a      	orrs	r2, r1
    21cc:	6022      	str	r2, [r4, #0]
    21ce:	e003      	b.n	21d8 <_printf_i+0x70>
    21d0:	2a75      	cmp	r2, #117	; 0x75
    21d2:	d020      	beq.n	2216 <_printf_i+0xae>
    21d4:	2a78      	cmp	r2, #120	; 0x78
    21d6:	d1de      	bne.n	2196 <_printf_i+0x2e>
    21d8:	0022      	movs	r2, r4
    21da:	2178      	movs	r1, #120	; 0x78
    21dc:	3245      	adds	r2, #69	; 0x45
    21de:	7011      	strb	r1, [r2, #0]
    21e0:	4a6c      	ldr	r2, [pc, #432]	; (2394 <_printf_i+0x22c>)
    21e2:	e030      	b.n	2246 <_printf_i+0xde>
    21e4:	000e      	movs	r6, r1
    21e6:	681a      	ldr	r2, [r3, #0]
    21e8:	3642      	adds	r6, #66	; 0x42
    21ea:	1d11      	adds	r1, r2, #4
    21ec:	6019      	str	r1, [r3, #0]
    21ee:	6813      	ldr	r3, [r2, #0]
    21f0:	7033      	strb	r3, [r6, #0]
    21f2:	2301      	movs	r3, #1
    21f4:	e079      	b.n	22ea <_printf_i+0x182>
    21f6:	0649      	lsls	r1, r1, #25
    21f8:	d5d9      	bpl.n	21ae <_printf_i+0x46>
    21fa:	1d11      	adds	r1, r2, #4
    21fc:	6019      	str	r1, [r3, #0]
    21fe:	2300      	movs	r3, #0
    2200:	5ed5      	ldrsh	r5, [r2, r3]
    2202:	2d00      	cmp	r5, #0
    2204:	da03      	bge.n	220e <_printf_i+0xa6>
    2206:	232d      	movs	r3, #45	; 0x2d
    2208:	9a04      	ldr	r2, [sp, #16]
    220a:	426d      	negs	r5, r5
    220c:	7013      	strb	r3, [r2, #0]
    220e:	4b62      	ldr	r3, [pc, #392]	; (2398 <_printf_i+0x230>)
    2210:	270a      	movs	r7, #10
    2212:	9303      	str	r3, [sp, #12]
    2214:	e02f      	b.n	2276 <_printf_i+0x10e>
    2216:	6820      	ldr	r0, [r4, #0]
    2218:	6819      	ldr	r1, [r3, #0]
    221a:	0605      	lsls	r5, r0, #24
    221c:	d503      	bpl.n	2226 <_printf_i+0xbe>
    221e:	1d08      	adds	r0, r1, #4
    2220:	6018      	str	r0, [r3, #0]
    2222:	680d      	ldr	r5, [r1, #0]
    2224:	e005      	b.n	2232 <_printf_i+0xca>
    2226:	0640      	lsls	r0, r0, #25
    2228:	d5f9      	bpl.n	221e <_printf_i+0xb6>
    222a:	680d      	ldr	r5, [r1, #0]
    222c:	1d08      	adds	r0, r1, #4
    222e:	6018      	str	r0, [r3, #0]
    2230:	b2ad      	uxth	r5, r5
    2232:	4b59      	ldr	r3, [pc, #356]	; (2398 <_printf_i+0x230>)
    2234:	2708      	movs	r7, #8
    2236:	9303      	str	r3, [sp, #12]
    2238:	2a6f      	cmp	r2, #111	; 0x6f
    223a:	d018      	beq.n	226e <_printf_i+0x106>
    223c:	270a      	movs	r7, #10
    223e:	e016      	b.n	226e <_printf_i+0x106>
    2240:	3145      	adds	r1, #69	; 0x45
    2242:	700a      	strb	r2, [r1, #0]
    2244:	4a54      	ldr	r2, [pc, #336]	; (2398 <_printf_i+0x230>)
    2246:	9203      	str	r2, [sp, #12]
    2248:	681a      	ldr	r2, [r3, #0]
    224a:	6821      	ldr	r1, [r4, #0]
    224c:	1d10      	adds	r0, r2, #4
    224e:	6018      	str	r0, [r3, #0]
    2250:	6815      	ldr	r5, [r2, #0]
    2252:	0608      	lsls	r0, r1, #24
    2254:	d522      	bpl.n	229c <_printf_i+0x134>
    2256:	07cb      	lsls	r3, r1, #31
    2258:	d502      	bpl.n	2260 <_printf_i+0xf8>
    225a:	2320      	movs	r3, #32
    225c:	4319      	orrs	r1, r3
    225e:	6021      	str	r1, [r4, #0]
    2260:	2710      	movs	r7, #16
    2262:	2d00      	cmp	r5, #0
    2264:	d103      	bne.n	226e <_printf_i+0x106>
    2266:	2320      	movs	r3, #32
    2268:	6822      	ldr	r2, [r4, #0]
    226a:	439a      	bics	r2, r3
    226c:	6022      	str	r2, [r4, #0]
    226e:	0023      	movs	r3, r4
    2270:	2200      	movs	r2, #0
    2272:	3343      	adds	r3, #67	; 0x43
    2274:	701a      	strb	r2, [r3, #0]
    2276:	6863      	ldr	r3, [r4, #4]
    2278:	60a3      	str	r3, [r4, #8]
    227a:	2b00      	cmp	r3, #0
    227c:	db5c      	blt.n	2338 <_printf_i+0x1d0>
    227e:	2204      	movs	r2, #4
    2280:	6821      	ldr	r1, [r4, #0]
    2282:	4391      	bics	r1, r2
    2284:	6021      	str	r1, [r4, #0]
    2286:	2d00      	cmp	r5, #0
    2288:	d158      	bne.n	233c <_printf_i+0x1d4>
    228a:	9e04      	ldr	r6, [sp, #16]
    228c:	2b00      	cmp	r3, #0
    228e:	d064      	beq.n	235a <_printf_i+0x1f2>
    2290:	0026      	movs	r6, r4
    2292:	9b03      	ldr	r3, [sp, #12]
    2294:	3642      	adds	r6, #66	; 0x42
    2296:	781b      	ldrb	r3, [r3, #0]
    2298:	7033      	strb	r3, [r6, #0]
    229a:	e05e      	b.n	235a <_printf_i+0x1f2>
    229c:	0648      	lsls	r0, r1, #25
    229e:	d5da      	bpl.n	2256 <_printf_i+0xee>
    22a0:	b2ad      	uxth	r5, r5
    22a2:	e7d8      	b.n	2256 <_printf_i+0xee>
    22a4:	6809      	ldr	r1, [r1, #0]
    22a6:	681a      	ldr	r2, [r3, #0]
    22a8:	0608      	lsls	r0, r1, #24
    22aa:	d505      	bpl.n	22b8 <_printf_i+0x150>
    22ac:	1d11      	adds	r1, r2, #4
    22ae:	6019      	str	r1, [r3, #0]
    22b0:	6813      	ldr	r3, [r2, #0]
    22b2:	6962      	ldr	r2, [r4, #20]
    22b4:	601a      	str	r2, [r3, #0]
    22b6:	e006      	b.n	22c6 <_printf_i+0x15e>
    22b8:	0649      	lsls	r1, r1, #25
    22ba:	d5f7      	bpl.n	22ac <_printf_i+0x144>
    22bc:	1d11      	adds	r1, r2, #4
    22be:	6019      	str	r1, [r3, #0]
    22c0:	6813      	ldr	r3, [r2, #0]
    22c2:	8aa2      	ldrh	r2, [r4, #20]
    22c4:	801a      	strh	r2, [r3, #0]
    22c6:	2300      	movs	r3, #0
    22c8:	9e04      	ldr	r6, [sp, #16]
    22ca:	6123      	str	r3, [r4, #16]
    22cc:	e054      	b.n	2378 <_printf_i+0x210>
    22ce:	681a      	ldr	r2, [r3, #0]
    22d0:	1d11      	adds	r1, r2, #4
    22d2:	6019      	str	r1, [r3, #0]
    22d4:	6816      	ldr	r6, [r2, #0]
    22d6:	2100      	movs	r1, #0
    22d8:	6862      	ldr	r2, [r4, #4]
    22da:	0030      	movs	r0, r6
    22dc:	f000 f91a 	bl	2514 <memchr>
    22e0:	2800      	cmp	r0, #0
    22e2:	d001      	beq.n	22e8 <_printf_i+0x180>
    22e4:	1b80      	subs	r0, r0, r6
    22e6:	6060      	str	r0, [r4, #4]
    22e8:	6863      	ldr	r3, [r4, #4]
    22ea:	6123      	str	r3, [r4, #16]
    22ec:	2300      	movs	r3, #0
    22ee:	9a04      	ldr	r2, [sp, #16]
    22f0:	7013      	strb	r3, [r2, #0]
    22f2:	e041      	b.n	2378 <_printf_i+0x210>
    22f4:	6923      	ldr	r3, [r4, #16]
    22f6:	0032      	movs	r2, r6
    22f8:	9906      	ldr	r1, [sp, #24]
    22fa:	9805      	ldr	r0, [sp, #20]
    22fc:	9d07      	ldr	r5, [sp, #28]
    22fe:	47a8      	blx	r5
    2300:	1c43      	adds	r3, r0, #1
    2302:	d043      	beq.n	238c <_printf_i+0x224>
    2304:	6823      	ldr	r3, [r4, #0]
    2306:	2500      	movs	r5, #0
    2308:	079b      	lsls	r3, r3, #30
    230a:	d40f      	bmi.n	232c <_printf_i+0x1c4>
    230c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    230e:	68e0      	ldr	r0, [r4, #12]
    2310:	4298      	cmp	r0, r3
    2312:	da3d      	bge.n	2390 <_printf_i+0x228>
    2314:	0018      	movs	r0, r3
    2316:	e03b      	b.n	2390 <_printf_i+0x228>
    2318:	0022      	movs	r2, r4
    231a:	2301      	movs	r3, #1
    231c:	3219      	adds	r2, #25
    231e:	9906      	ldr	r1, [sp, #24]
    2320:	9805      	ldr	r0, [sp, #20]
    2322:	9e07      	ldr	r6, [sp, #28]
    2324:	47b0      	blx	r6
    2326:	1c43      	adds	r3, r0, #1
    2328:	d030      	beq.n	238c <_printf_i+0x224>
    232a:	3501      	adds	r5, #1
    232c:	68e3      	ldr	r3, [r4, #12]
    232e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2330:	1a9b      	subs	r3, r3, r2
    2332:	429d      	cmp	r5, r3
    2334:	dbf0      	blt.n	2318 <_printf_i+0x1b0>
    2336:	e7e9      	b.n	230c <_printf_i+0x1a4>
    2338:	2d00      	cmp	r5, #0
    233a:	d0a9      	beq.n	2290 <_printf_i+0x128>
    233c:	9e04      	ldr	r6, [sp, #16]
    233e:	0028      	movs	r0, r5
    2340:	0039      	movs	r1, r7
    2342:	f7fe fdcf 	bl	ee4 <__aeabi_uidivmod>
    2346:	9b03      	ldr	r3, [sp, #12]
    2348:	3e01      	subs	r6, #1
    234a:	5c5b      	ldrb	r3, [r3, r1]
    234c:	0028      	movs	r0, r5
    234e:	7033      	strb	r3, [r6, #0]
    2350:	0039      	movs	r1, r7
    2352:	f7fe fd8e 	bl	e72 <__aeabi_uidiv>
    2356:	1e05      	subs	r5, r0, #0
    2358:	d1f1      	bne.n	233e <_printf_i+0x1d6>
    235a:	2f08      	cmp	r7, #8
    235c:	d109      	bne.n	2372 <_printf_i+0x20a>
    235e:	6823      	ldr	r3, [r4, #0]
    2360:	07db      	lsls	r3, r3, #31
    2362:	d506      	bpl.n	2372 <_printf_i+0x20a>
    2364:	6863      	ldr	r3, [r4, #4]
    2366:	6922      	ldr	r2, [r4, #16]
    2368:	4293      	cmp	r3, r2
    236a:	dc02      	bgt.n	2372 <_printf_i+0x20a>
    236c:	2330      	movs	r3, #48	; 0x30
    236e:	3e01      	subs	r6, #1
    2370:	7033      	strb	r3, [r6, #0]
    2372:	9b04      	ldr	r3, [sp, #16]
    2374:	1b9b      	subs	r3, r3, r6
    2376:	6123      	str	r3, [r4, #16]
    2378:	9b07      	ldr	r3, [sp, #28]
    237a:	aa09      	add	r2, sp, #36	; 0x24
    237c:	9300      	str	r3, [sp, #0]
    237e:	0021      	movs	r1, r4
    2380:	9b06      	ldr	r3, [sp, #24]
    2382:	9805      	ldr	r0, [sp, #20]
    2384:	f7ff fe82 	bl	208c <_printf_common>
    2388:	1c43      	adds	r3, r0, #1
    238a:	d1b3      	bne.n	22f4 <_printf_i+0x18c>
    238c:	2001      	movs	r0, #1
    238e:	4240      	negs	r0, r0
    2390:	b00b      	add	sp, #44	; 0x2c
    2392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2394:	00002766 	.word	0x00002766
    2398:	00002755 	.word	0x00002755

0000239c <_sbrk_r>:
    239c:	2300      	movs	r3, #0
    239e:	b570      	push	{r4, r5, r6, lr}
    23a0:	4c06      	ldr	r4, [pc, #24]	; (23bc <_sbrk_r+0x20>)
    23a2:	0005      	movs	r5, r0
    23a4:	0008      	movs	r0, r1
    23a6:	6023      	str	r3, [r4, #0]
    23a8:	f7fe fb80 	bl	aac <_sbrk>
    23ac:	1c43      	adds	r3, r0, #1
    23ae:	d103      	bne.n	23b8 <_sbrk_r+0x1c>
    23b0:	6823      	ldr	r3, [r4, #0]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d000      	beq.n	23b8 <_sbrk_r+0x1c>
    23b6:	602b      	str	r3, [r5, #0]
    23b8:	bd70      	pop	{r4, r5, r6, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	20000110 	.word	0x20000110

000023c0 <__sread>:
    23c0:	b570      	push	{r4, r5, r6, lr}
    23c2:	000c      	movs	r4, r1
    23c4:	250e      	movs	r5, #14
    23c6:	5f49      	ldrsh	r1, [r1, r5]
    23c8:	f000 f8b2 	bl	2530 <_read_r>
    23cc:	2800      	cmp	r0, #0
    23ce:	db03      	blt.n	23d8 <__sread+0x18>
    23d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    23d2:	181b      	adds	r3, r3, r0
    23d4:	6563      	str	r3, [r4, #84]	; 0x54
    23d6:	bd70      	pop	{r4, r5, r6, pc}
    23d8:	89a3      	ldrh	r3, [r4, #12]
    23da:	4a02      	ldr	r2, [pc, #8]	; (23e4 <__sread+0x24>)
    23dc:	4013      	ands	r3, r2
    23de:	81a3      	strh	r3, [r4, #12]
    23e0:	e7f9      	b.n	23d6 <__sread+0x16>
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	ffffefff 	.word	0xffffefff

000023e8 <__swrite>:
    23e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ea:	001f      	movs	r7, r3
    23ec:	898b      	ldrh	r3, [r1, #12]
    23ee:	0005      	movs	r5, r0
    23f0:	000c      	movs	r4, r1
    23f2:	0016      	movs	r6, r2
    23f4:	05db      	lsls	r3, r3, #23
    23f6:	d505      	bpl.n	2404 <__swrite+0x1c>
    23f8:	230e      	movs	r3, #14
    23fa:	5ec9      	ldrsh	r1, [r1, r3]
    23fc:	2200      	movs	r2, #0
    23fe:	2302      	movs	r3, #2
    2400:	f000 f874 	bl	24ec <_lseek_r>
    2404:	89a3      	ldrh	r3, [r4, #12]
    2406:	4a05      	ldr	r2, [pc, #20]	; (241c <__swrite+0x34>)
    2408:	0028      	movs	r0, r5
    240a:	4013      	ands	r3, r2
    240c:	81a3      	strh	r3, [r4, #12]
    240e:	0032      	movs	r2, r6
    2410:	230e      	movs	r3, #14
    2412:	5ee1      	ldrsh	r1, [r4, r3]
    2414:	003b      	movs	r3, r7
    2416:	f000 f81f 	bl	2458 <_write_r>
    241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    241c:	ffffefff 	.word	0xffffefff

00002420 <__sseek>:
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	000c      	movs	r4, r1
    2424:	250e      	movs	r5, #14
    2426:	5f49      	ldrsh	r1, [r1, r5]
    2428:	f000 f860 	bl	24ec <_lseek_r>
    242c:	89a3      	ldrh	r3, [r4, #12]
    242e:	1c42      	adds	r2, r0, #1
    2430:	d103      	bne.n	243a <__sseek+0x1a>
    2432:	4a05      	ldr	r2, [pc, #20]	; (2448 <__sseek+0x28>)
    2434:	4013      	ands	r3, r2
    2436:	81a3      	strh	r3, [r4, #12]
    2438:	bd70      	pop	{r4, r5, r6, pc}
    243a:	2280      	movs	r2, #128	; 0x80
    243c:	0152      	lsls	r2, r2, #5
    243e:	4313      	orrs	r3, r2
    2440:	81a3      	strh	r3, [r4, #12]
    2442:	6560      	str	r0, [r4, #84]	; 0x54
    2444:	e7f8      	b.n	2438 <__sseek+0x18>
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	ffffefff 	.word	0xffffefff

0000244c <__sclose>:
    244c:	b510      	push	{r4, lr}
    244e:	230e      	movs	r3, #14
    2450:	5ec9      	ldrsh	r1, [r1, r3]
    2452:	f000 f815 	bl	2480 <_close_r>
    2456:	bd10      	pop	{r4, pc}

00002458 <_write_r>:
    2458:	b570      	push	{r4, r5, r6, lr}
    245a:	0005      	movs	r5, r0
    245c:	0008      	movs	r0, r1
    245e:	0011      	movs	r1, r2
    2460:	2200      	movs	r2, #0
    2462:	4c06      	ldr	r4, [pc, #24]	; (247c <_write_r+0x24>)
    2464:	6022      	str	r2, [r4, #0]
    2466:	001a      	movs	r2, r3
    2468:	f7fe ffd0 	bl	140c <_write>
    246c:	1c43      	adds	r3, r0, #1
    246e:	d103      	bne.n	2478 <_write_r+0x20>
    2470:	6823      	ldr	r3, [r4, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d000      	beq.n	2478 <_write_r+0x20>
    2476:	602b      	str	r3, [r5, #0]
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	20000110 	.word	0x20000110

00002480 <_close_r>:
    2480:	2300      	movs	r3, #0
    2482:	b570      	push	{r4, r5, r6, lr}
    2484:	4c06      	ldr	r4, [pc, #24]	; (24a0 <_close_r+0x20>)
    2486:	0005      	movs	r5, r0
    2488:	0008      	movs	r0, r1
    248a:	6023      	str	r3, [r4, #0]
    248c:	f7fe fb20 	bl	ad0 <_close>
    2490:	1c43      	adds	r3, r0, #1
    2492:	d103      	bne.n	249c <_close_r+0x1c>
    2494:	6823      	ldr	r3, [r4, #0]
    2496:	2b00      	cmp	r3, #0
    2498:	d000      	beq.n	249c <_close_r+0x1c>
    249a:	602b      	str	r3, [r5, #0]
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	20000110 	.word	0x20000110

000024a4 <_fstat_r>:
    24a4:	2300      	movs	r3, #0
    24a6:	b570      	push	{r4, r5, r6, lr}
    24a8:	4c06      	ldr	r4, [pc, #24]	; (24c4 <_fstat_r+0x20>)
    24aa:	0005      	movs	r5, r0
    24ac:	0008      	movs	r0, r1
    24ae:	0011      	movs	r1, r2
    24b0:	6023      	str	r3, [r4, #0]
    24b2:	f7fe fb10 	bl	ad6 <_fstat>
    24b6:	1c43      	adds	r3, r0, #1
    24b8:	d103      	bne.n	24c2 <_fstat_r+0x1e>
    24ba:	6823      	ldr	r3, [r4, #0]
    24bc:	2b00      	cmp	r3, #0
    24be:	d000      	beq.n	24c2 <_fstat_r+0x1e>
    24c0:	602b      	str	r3, [r5, #0]
    24c2:	bd70      	pop	{r4, r5, r6, pc}
    24c4:	20000110 	.word	0x20000110

000024c8 <_isatty_r>:
    24c8:	2300      	movs	r3, #0
    24ca:	b570      	push	{r4, r5, r6, lr}
    24cc:	4c06      	ldr	r4, [pc, #24]	; (24e8 <_isatty_r+0x20>)
    24ce:	0005      	movs	r5, r0
    24d0:	0008      	movs	r0, r1
    24d2:	6023      	str	r3, [r4, #0]
    24d4:	f7fe fb04 	bl	ae0 <_isatty>
    24d8:	1c43      	adds	r3, r0, #1
    24da:	d103      	bne.n	24e4 <_isatty_r+0x1c>
    24dc:	6823      	ldr	r3, [r4, #0]
    24de:	2b00      	cmp	r3, #0
    24e0:	d000      	beq.n	24e4 <_isatty_r+0x1c>
    24e2:	602b      	str	r3, [r5, #0]
    24e4:	bd70      	pop	{r4, r5, r6, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	20000110 	.word	0x20000110

000024ec <_lseek_r>:
    24ec:	b570      	push	{r4, r5, r6, lr}
    24ee:	0005      	movs	r5, r0
    24f0:	0008      	movs	r0, r1
    24f2:	0011      	movs	r1, r2
    24f4:	2200      	movs	r2, #0
    24f6:	4c06      	ldr	r4, [pc, #24]	; (2510 <_lseek_r+0x24>)
    24f8:	6022      	str	r2, [r4, #0]
    24fa:	001a      	movs	r2, r3
    24fc:	f7fe faf2 	bl	ae4 <_lseek>
    2500:	1c43      	adds	r3, r0, #1
    2502:	d103      	bne.n	250c <_lseek_r+0x20>
    2504:	6823      	ldr	r3, [r4, #0]
    2506:	2b00      	cmp	r3, #0
    2508:	d000      	beq.n	250c <_lseek_r+0x20>
    250a:	602b      	str	r3, [r5, #0]
    250c:	bd70      	pop	{r4, r5, r6, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	20000110 	.word	0x20000110

00002514 <memchr>:
    2514:	b2c9      	uxtb	r1, r1
    2516:	1882      	adds	r2, r0, r2
    2518:	4290      	cmp	r0, r2
    251a:	d101      	bne.n	2520 <memchr+0xc>
    251c:	2000      	movs	r0, #0
    251e:	4770      	bx	lr
    2520:	7803      	ldrb	r3, [r0, #0]
    2522:	428b      	cmp	r3, r1
    2524:	d0fb      	beq.n	251e <memchr+0xa>
    2526:	3001      	adds	r0, #1
    2528:	e7f6      	b.n	2518 <memchr+0x4>

0000252a <__malloc_lock>:
    252a:	4770      	bx	lr

0000252c <__malloc_unlock>:
    252c:	4770      	bx	lr
	...

00002530 <_read_r>:
    2530:	b570      	push	{r4, r5, r6, lr}
    2532:	0005      	movs	r5, r0
    2534:	0008      	movs	r0, r1
    2536:	0011      	movs	r1, r2
    2538:	2200      	movs	r2, #0
    253a:	4c06      	ldr	r4, [pc, #24]	; (2554 <_read_r+0x24>)
    253c:	6022      	str	r2, [r4, #0]
    253e:	001a      	movs	r2, r3
    2540:	f7fe ff50 	bl	13e4 <_read>
    2544:	1c43      	adds	r3, r0, #1
    2546:	d103      	bne.n	2550 <_read_r+0x20>
    2548:	6823      	ldr	r3, [r4, #0]
    254a:	2b00      	cmp	r3, #0
    254c:	d000      	beq.n	2550 <_read_r+0x20>
    254e:	602b      	str	r3, [r5, #0]
    2550:	bd70      	pop	{r4, r5, r6, pc}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	20000110 	.word	0x20000110
    2558:	682f2e2e 	.word	0x682f2e2e
    255c:	732f6c61 	.word	0x732f6c61
    2560:	682f6372 	.word	0x682f6372
    2564:	615f6c61 	.word	0x615f6c61
    2568:	615f6364 	.word	0x615f6364
    256c:	636e7973 	.word	0x636e7973
    2570:	0000632e 	.word	0x0000632e
    2574:	682f2e2e 	.word	0x682f2e2e
    2578:	732f6c61 	.word	0x732f6c61
    257c:	682f6372 	.word	0x682f6372
    2580:	695f6c61 	.word	0x695f6c61
    2584:	00632e6f 	.word	0x00632e6f
    2588:	682f2e2e 	.word	0x682f2e2e
    258c:	732f6c61 	.word	0x732f6c61
    2590:	682f6372 	.word	0x682f6372
    2594:	755f6c61 	.word	0x755f6c61
    2598:	74726173 	.word	0x74726173
    259c:	6e79735f 	.word	0x6e79735f
    25a0:	00632e63 	.word	0x00632e63
    25a4:	682f2e2e 	.word	0x682f2e2e
    25a8:	752f6c61 	.word	0x752f6c61
    25ac:	736c6974 	.word	0x736c6974
    25b0:	6372732f 	.word	0x6372732f
    25b4:	6974752f 	.word	0x6974752f
    25b8:	725f736c 	.word	0x725f736c
    25bc:	62676e69 	.word	0x62676e69
    25c0:	65666675 	.word	0x65666675
    25c4:	00632e72 	.word	0x00632e72

000025c8 <_adcs>:
    25c8:	05060000 18030002 00000000 00000000     ................
	...
    25e4:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    25f4:	632e6364 00000000                       dc.c....

000025fc <_map>:
    25fc:	00000008 0000001c 682f2e2e 652f6c70     ........../hpl/e
    260c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0000261c <user_mux_confs>:
	...
    2638:	00000001 00000000 00000000 00000000     ................
    2648:	00000000                                ....

0000264c <channel_confs>:
    264c:	00000216 00000000 00000000 00000000     ................
	...

00002664 <_usarts>:
    2664:	00000004 40310004 00030000 0000fb15     ......1@........
    2674:	00000000                                ....

00002