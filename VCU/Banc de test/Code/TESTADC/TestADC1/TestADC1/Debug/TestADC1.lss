
TestADC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001800  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00001800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20000064  00001864  00020064  2**2
                  ALLOC
  3 .stack        00002000  200000a8  000018a8  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001dab6  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d1f  00000000  00000000  0003db9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000bf71  00000000  00000000  000408ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b30  00000000  00000000  0004c82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000be0  00000000  00000000  0004d35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002043c  00000000  00000000  0004df3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011682  00000000  00000000  0006e377  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009e96d  00000000  00000000  0007f9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021ec  00000000  00000000  0011e368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 20 00 20 35 01 00 00 31 01 00 00 31 01 00 00     . . 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000064 	.word	0x20000064
      dc:	00000000 	.word	0x00000000
      e0:	00001800 	.word	0x00001800

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000068 	.word	0x20000068
     110:	00001800 	.word	0x00001800
     114:	00001800 	.word	0x00001800
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	000002c1 	.word	0x000002c1
     12c:	00000b15 	.word	0x00000b15

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	00001800 	.word	0x00001800
     17c:	20000000 	.word	0x20000000
     180:	20000064 	.word	0x20000064
     184:	20000064 	.word	0x20000064
     188:	200000a8 	.word	0x200000a8
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	00000b35 	.word	0x00000b35
     198:	000009e9 	.word	0x000009e9

0000019c <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     19c:	2180      	movs	r1, #128	; 0x80
     19e:	0089      	lsls	r1, r1, #2
     1a0:	2384      	movs	r3, #132	; 0x84
     1a2:	22c0      	movs	r2, #192	; 0xc0
     1a4:	05d2      	lsls	r2, r2, #23
     1a6:	50d1      	str	r1, [r2, r3]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1a8:	2282      	movs	r2, #130	; 0x82
     1aa:	05d2      	lsls	r2, r2, #23
     1ac:	3324      	adds	r3, #36	; 0x24
     1ae:	490a      	ldr	r1, [pc, #40]	; (1d8 <ADC_0_PORT_init+0x3c>)
     1b0:	50d1      	str	r1, [r2, r3]
     1b2:	21c0      	movs	r1, #192	; 0xc0
     1b4:	0609      	lsls	r1, r1, #24
     1b6:	50d1      	str	r1, [r2, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1b8:	21c9      	movs	r1, #201	; 0xc9
     1ba:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1bc:	2001      	movs	r0, #1
     1be:	4383      	bics	r3, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1c0:	4303      	orrs	r3, r0
     1c2:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1c4:	5453      	strb	r3, [r2, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1c6:	3915      	subs	r1, #21
     1c8:	5c53      	ldrb	r3, [r2, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     1ca:	200f      	movs	r0, #15
     1cc:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     1ce:	2010      	movs	r0, #16
     1d0:	4303      	orrs	r3, r0
     1d2:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1d4:	5453      	strb	r3, [r2, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09B_ADC0_AIN3);
}
     1d6:	4770      	bx	lr
     1d8:	40000200 	.word	0x40000200

000001dc <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     1dc:	4a05      	ldr	r2, [pc, #20]	; (1f4 <ADC_0_CLOCK_init+0x18>)
     1de:	69d1      	ldr	r1, [r2, #28]
     1e0:	2380      	movs	r3, #128	; 0x80
     1e2:	029b      	lsls	r3, r3, #10
     1e4:	430b      	orrs	r3, r1
     1e6:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1e8:	2140      	movs	r1, #64	; 0x40
     1ea:	2382      	movs	r3, #130	; 0x82
     1ec:	005b      	lsls	r3, r3, #1
     1ee:	4a02      	ldr	r2, [pc, #8]	; (1f8 <ADC_0_CLOCK_init+0x1c>)
     1f0:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     1f2:	4770      	bx	lr
     1f4:	40000800 	.word	0x40000800
     1f8:	40001c00 	.word	0x40001c00

000001fc <ADC_0_init>:

void ADC_0_init(void)
{
     1fc:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     1fe:	4b06      	ldr	r3, [pc, #24]	; (218 <ADC_0_init+0x1c>)
     200:	4798      	blx	r3
	ADC_0_PORT_init();
     202:	4b06      	ldr	r3, [pc, #24]	; (21c <ADC_0_init+0x20>)
     204:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, _adc_get_adc_sync());
     206:	4b06      	ldr	r3, [pc, #24]	; (220 <ADC_0_init+0x24>)
     208:	4798      	blx	r3
     20a:	0002      	movs	r2, r0
     20c:	4905      	ldr	r1, [pc, #20]	; (224 <ADC_0_init+0x28>)
     20e:	4806      	ldr	r0, [pc, #24]	; (228 <ADC_0_init+0x2c>)
     210:	4b06      	ldr	r3, [pc, #24]	; (22c <ADC_0_init+0x30>)
     212:	4798      	blx	r3
}
     214:	bd10      	pop	{r4, pc}
     216:	46c0      	nop			; (mov r8, r8)
     218:	000001dd 	.word	0x000001dd
     21c:	0000019d 	.word	0x0000019d
     220:	00000753 	.word	0x00000753
     224:	42004400 	.word	0x42004400
     228:	200000a0 	.word	0x200000a0
     22c:	00000305 	.word	0x00000305

00000230 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     230:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	2382      	movs	r3, #130	; 0x82
     234:	05db      	lsls	r3, r3, #23
     236:	22ca      	movs	r2, #202	; 0xca
     238:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     23a:	2501      	movs	r5, #1
     23c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23e:	2401      	movs	r4, #1
     240:	4321      	orrs	r1, r4
     242:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     244:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     246:	20b5      	movs	r0, #181	; 0xb5
     248:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     24a:	3abb      	subs	r2, #187	; 0xbb
     24c:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     24e:	2203      	movs	r2, #3
     250:	4311      	orrs	r1, r2
     252:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     254:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     256:	21cb      	movs	r1, #203	; 0xcb
     258:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     25a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     25c:	4322      	orrs	r2, r4
     25e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     260:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     262:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     264:	39bc      	subs	r1, #188	; 0xbc
     266:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     268:	2130      	movs	r1, #48	; 0x30
     26a:	430a      	orrs	r2, r1
     26c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     270:	bd30      	pop	{r4, r5, pc}
	...

00000274 <TARGET_IO_CLOCK_init>:
     274:	4b05      	ldr	r3, [pc, #20]	; (28c <TARGET_IO_CLOCK_init+0x18>)
     276:	2240      	movs	r2, #64	; 0x40
     278:	21dc      	movs	r1, #220	; 0xdc
     27a:	505a      	str	r2, [r3, r1]
     27c:	3914      	subs	r1, #20
     27e:	505a      	str	r2, [r3, r1]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     280:	4a03      	ldr	r2, [pc, #12]	; (290 <TARGET_IO_CLOCK_init+0x1c>)
     282:	69d3      	ldr	r3, [r2, #28]
     284:	39a8      	subs	r1, #168	; 0xa8
     286:	430b      	orrs	r3, r1
     288:	61d3      	str	r3, [r2, #28]
void TARGET_IO_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     28a:	4770      	bx	lr
     28c:	40001c00 	.word	0x40001c00
     290:	40000800 	.word	0x40000800

00000294 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     294:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     296:	4b05      	ldr	r3, [pc, #20]	; (2ac <TARGET_IO_init+0x18>)
     298:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     29a:	2200      	movs	r2, #0
     29c:	4904      	ldr	r1, [pc, #16]	; (2b0 <TARGET_IO_init+0x1c>)
     29e:	4805      	ldr	r0, [pc, #20]	; (2b4 <TARGET_IO_init+0x20>)
     2a0:	4b05      	ldr	r3, [pc, #20]	; (2b8 <TARGET_IO_init+0x24>)
     2a2:	4798      	blx	r3
	TARGET_IO_PORT_init();
     2a4:	4b05      	ldr	r3, [pc, #20]	; (2bc <TARGET_IO_init+0x28>)
     2a6:	4798      	blx	r3
}
     2a8:	bd10      	pop	{r4, pc}
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	00000275 	.word	0x00000275
     2b0:	42001400 	.word	0x42001400
     2b4:	20000094 	.word	0x20000094
     2b8:	0000048d 	.word	0x0000048d
     2bc:	00000231 	.word	0x00000231

000002c0 <system_init>:

void system_init(void)
{
     2c0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2c2:	4b0c      	ldr	r3, [pc, #48]	; (2f4 <system_init+0x34>)
     2c4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c6:	23c0      	movs	r3, #192	; 0xc0
     2c8:	05db      	lsls	r3, r3, #23
     2ca:	2280      	movs	r2, #128	; 0x80
     2cc:	0212      	lsls	r2, r2, #8
     2ce:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d2:	2382      	movs	r3, #130	; 0x82
     2d4:	05db      	lsls	r3, r3, #23
     2d6:	4a08      	ldr	r2, [pc, #32]	; (2f8 <system_init+0x38>)
     2d8:	629a      	str	r2, [r3, #40]	; 0x28
     2da:	22c0      	movs	r2, #192	; 0xc0
     2dc:	0612      	lsls	r2, r2, #24
     2de:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2e0:	214f      	movs	r1, #79	; 0x4f
     2e2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2e4:	2001      	movs	r0, #1
     2e6:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2e8:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     2ea:	4b04      	ldr	r3, [pc, #16]	; (2fc <system_init+0x3c>)
     2ec:	4798      	blx	r3

	TARGET_IO_init();
     2ee:	4b04      	ldr	r3, [pc, #16]	; (300 <system_init+0x40>)
     2f0:	4798      	blx	r3
}
     2f2:	bd10      	pop	{r4, pc}
     2f4:	00000759 	.word	0x00000759
     2f8:	40008000 	.word	0x40008000
     2fc:	000001fd 	.word	0x000001fd
     300:	00000295 	.word	0x00000295

00000304 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     304:	b570      	push	{r4, r5, r6, lr}
     306:	0004      	movs	r4, r0
     308:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     30a:	2800      	cmp	r0, #0
     30c:	d00d      	beq.n	32a <adc_sync_init+0x26>
     30e:	2900      	cmp	r1, #0
     310:	d009      	beq.n	326 <adc_sync_init+0x22>
     312:	2001      	movs	r0, #1
     314:	2239      	movs	r2, #57	; 0x39
     316:	4906      	ldr	r1, [pc, #24]	; (330 <adc_sync_init+0x2c>)
     318:	4b06      	ldr	r3, [pc, #24]	; (334 <adc_sync_init+0x30>)
     31a:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     31c:	0029      	movs	r1, r5
     31e:	0020      	movs	r0, r4
     320:	4b05      	ldr	r3, [pc, #20]	; (338 <adc_sync_init+0x34>)
     322:	4798      	blx	r3
}
     324:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     326:	2000      	movs	r0, #0
     328:	e7f4      	b.n	314 <adc_sync_init+0x10>
     32a:	2000      	movs	r0, #0
     32c:	e7f2      	b.n	314 <adc_sync_init+0x10>
     32e:	46c0      	nop			; (mov r8, r8)
     330:	00001660 	.word	0x00001660
     334:	00000505 	.word	0x00000505
     338:	000006f5 	.word	0x000006f5

0000033c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     33c:	b570      	push	{r4, r5, r6, lr}
     33e:	0004      	movs	r4, r0
     340:	000d      	movs	r5, r1
     342:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     344:	2800      	cmp	r0, #0
     346:	d00e      	beq.n	366 <io_write+0x2a>
     348:	2900      	cmp	r1, #0
     34a:	d00a      	beq.n	362 <io_write+0x26>
     34c:	2001      	movs	r0, #1
     34e:	2234      	movs	r2, #52	; 0x34
     350:	4906      	ldr	r1, [pc, #24]	; (36c <io_write+0x30>)
     352:	4b07      	ldr	r3, [pc, #28]	; (370 <io_write+0x34>)
     354:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     356:	6823      	ldr	r3, [r4, #0]
     358:	0032      	movs	r2, r6
     35a:	0029      	movs	r1, r5
     35c:	0020      	movs	r0, r4
     35e:	4798      	blx	r3
}
     360:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     362:	2000      	movs	r0, #0
     364:	e7f3      	b.n	34e <io_write+0x12>
     366:	2000      	movs	r0, #0
     368:	e7f1      	b.n	34e <io_write+0x12>
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	0000167c 	.word	0x0000167c
     370:	00000505 	.word	0x00000505

00000374 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     374:	b570      	push	{r4, r5, r6, lr}
     376:	0004      	movs	r4, r0
     378:	000d      	movs	r5, r1
     37a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     37c:	2800      	cmp	r0, #0
     37e:	d00e      	beq.n	39e <io_read+0x2a>
     380:	2900      	cmp	r1, #0
     382:	d00a      	beq.n	39a <io_read+0x26>
     384:	2001      	movs	r0, #1
     386:	223d      	movs	r2, #61	; 0x3d
     388:	4906      	ldr	r1, [pc, #24]	; (3a4 <io_read+0x30>)
     38a:	4b07      	ldr	r3, [pc, #28]	; (3a8 <io_read+0x34>)
     38c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     38e:	6863      	ldr	r3, [r4, #4]
     390:	0032      	movs	r2, r6
     392:	0029      	movs	r1, r5
     394:	0020      	movs	r0, r4
     396:	4798      	blx	r3
}
     398:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     39a:	2000      	movs	r0, #0
     39c:	e7f3      	b.n	386 <io_read+0x12>
     39e:	2000      	movs	r0, #0
     3a0:	e7f1      	b.n	386 <io_read+0x12>
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	0000167c 	.word	0x0000167c
     3a8:	00000505 	.word	0x00000505

000003ac <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3ae:	0005      	movs	r5, r0
     3b0:	000e      	movs	r6, r1
     3b2:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     3b4:	2800      	cmp	r0, #0
     3b6:	d023      	beq.n	400 <usart_sync_write+0x54>
     3b8:	2900      	cmp	r1, #0
     3ba:	d023      	beq.n	404 <usart_sync_write+0x58>
     3bc:	2a00      	cmp	r2, #0
     3be:	d123      	bne.n	408 <usart_sync_write+0x5c>
     3c0:	2000      	movs	r0, #0
     3c2:	22f1      	movs	r2, #241	; 0xf1
     3c4:	4911      	ldr	r1, [pc, #68]	; (40c <usart_sync_write+0x60>)
     3c6:	4b12      	ldr	r3, [pc, #72]	; (410 <usart_sync_write+0x64>)
     3c8:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     3ca:	002c      	movs	r4, r5
     3cc:	3408      	adds	r4, #8
     3ce:	0020      	movs	r0, r4
     3d0:	4b10      	ldr	r3, [pc, #64]	; (414 <usart_sync_write+0x68>)
     3d2:	4798      	blx	r3
     3d4:	2800      	cmp	r0, #0
     3d6:	d0f8      	beq.n	3ca <usart_sync_write+0x1e>
     3d8:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     3da:	5d71      	ldrb	r1, [r6, r5]
     3dc:	0020      	movs	r0, r4
     3de:	4b0e      	ldr	r3, [pc, #56]	; (418 <usart_sync_write+0x6c>)
     3e0:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     3e2:	0020      	movs	r0, r4
     3e4:	4b0b      	ldr	r3, [pc, #44]	; (414 <usart_sync_write+0x68>)
     3e6:	4798      	blx	r3
     3e8:	2800      	cmp	r0, #0
     3ea:	d0fa      	beq.n	3e2 <usart_sync_write+0x36>
			;
	} while (++offset < length);
     3ec:	3501      	adds	r5, #1
     3ee:	42bd      	cmp	r5, r7
     3f0:	d3f3      	bcc.n	3da <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     3f2:	0020      	movs	r0, r4
     3f4:	4b09      	ldr	r3, [pc, #36]	; (41c <usart_sync_write+0x70>)
     3f6:	4798      	blx	r3
     3f8:	2800      	cmp	r0, #0
     3fa:	d0fa      	beq.n	3f2 <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     3fc:	0028      	movs	r0, r5
     3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     400:	2000      	movs	r0, #0
     402:	e7de      	b.n	3c2 <usart_sync_write+0x16>
     404:	2000      	movs	r0, #0
     406:	e7dc      	b.n	3c2 <usart_sync_write+0x16>
     408:	2001      	movs	r0, #1
     40a:	e7da      	b.n	3c2 <usart_sync_write+0x16>
     40c:	00001690 	.word	0x00001690
     410:	00000505 	.word	0x00000505
     414:	000009c7 	.word	0x000009c7
     418:	000009b7 	.word	0x000009b7
     41c:	000009d1 	.word	0x000009d1

00000420 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     422:	46ce      	mov	lr, r9
     424:	4647      	mov	r7, r8
     426:	b580      	push	{r7, lr}
     428:	1e05      	subs	r5, r0, #0
     42a:	4688      	mov	r8, r1
     42c:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     42e:	d01f      	beq.n	470 <usart_sync_read+0x50>
     430:	2900      	cmp	r1, #0
     432:	d01f      	beq.n	474 <usart_sync_read+0x54>
     434:	2a00      	cmp	r2, #0
     436:	d11f      	bne.n	478 <usart_sync_read+0x58>
     438:	2000      	movs	r0, #0
     43a:	2286      	movs	r2, #134	; 0x86
     43c:	0052      	lsls	r2, r2, #1
     43e:	490f      	ldr	r1, [pc, #60]	; (47c <usart_sync_read+0x5c>)
     440:	4b0f      	ldr	r3, [pc, #60]	; (480 <usart_sync_read+0x60>)
     442:	4798      	blx	r3
	uint32_t                      offset = 0;
     444:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     446:	002c      	movs	r4, r5
     448:	3408      	adds	r4, #8
     44a:	0020      	movs	r0, r4
     44c:	4b0d      	ldr	r3, [pc, #52]	; (484 <usart_sync_read+0x64>)
     44e:	4798      	blx	r3
     450:	2800      	cmp	r0, #0
     452:	d0f8      	beq.n	446 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     454:	4643      	mov	r3, r8
     456:	199f      	adds	r7, r3, r6
     458:	0020      	movs	r0, r4
     45a:	4b0b      	ldr	r3, [pc, #44]	; (488 <usart_sync_read+0x68>)
     45c:	4798      	blx	r3
     45e:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     460:	3601      	adds	r6, #1
     462:	454e      	cmp	r6, r9
     464:	d3ef      	bcc.n	446 <usart_sync_read+0x26>

	return (int32_t)offset;
}
     466:	0030      	movs	r0, r6
     468:	bc0c      	pop	{r2, r3}
     46a:	4690      	mov	r8, r2
     46c:	4699      	mov	r9, r3
     46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     470:	2000      	movs	r0, #0
     472:	e7e2      	b.n	43a <usart_sync_read+0x1a>
     474:	2000      	movs	r0, #0
     476:	e7e0      	b.n	43a <usart_sync_read+0x1a>
     478:	2001      	movs	r0, #1
     47a:	e7de      	b.n	43a <usart_sync_read+0x1a>
     47c:	00001690 	.word	0x00001690
     480:	00000505 	.word	0x00000505
     484:	000009dd 	.word	0x000009dd
     488:	000009bf 	.word	0x000009bf

0000048c <usart_sync_init>:
{
     48c:	b570      	push	{r4, r5, r6, lr}
     48e:	0004      	movs	r4, r0
     490:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     492:	2800      	cmp	r0, #0
     494:	d014      	beq.n	4c0 <usart_sync_init+0x34>
     496:	2900      	cmp	r1, #0
     498:	d010      	beq.n	4bc <usart_sync_init+0x30>
     49a:	2001      	movs	r0, #1
     49c:	2234      	movs	r2, #52	; 0x34
     49e:	4909      	ldr	r1, [pc, #36]	; (4c4 <usart_sync_init+0x38>)
     4a0:	4b09      	ldr	r3, [pc, #36]	; (4c8 <usart_sync_init+0x3c>)
     4a2:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     4a4:	0020      	movs	r0, r4
     4a6:	3008      	adds	r0, #8
     4a8:	0029      	movs	r1, r5
     4aa:	4b08      	ldr	r3, [pc, #32]	; (4cc <usart_sync_init+0x40>)
     4ac:	4798      	blx	r3
	if (init_status) {
     4ae:	2800      	cmp	r0, #0
     4b0:	d103      	bne.n	4ba <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     4b2:	4b07      	ldr	r3, [pc, #28]	; (4d0 <usart_sync_init+0x44>)
     4b4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     4b6:	4b07      	ldr	r3, [pc, #28]	; (4d4 <usart_sync_init+0x48>)
     4b8:	6023      	str	r3, [r4, #0]
}
     4ba:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     4bc:	2000      	movs	r0, #0
     4be:	e7ed      	b.n	49c <usart_sync_init+0x10>
     4c0:	2000      	movs	r0, #0
     4c2:	e7eb      	b.n	49c <usart_sync_init+0x10>
     4c4:	00001690 	.word	0x00001690
     4c8:	00000505 	.word	0x00000505
     4cc:	00000979 	.word	0x00000979
     4d0:	00000421 	.word	0x00000421
     4d4:	000003ad 	.word	0x000003ad

000004d8 <usart_sync_enable>:
{
     4d8:	b510      	push	{r4, lr}
     4da:	0004      	movs	r4, r0
	ASSERT(descr);
     4dc:	1e43      	subs	r3, r0, #1
     4de:	4198      	sbcs	r0, r3
     4e0:	b2c0      	uxtb	r0, r0
     4e2:	2253      	movs	r2, #83	; 0x53
     4e4:	4904      	ldr	r1, [pc, #16]	; (4f8 <usart_sync_enable+0x20>)
     4e6:	4b05      	ldr	r3, [pc, #20]	; (4fc <usart_sync_enable+0x24>)
     4e8:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     4ea:	0020      	movs	r0, r4
     4ec:	3008      	adds	r0, #8
     4ee:	4b04      	ldr	r3, [pc, #16]	; (500 <usart_sync_enable+0x28>)
     4f0:	4798      	blx	r3
}
     4f2:	2000      	movs	r0, #0
     4f4:	bd10      	pop	{r4, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00001690 	.word	0x00001690
     4fc:	00000505 	.word	0x00000505
     500:	000009a5 	.word	0x000009a5

00000504 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     504:	2800      	cmp	r0, #0
     506:	d100      	bne.n	50a <assert+0x6>
		__asm("BKPT #0");
     508:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     50a:	4770      	bx	lr

0000050c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     50c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     50e:	4a06      	ldr	r2, [pc, #24]	; (528 <_sbrk+0x1c>)
     510:	6812      	ldr	r2, [r2, #0]
     512:	2a00      	cmp	r2, #0
     514:	d004      	beq.n	520 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     516:	4a04      	ldr	r2, [pc, #16]	; (528 <_sbrk+0x1c>)
     518:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     51a:	18c3      	adds	r3, r0, r3
     51c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     51e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     520:	4902      	ldr	r1, [pc, #8]	; (52c <_sbrk+0x20>)
     522:	4a01      	ldr	r2, [pc, #4]	; (528 <_sbrk+0x1c>)
     524:	6011      	str	r1, [r2, #0]
     526:	e7f6      	b.n	516 <_sbrk+0xa>
     528:	20000080 	.word	0x20000080
     52c:	200020a8 	.word	0x200020a8

00000530 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     530:	2001      	movs	r0, #1
     532:	4240      	negs	r0, r0
     534:	4770      	bx	lr

00000536 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     536:	2380      	movs	r3, #128	; 0x80
     538:	019b      	lsls	r3, r3, #6
     53a:	604b      	str	r3, [r1, #4]

	return 0;
}
     53c:	2000      	movs	r0, #0
     53e:	4770      	bx	lr

00000540 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     540:	2001      	movs	r0, #1
     542:	4770      	bx	lr

00000544 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     544:	2000      	movs	r0, #0
     546:	4770      	bx	lr

00000548 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     548:	4b02      	ldr	r3, [pc, #8]	; (554 <_adc_get_hardware_index+0xc>)
     54a:	469c      	mov	ip, r3
     54c:	4460      	add	r0, ip
     54e:	0a80      	lsrs	r0, r0, #10
     550:	b2c0      	uxtb	r0, r0
}
     552:	4770      	bx	lr
     554:	bdffbc00 	.word	0xbdffbc00

00000558 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     558:	b530      	push	{r4, r5, lr}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
     55a:	4b52      	ldr	r3, [pc, #328]	; (6a4 <_adc_init+0x14c>)
     55c:	4298      	cmp	r0, r3
     55e:	d100      	bne.n	562 <_adc_init+0xa>
     560:	e088      	b.n	674 <_adc_init+0x11c>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
     562:	4b51      	ldr	r3, [pc, #324]	; (6a8 <_adc_init+0x150>)
     564:	4298      	cmp	r0, r3
     566:	d100      	bne.n	56a <_adc_init+0x12>
     568:	e08f      	b.n	68a <_adc_init+0x132>
	uint16_t calib_reg = 0;
     56a:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     56c:	8c03      	ldrh	r3, [r0, #32]
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     56e:	07db      	lsls	r3, r3, #31
     570:	d414      	bmi.n	59c <_adc_init+0x44>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     572:	8c03      	ldrh	r3, [r0, #32]
     574:	079b      	lsls	r3, r3, #30
     576:	d1fc      	bne.n	572 <_adc_init+0x1a>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     578:	7803      	ldrb	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     57a:	079b      	lsls	r3, r3, #30
     57c:	d509      	bpl.n	592 <_adc_init+0x3a>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     57e:	7803      	ldrb	r3, [r0, #0]
     580:	2402      	movs	r4, #2
     582:	43a3      	bics	r3, r4
     584:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     586:	8c03      	ldrh	r3, [r0, #32]
     588:	079b      	lsls	r3, r3, #30
     58a:	d1fc      	bne.n	586 <_adc_init+0x2e>
     58c:	8c03      	ldrh	r3, [r0, #32]
     58e:	079b      	lsls	r3, r3, #30
     590:	d4fc      	bmi.n	58c <_adc_init+0x34>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     592:	2301      	movs	r3, #1
     594:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     596:	8c03      	ldrh	r3, [r0, #32]
     598:	079b      	lsls	r3, r3, #30
     59a:	d1fc      	bne.n	596 <_adc_init+0x3e>
     59c:	8c03      	ldrh	r3, [r0, #32]
     59e:	07db      	lsls	r3, r3, #31
     5a0:	d4fc      	bmi.n	59c <_adc_init+0x44>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     5a2:	8582      	strh	r2, [r0, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     5a4:	00ca      	lsls	r2, r1, #3
     5a6:	1a52      	subs	r2, r2, r1
     5a8:	0094      	lsls	r4, r2, #2
     5aa:	4b40      	ldr	r3, [pc, #256]	; (6ac <_adc_init+0x154>)
     5ac:	191b      	adds	r3, r3, r4
     5ae:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
     5b0:	7042      	strb	r2, [r0, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     5b2:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
     5b4:	7082      	strb	r2, [r0, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     5b6:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
     5b8:	70c2      	strb	r2, [r0, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     5ba:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
     5bc:	8103      	strh	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     5be:	8c03      	ldrh	r3, [r0, #32]
     5c0:	055b      	lsls	r3, r3, #21
     5c2:	d1fc      	bne.n	5be <_adc_init+0x66>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     5c4:	00cb      	lsls	r3, r1, #3
     5c6:	1a5b      	subs	r3, r3, r1
     5c8:	009a      	lsls	r2, r3, #2
     5ca:	4b38      	ldr	r3, [pc, #224]	; (6ac <_adc_init+0x154>)
     5cc:	189b      	adds	r3, r3, r2
     5ce:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
     5d0:	8143      	strh	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     5d2:	8c03      	ldrh	r3, [r0, #32]
     5d4:	055b      	lsls	r3, r3, #21
     5d6:	d1fc      	bne.n	5d2 <_adc_init+0x7a>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     5d8:	00cb      	lsls	r3, r1, #3
     5da:	1a5b      	subs	r3, r3, r1
     5dc:	009a      	lsls	r2, r3, #2
     5de:	4b33      	ldr	r3, [pc, #204]	; (6ac <_adc_init+0x154>)
     5e0:	189b      	adds	r3, r3, r2
     5e2:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     5e4:	7303      	strb	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     5e6:	8c03      	ldrh	r3, [r0, #32]
     5e8:	055b      	lsls	r3, r3, #21
     5ea:	d1fc      	bne.n	5e6 <_adc_init+0x8e>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     5ec:	00cb      	lsls	r3, r1, #3
     5ee:	1a5b      	subs	r3, r3, r1
     5f0:	009a      	lsls	r2, r3, #2
     5f2:	4b2e      	ldr	r3, [pc, #184]	; (6ac <_adc_init+0x154>)
     5f4:	189b      	adds	r3, r3, r2
     5f6:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     5f8:	7343      	strb	r3, [r0, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     5fa:	8c03      	ldrh	r3, [r0, #32]
     5fc:	055b      	lsls	r3, r3, #21
     5fe:	d1fc      	bne.n	5fa <_adc_init+0xa2>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     600:	00cb      	lsls	r3, r1, #3
     602:	1a5b      	subs	r3, r3, r1
     604:	009a      	lsls	r2, r3, #2
     606:	4b29      	ldr	r3, [pc, #164]	; (6ac <_adc_init+0x154>)
     608:	189b      	adds	r3, r3, r2
     60a:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     60c:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     60e:	8c03      	ldrh	r3, [r0, #32]
     610:	065b      	lsls	r3, r3, #25
     612:	d4fc      	bmi.n	60e <_adc_init+0xb6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     614:	00cb      	lsls	r3, r1, #3
     616:	1a5b      	subs	r3, r3, r1
     618:	009a      	lsls	r2, r3, #2
     61a:	4b24      	ldr	r3, [pc, #144]	; (6ac <_adc_init+0x154>)
     61c:	189b      	adds	r3, r3, r2
     61e:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     620:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     622:	8c03      	ldrh	r3, [r0, #32]
     624:	061b      	lsls	r3, r3, #24
     626:	d4fc      	bmi.n	622 <_adc_init+0xca>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     628:	00cb      	lsls	r3, r1, #3
     62a:	1a5b      	subs	r3, r3, r1
     62c:	009a      	lsls	r2, r3, #2
     62e:	4b1f      	ldr	r3, [pc, #124]	; (6ac <_adc_init+0x154>)
     630:	189b      	adds	r3, r3, r2
     632:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     634:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     636:	8c03      	ldrh	r3, [r0, #32]
     638:	05db      	lsls	r3, r3, #23
     63a:	d4fc      	bmi.n	636 <_adc_init+0xde>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     63c:	00cb      	lsls	r3, r1, #3
     63e:	1a5b      	subs	r3, r3, r1
     640:	009a      	lsls	r2, r3, #2
     642:	4b1a      	ldr	r3, [pc, #104]	; (6ac <_adc_init+0x154>)
     644:	189b      	adds	r3, r3, r2
     646:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     648:	8283      	strh	r3, [r0, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     64a:	8c03      	ldrh	r3, [r0, #32]
     64c:	059b      	lsls	r3, r3, #22
     64e:	d4fc      	bmi.n	64a <_adc_init+0xf2>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     650:	4a16      	ldr	r2, [pc, #88]	; (6ac <_adc_init+0x154>)
     652:	00cb      	lsls	r3, r1, #3
     654:	1a5d      	subs	r5, r3, r1
     656:	00ac      	lsls	r4, r5, #2
     658:	0025      	movs	r5, r4
     65a:	1914      	adds	r4, r2, r4
     65c:	7d24      	ldrb	r4, [r4, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     65e:	7704      	strb	r4, [r0, #28]
	((Adc *)hw)->SEQCTRL.reg = data;
     660:	2400      	movs	r4, #0
     662:	6284      	str	r4, [r0, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     664:	1952      	adds	r2, r2, r5
     666:	7853      	ldrb	r3, [r2, #1]
	((Adc *)hw)->CTRLA.reg = data;
     668:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     66a:	8c03      	ldrh	r3, [r0, #32]
     66c:	079b      	lsls	r3, r3, #30
     66e:	d1fc      	bne.n	66a <_adc_init+0x112>

	return ERR_NONE;
}
     670:	2000      	movs	r0, #0
     672:	bd30      	pop	{r4, r5, pc}
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     674:	4b0e      	ldr	r3, [pc, #56]	; (6b0 <_adc_init+0x158>)
     676:	681b      	ldr	r3, [r3, #0]
     678:	021a      	lsls	r2, r3, #8
     67a:	24e0      	movs	r4, #224	; 0xe0
     67c:	00e4      	lsls	r4, r4, #3
     67e:	4014      	ands	r4, r2
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
     680:	08db      	lsrs	r3, r3, #3
     682:	2207      	movs	r2, #7
     684:	401a      	ands	r2, r3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     686:	4322      	orrs	r2, r4
     688:	e770      	b.n	56c <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     68a:	4b09      	ldr	r3, [pc, #36]	; (6b0 <_adc_init+0x158>)
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	099a      	lsrs	r2, r3, #6
     690:	0212      	lsls	r2, r2, #8
     692:	24e0      	movs	r4, #224	; 0xe0
     694:	00e4      	lsls	r4, r4, #3
     696:	4022      	ands	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
     698:	0a5b      	lsrs	r3, r3, #9
     69a:	2407      	movs	r4, #7
     69c:	4023      	ands	r3, r4
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     69e:	431a      	orrs	r2, r3
     6a0:	e764      	b.n	56c <_adc_init+0x14>
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	42004400 	.word	0x42004400
     6a8:	42004800 	.word	0x42004800
     6ac:	000016ac 	.word	0x000016ac
     6b0:	00806020 	.word	0x00806020

000006b4 <_adc_get_regs>:
{
     6b4:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     6b6:	4b0b      	ldr	r3, [pc, #44]	; (6e4 <_adc_get_regs+0x30>)
     6b8:	4798      	blx	r3
     6ba:	0002      	movs	r2, r0
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     6bc:	2000      	movs	r0, #0
     6be:	2800      	cmp	r0, #0
     6c0:	d006      	beq.n	6d0 <_adc_get_regs+0x1c>
	ASSERT(false);
     6c2:	228d      	movs	r2, #141	; 0x8d
     6c4:	4908      	ldr	r1, [pc, #32]	; (6e8 <_adc_get_regs+0x34>)
     6c6:	2000      	movs	r0, #0
     6c8:	4b08      	ldr	r3, [pc, #32]	; (6ec <_adc_get_regs+0x38>)
     6ca:	4798      	blx	r3
	return 0;
     6cc:	2000      	movs	r0, #0
}
     6ce:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     6d0:	00c3      	lsls	r3, r0, #3
     6d2:	1a1b      	subs	r3, r3, r0
     6d4:	0099      	lsls	r1, r3, #2
     6d6:	4b06      	ldr	r3, [pc, #24]	; (6f0 <_adc_get_regs+0x3c>)
     6d8:	5ccb      	ldrb	r3, [r1, r3]
     6da:	429a      	cmp	r2, r3
     6dc:	d0f7      	beq.n	6ce <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     6de:	3001      	adds	r0, #1
     6e0:	b2c0      	uxtb	r0, r0
     6e2:	e7ec      	b.n	6be <_adc_get_regs+0xa>
     6e4:	00000549 	.word	0x00000549
     6e8:	000016c8 	.word	0x000016c8
     6ec:	00000505 	.word	0x00000505
     6f0:	000016ac 	.word	0x000016ac

000006f4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     6f4:	b570      	push	{r4, r5, r6, lr}
     6f6:	0005      	movs	r5, r0
     6f8:	000c      	movs	r4, r1
	ASSERT(device);
     6fa:	1e43      	subs	r3, r0, #1
     6fc:	4198      	sbcs	r0, r3
     6fe:	b2c0      	uxtb	r0, r0
     700:	22dd      	movs	r2, #221	; 0xdd
     702:	4906      	ldr	r1, [pc, #24]	; (71c <_adc_sync_init+0x28>)
     704:	4b06      	ldr	r3, [pc, #24]	; (720 <_adc_sync_init+0x2c>)
     706:	4798      	blx	r3

	device->hw = hw;
     708:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     70a:	0020      	movs	r0, r4
     70c:	4b05      	ldr	r3, [pc, #20]	; (724 <_adc_sync_init+0x30>)
     70e:	4798      	blx	r3
     710:	0001      	movs	r1, r0
     712:	0020      	movs	r0, r4
     714:	4b04      	ldr	r3, [pc, #16]	; (728 <_adc_sync_init+0x34>)
     716:	4798      	blx	r3
}
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	000016c8 	.word	0x000016c8
     720:	00000505 	.word	0x00000505
     724:	000006b5 	.word	0x000006b5
     728:	00000559 	.word	0x00000559

0000072c <_adc_async_is_channel_conversion_done>:
 */
bool _adc_async_is_channel_conversion_done(const struct _adc_async_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
     72c:	6943      	ldr	r3, [r0, #20]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
     72e:	7998      	ldrb	r0, [r3, #6]
     730:	2301      	movs	r3, #1
     732:	4018      	ands	r0, r3
}
     734:	4770      	bx	lr

00000736 <_adc_async_convert>:
/**
 * \brief Make conversion
 */
void _adc_async_convert(struct _adc_async_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     736:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     738:	7e13      	ldrb	r3, [r2, #24]
     73a:	2102      	movs	r1, #2
     73c:	430b      	orrs	r3, r1
     73e:	b2db      	uxtb	r3, r3
     740:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     742:	8c13      	ldrh	r3, [r2, #32]
     744:	055b      	lsls	r3, r3, #21
     746:	d1fc      	bne.n	742 <_adc_async_convert+0xc>
}
     748:	4770      	bx	lr

0000074a <_adc_async_read_channel_data>:
 */
uint16_t _adc_async_read_channel_data(const struct _adc_async_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
     74a:	6943      	ldr	r3, [r0, #20]
	return ((Adc *)hw)->RESULT.reg;
     74c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     74e:	b280      	uxth	r0, r0
}
     750:	4770      	bx	lr

00000752 <_adc_get_adc_sync>:
 * \brief Retrieve ADC sync helper functions
 */
void *_adc_get_adc_sync(void)
{
	return (void *)NULL;
}
     752:	2000      	movs	r0, #0
     754:	4770      	bx	lr
	...

00000758 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     758:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     75a:	4b08      	ldr	r3, [pc, #32]	; (77c <_init_chip+0x24>)
     75c:	685a      	ldr	r2, [r3, #4]
     75e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <_init_chip+0x28>)
     762:	4798      	blx	r3
	_oscctrl_init_sources();
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <_init_chip+0x2c>)
     766:	4798      	blx	r3
	_mclk_init();
     768:	4b07      	ldr	r3, [pc, #28]	; (788 <_init_chip+0x30>)
     76a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     76c:	4b07      	ldr	r3, [pc, #28]	; (78c <_init_chip+0x34>)
     76e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     770:	20ff      	movs	r0, #255	; 0xff
     772:	4b07      	ldr	r3, [pc, #28]	; (790 <_init_chip+0x38>)
     774:	4798      	blx	r3

	_div_init();
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <_init_chip+0x3c>)
     778:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     77a:	bd10      	pop	{r4, pc}
     77c:	41004000 	.word	0x41004000
     780:	000007d9 	.word	0x000007d9
     784:	000007f5 	.word	0x000007f5
     788:	000007cd 	.word	0x000007cd
     78c:	00000831 	.word	0x00000831
     790:	000007a9 	.word	0x000007a9
     794:	00000799 	.word	0x00000799

00000798 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     798:	2290      	movs	r2, #144	; 0x90
     79a:	05d2      	lsls	r2, r2, #23
     79c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     79e:	2102      	movs	r1, #2
     7a0:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     7a2:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     7a4:	4770      	bx	lr
	...

000007a8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     7a8:	07c3      	lsls	r3, r0, #31
     7aa:	d507      	bpl.n	7bc <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     7ac:	4a04      	ldr	r2, [pc, #16]	; (7c0 <_gclk_init_generators_by_fref+0x18>)
     7ae:	4b05      	ldr	r3, [pc, #20]	; (7c4 <_gclk_init_generators_by_fref+0x1c>)
     7b0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     7b2:	4b04      	ldr	r3, [pc, #16]	; (7c4 <_gclk_init_generators_by_fref+0x1c>)
     7b4:	685a      	ldr	r2, [r3, #4]
     7b6:	4b04      	ldr	r3, [pc, #16]	; (7c8 <_gclk_init_generators_by_fref+0x20>)
     7b8:	421a      	tst	r2, r3
     7ba:	d1fa      	bne.n	7b2 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     7bc:	4770      	bx	lr
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00010106 	.word	0x00010106
     7c4:	40001c00 	.word	0x40001c00
     7c8:	000007fd 	.word	0x000007fd

000007cc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     7cc:	2201      	movs	r2, #1
     7ce:	4b01      	ldr	r3, [pc, #4]	; (7d4 <_mclk_init+0x8>)
     7d0:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     7d2:	4770      	bx	lr
     7d4:	40000800 	.word	0x40000800

000007d8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     7d8:	4a05      	ldr	r2, [pc, #20]	; (7f0 <_osc32kctrl_init_sources+0x18>)
     7da:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     7dc:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     7de:	021b      	lsls	r3, r3, #8
     7e0:	21f8      	movs	r1, #248	; 0xf8
     7e2:	0149      	lsls	r1, r1, #5
     7e4:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     7e6:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     7e8:	2301      	movs	r3, #1
     7ea:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     7ec:	4770      	bx	lr
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	40001400 	.word	0x40001400

000007f4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
     7f4:	4b0d      	ldr	r3, [pc, #52]	; (82c <_oscctrl_init_sources+0x38>)
     7f6:	2202      	movs	r2, #2
     7f8:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
     7fa:	3209      	adds	r2, #9
     7fc:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
     7fe:	4b0b      	ldr	r3, [pc, #44]	; (82c <_oscctrl_init_sources+0x38>)
     800:	699b      	ldr	r3, [r3, #24]
     802:	075b      	lsls	r3, r3, #29
     804:	d4fb      	bmi.n	7fe <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
     806:	4b09      	ldr	r3, [pc, #36]	; (82c <_oscctrl_init_sources+0x38>)
     808:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
     80a:	075b      	lsls	r3, r3, #29
     80c:	d4fb      	bmi.n	806 <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
     80e:	2207      	movs	r2, #7
     810:	4b06      	ldr	r3, [pc, #24]	; (82c <_oscctrl_init_sources+0x38>)
     812:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <_oscctrl_init_sources+0x38>)
     816:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
     818:	06db      	lsls	r3, r3, #27
     81a:	d5fb      	bpl.n	814 <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
     81c:	4a03      	ldr	r2, [pc, #12]	; (82c <_oscctrl_init_sources+0x38>)
     81e:	7d13      	ldrb	r3, [r2, #20]
     820:	2180      	movs	r1, #128	; 0x80
     822:	4249      	negs	r1, r1
     824:	430b      	orrs	r3, r1
     826:	b2db      	uxtb	r3, r3
     828:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     82a:	4770      	bx	lr
     82c:	40001000 	.word	0x40001000

00000830 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     830:	4770      	bx	lr
	...

00000834 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     834:	4b02      	ldr	r3, [pc, #8]	; (840 <_sercom_get_hardware_index+0xc>)
     836:	469c      	mov	ip, r3
     838:	4460      	add	r0, ip
     83a:	0a80      	lsrs	r0, r0, #10
     83c:	b2c0      	uxtb	r0, r0
}
     83e:	4770      	bx	lr
     840:	bdfffc00 	.word	0xbdfffc00

00000844 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     844:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     846:	4b0b      	ldr	r3, [pc, #44]	; (874 <_get_sercom_index+0x30>)
     848:	4798      	blx	r3
     84a:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     84c:	2000      	movs	r0, #0
     84e:	2800      	cmp	r0, #0
     850:	d006      	beq.n	860 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     852:	4a09      	ldr	r2, [pc, #36]	; (878 <_get_sercom_index+0x34>)
     854:	4909      	ldr	r1, [pc, #36]	; (87c <_get_sercom_index+0x38>)
     856:	2000      	movs	r0, #0
     858:	4b09      	ldr	r3, [pc, #36]	; (880 <_get_sercom_index+0x3c>)
     85a:	4798      	blx	r3
	return 0;
     85c:	2000      	movs	r0, #0
}
     85e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     860:	0083      	lsls	r3, r0, #2
     862:	181b      	adds	r3, r3, r0
     864:	0099      	lsls	r1, r3, #2
     866:	4b07      	ldr	r3, [pc, #28]	; (884 <_get_sercom_index+0x40>)
     868:	5ccb      	ldrb	r3, [r1, r3]
     86a:	429a      	cmp	r2, r3
     86c:	d0f7      	beq.n	85e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     86e:	3001      	adds	r0, #1
     870:	b2c0      	uxtb	r0, r0
     872:	e7ec      	b.n	84e <_get_sercom_index+0xa>
     874:	00000835 	.word	0x00000835
     878:	0000023a 	.word	0x0000023a
     87c:	00001730 	.word	0x00001730
     880:	00000505 	.word	0x00000505
     884:	000016e0 	.word	0x000016e0

00000888 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     888:	b570      	push	{r4, r5, r6, lr}
     88a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     88c:	4b38      	ldr	r3, [pc, #224]	; (970 <_usart_init+0xe8>)
     88e:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     890:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     892:	07db      	lsls	r3, r3, #31
     894:	d41d      	bmi.n	8d2 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     896:	0083      	lsls	r3, r0, #2
     898:	181b      	adds	r3, r3, r0
     89a:	009a      	lsls	r2, r3, #2
     89c:	4b35      	ldr	r3, [pc, #212]	; (974 <_usart_init+0xec>)
     89e:	189b      	adds	r3, r3, r2
     8a0:	685a      	ldr	r2, [r3, #4]
     8a2:	231c      	movs	r3, #28
     8a4:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8a6:	69e3      	ldr	r3, [r4, #28]
     8a8:	079b      	lsls	r3, r3, #30
     8aa:	d1fc      	bne.n	8a6 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     8ac:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     8ae:	079b      	lsls	r3, r3, #30
     8b0:	d509      	bpl.n	8c6 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     8b2:	6823      	ldr	r3, [r4, #0]
     8b4:	2102      	movs	r1, #2
     8b6:	438b      	bics	r3, r1
     8b8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8ba:	69e3      	ldr	r3, [r4, #28]
     8bc:	079b      	lsls	r3, r3, #30
     8be:	d1fc      	bne.n	8ba <_usart_init+0x32>
     8c0:	69e3      	ldr	r3, [r4, #28]
     8c2:	079b      	lsls	r3, r3, #30
     8c4:	d4fc      	bmi.n	8c0 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     8c6:	2301      	movs	r3, #1
     8c8:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     8ca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8cc:	69e3      	ldr	r3, [r4, #28]
     8ce:	079b      	lsls	r3, r3, #30
     8d0:	d1fc      	bne.n	8cc <_usart_init+0x44>
     8d2:	69e3      	ldr	r3, [r4, #28]
     8d4:	07db      	lsls	r3, r3, #31
     8d6:	d4fc      	bmi.n	8d2 <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     8d8:	0083      	lsls	r3, r0, #2
     8da:	181b      	adds	r3, r3, r0
     8dc:	009a      	lsls	r2, r3, #2
     8de:	4b25      	ldr	r3, [pc, #148]	; (974 <_usart_init+0xec>)
     8e0:	189b      	adds	r3, r3, r2
     8e2:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     8e4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8e6:	69e3      	ldr	r3, [r4, #28]
     8e8:	079b      	lsls	r3, r3, #30
     8ea:	d1fc      	bne.n	8e6 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     8ec:	0083      	lsls	r3, r0, #2
     8ee:	181b      	adds	r3, r3, r0
     8f0:	009a      	lsls	r2, r3, #2
     8f2:	4b20      	ldr	r3, [pc, #128]	; (974 <_usart_init+0xec>)
     8f4:	189b      	adds	r3, r3, r2
     8f6:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     8f8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     8fa:	69e3      	ldr	r3, [r4, #28]
     8fc:	075b      	lsls	r3, r3, #29
     8fe:	d1fc      	bne.n	8fa <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     900:	0083      	lsls	r3, r0, #2
     902:	181b      	adds	r3, r3, r0
     904:	009a      	lsls	r2, r3, #2
     906:	4b1b      	ldr	r3, [pc, #108]	; (974 <_usart_init+0xec>)
     908:	189b      	adds	r3, r3, r2
     90a:	685b      	ldr	r3, [r3, #4]
     90c:	049a      	lsls	r2, r3, #18
     90e:	d40b      	bmi.n	928 <_usart_init+0xa0>
     910:	22c0      	movs	r2, #192	; 0xc0
     912:	01d2      	lsls	r2, r2, #7
     914:	4213      	tst	r3, r2
     916:	d107      	bne.n	928 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     918:	0083      	lsls	r3, r0, #2
     91a:	181b      	adds	r3, r3, r0
     91c:	009a      	lsls	r2, r3, #2
     91e:	4b15      	ldr	r3, [pc, #84]	; (974 <_usart_init+0xec>)
     920:	189b      	adds	r3, r3, r2
     922:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     924:	81a3      	strh	r3, [r4, #12]
     926:	e015      	b.n	954 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     928:	0083      	lsls	r3, r0, #2
     92a:	181b      	adds	r3, r3, r0
     92c:	009a      	lsls	r2, r3, #2
     92e:	4911      	ldr	r1, [pc, #68]	; (974 <_usart_init+0xec>)
     930:	1889      	adds	r1, r1, r2
     932:	898a      	ldrh	r2, [r1, #12]
     934:	89a3      	ldrh	r3, [r4, #12]
     936:	04d2      	lsls	r2, r2, #19
     938:	0cd2      	lsrs	r2, r2, #19
     93a:	0b5b      	lsrs	r3, r3, #13
     93c:	035b      	lsls	r3, r3, #13
     93e:	4313      	orrs	r3, r2
     940:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     942:	7b8b      	ldrb	r3, [r1, #14]
     944:	2207      	movs	r2, #7
     946:	401a      	ands	r2, r3
     948:	89a3      	ldrh	r3, [r4, #12]
     94a:	0352      	lsls	r2, r2, #13
     94c:	04db      	lsls	r3, r3, #19
     94e:	0cdb      	lsrs	r3, r3, #19
     950:	4313      	orrs	r3, r2
     952:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     954:	4a07      	ldr	r2, [pc, #28]	; (974 <_usart_init+0xec>)
     956:	0083      	lsls	r3, r0, #2
     958:	181d      	adds	r5, r3, r0
     95a:	00a9      	lsls	r1, r5, #2
     95c:	000d      	movs	r5, r1
     95e:	1851      	adds	r1, r2, r1
     960:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     962:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     964:	1952      	adds	r2, r2, r5
     966:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     968:	2330      	movs	r3, #48	; 0x30
     96a:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     96c:	2000      	movs	r0, #0
     96e:	bd70      	pop	{r4, r5, r6, pc}
     970:	00000845 	.word	0x00000845
     974:	000016e0 	.word	0x000016e0

00000978 <_usart_sync_init>:
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	0005      	movs	r5, r0
     97c:	000c      	movs	r4, r1
	ASSERT(device);
     97e:	1e43      	subs	r3, r0, #1
     980:	4198      	sbcs	r0, r3
     982:	b2c0      	uxtb	r0, r0
     984:	22b4      	movs	r2, #180	; 0xb4
     986:	4904      	ldr	r1, [pc, #16]	; (998 <_usart_sync_init+0x20>)
     988:	4b04      	ldr	r3, [pc, #16]	; (99c <_usart_sync_init+0x24>)
     98a:	4798      	blx	r3
	device->hw = hw;
     98c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     98e:	0020      	movs	r0, r4
     990:	4b03      	ldr	r3, [pc, #12]	; (9a0 <_usart_sync_init+0x28>)
     992:	4798      	blx	r3
}
     994:	bd70      	pop	{r4, r5, r6, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00001730 	.word	0x00001730
     99c:	00000505 	.word	0x00000505
     9a0:	00000889 	.word	0x00000889

000009a4 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     9a4:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9a6:	6813      	ldr	r3, [r2, #0]
     9a8:	2102      	movs	r1, #2
     9aa:	430b      	orrs	r3, r1
     9ac:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9ae:	69d3      	ldr	r3, [r2, #28]
     9b0:	079b      	lsls	r3, r3, #30
     9b2:	d1fc      	bne.n	9ae <_usart_sync_enable+0xa>
}
     9b4:	4770      	bx	lr

000009b6 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     9b6:	6803      	ldr	r3, [r0, #0]
     9b8:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     9ba:	8519      	strh	r1, [r3, #40]	; 0x28
}
     9bc:	4770      	bx	lr

000009be <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     9be:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     9c0:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     9c2:	b2c0      	uxtb	r0, r0
}
     9c4:	4770      	bx	lr

000009c6 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     9c6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     9c8:	7e18      	ldrb	r0, [r3, #24]
     9ca:	2301      	movs	r3, #1
     9cc:	4018      	ands	r0, r3
}
     9ce:	4770      	bx	lr

000009d0 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     9d0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     9d2:	7e1b      	ldrb	r3, [r3, #24]
     9d4:	085b      	lsrs	r3, r3, #1
     9d6:	2001      	movs	r0, #1
     9d8:	4018      	ands	r0, r3
}
     9da:	4770      	bx	lr

000009dc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     9dc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     9de:	7e1b      	ldrb	r3, [r3, #24]
     9e0:	089b      	lsrs	r3, r3, #2
     9e2:	2001      	movs	r0, #1
     9e4:	4018      	ands	r0, r3
}
     9e6:	4770      	bx	lr

000009e8 <main>:

uint16_t      adc_value  = 0;
volatile bool adc_flag = false;
static uint16_t ADC_Channel = 3;
int main(void)
{
     9e8:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     9ea:	4b10      	ldr	r3, [pc, #64]	; (a2c <main+0x44>)
     9ec:	4798      	blx	r3
	//adc_async_enable_channel(struct _adc_async_device *const device, const uint8_t channel);
	_adc_async_convert(&ADC_0);
     9ee:	4810      	ldr	r0, [pc, #64]	; (a30 <main+0x48>)
     9f0:	4b10      	ldr	r3, [pc, #64]	; (a34 <main+0x4c>)
     9f2:	4798      	blx	r3
     9f4:	e002      	b.n	9fc <main+0x14>
		if (adc_flag){
			adc_value = _adc_async_read_channel_data(&ADC_0,ADC_Channel);
			adc_flag = false;
		} 
		else
		{printf("End of loop, conversion not finished.\r\n");}
     9f6:	4810      	ldr	r0, [pc, #64]	; (a38 <main+0x50>)
     9f8:	4b10      	ldr	r3, [pc, #64]	; (a3c <main+0x54>)
     9fa:	4798      	blx	r3
		printf("Start\r\n");
     9fc:	4810      	ldr	r0, [pc, #64]	; (a40 <main+0x58>)
     9fe:	4b0f      	ldr	r3, [pc, #60]	; (a3c <main+0x54>)
     a00:	4798      	blx	r3
		adc_flag = _adc_async_is_channel_conversion_done(&ADC_0,ADC_Channel);
     a02:	2103      	movs	r1, #3
     a04:	480a      	ldr	r0, [pc, #40]	; (a30 <main+0x48>)
     a06:	4b0f      	ldr	r3, [pc, #60]	; (a44 <main+0x5c>)
     a08:	4798      	blx	r3
     a0a:	1e43      	subs	r3, r0, #1
     a0c:	4198      	sbcs	r0, r3
     a0e:	b2c0      	uxtb	r0, r0
     a10:	4b0d      	ldr	r3, [pc, #52]	; (a48 <main+0x60>)
     a12:	7018      	strb	r0, [r3, #0]
		if (adc_flag){
     a14:	781b      	ldrb	r3, [r3, #0]
     a16:	2b00      	cmp	r3, #0
     a18:	d0ed      	beq.n	9f6 <main+0xe>
			adc_value = _adc_async_read_channel_data(&ADC_0,ADC_Channel);
     a1a:	2103      	movs	r1, #3
     a1c:	4804      	ldr	r0, [pc, #16]	; (a30 <main+0x48>)
     a1e:	4b0b      	ldr	r3, [pc, #44]	; (a4c <main+0x64>)
     a20:	4798      	blx	r3
     a22:	4b09      	ldr	r3, [pc, #36]	; (a48 <main+0x60>)
     a24:	8058      	strh	r0, [r3, #2]
			adc_flag = false;
     a26:	2200      	movs	r2, #0
     a28:	701a      	strb	r2, [r3, #0]
     a2a:	e7e7      	b.n	9fc <main+0x14>
     a2c:	0000011d 	.word	0x0000011d
     a30:	200000a0 	.word	0x200000a0
     a34:	00000737 	.word	0x00000737
     a38:	00001754 	.word	0x00001754
     a3c:	00000c4d 	.word	0x00000c4d
     a40:	0000174c 	.word	0x0000174c
     a44:	0000072d 	.word	0x0000072d
     a48:	20000084 	.word	0x20000084
     a4c:	0000074b 	.word	0x0000074b

00000a50 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
     a50:	b510      	push	{r4, lr}
     a52:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
     a54:	2800      	cmp	r0, #0
     a56:	d109      	bne.n	a6c <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
     a58:	0011      	movs	r1, r2
     a5a:	0018      	movs	r0, r3
     a5c:	4b05      	ldr	r3, [pc, #20]	; (a74 <_read+0x24>)
     a5e:	4798      	blx	r3
	if (n < 0) {
     a60:	2800      	cmp	r0, #0
     a62:	db00      	blt.n	a66 <_read+0x16>
		return -1;
	}

	return n;
}
     a64:	bd10      	pop	{r4, pc}
		return -1;
     a66:	2001      	movs	r0, #1
     a68:	4240      	negs	r0, r0
     a6a:	e7fb      	b.n	a64 <_read+0x14>
		return -1;
     a6c:	2001      	movs	r0, #1
     a6e:	4240      	negs	r0, r0
     a70:	e7f8      	b.n	a64 <_read+0x14>
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	00000acd 	.word	0x00000acd

00000a78 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
     a78:	b510      	push	{r4, lr}
     a7a:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
     a7c:	3801      	subs	r0, #1
     a7e:	2802      	cmp	r0, #2
     a80:	d809      	bhi.n	a96 <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
     a82:	0011      	movs	r1, r2
     a84:	0018      	movs	r0, r3
     a86:	4b05      	ldr	r3, [pc, #20]	; (a9c <_write+0x24>)
     a88:	4798      	blx	r3
	if (n < 0) {
     a8a:	2800      	cmp	r0, #0
     a8c:	db00      	blt.n	a90 <_write+0x18>
		return -1;
	}

	return n;
}
     a8e:	bd10      	pop	{r4, pc}
		return -1;
     a90:	2001      	movs	r0, #1
     a92:	4240      	negs	r0, r0
     a94:	e7fb      	b.n	a8e <_write+0x16>
		return -1;
     a96:	2001      	movs	r0, #1
     a98:	4240      	negs	r0, r0
     a9a:	e7f8      	b.n	a8e <_write+0x16>
     a9c:	00000af1 	.word	0x00000af1

00000aa0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
     aa0:	b570      	push	{r4, r5, r6, lr}
     aa2:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
     aa4:	4d06      	ldr	r5, [pc, #24]	; (ac0 <stdio_io_init+0x20>)
     aa6:	682b      	ldr	r3, [r5, #0]
     aa8:	6898      	ldr	r0, [r3, #8]
     aaa:	2100      	movs	r1, #0
     aac:	4c05      	ldr	r4, [pc, #20]	; (ac4 <stdio_io_init+0x24>)
     aae:	47a0      	blx	r4
	setbuf(stdin, NULL);
     ab0:	682b      	ldr	r3, [r5, #0]
     ab2:	6858      	ldr	r0, [r3, #4]
     ab4:	2100      	movs	r1, #0
     ab6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
     ab8:	4b03      	ldr	r3, [pc, #12]	; (ac8 <stdio_io_init+0x28>)
     aba:	601e      	str	r6, [r3, #0]
}
     abc:	bd70      	pop	{r4, r5, r6, pc}
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	20000000 	.word	0x20000000
     ac4:	00000c61 	.word	0x00000c61
     ac8:	20000088 	.word	0x20000088

00000acc <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
     acc:	b510      	push	{r4, lr}
     ace:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
     ad0:	4b05      	ldr	r3, [pc, #20]	; (ae8 <stdio_io_read+0x1c>)
     ad2:	6818      	ldr	r0, [r3, #0]
     ad4:	2800      	cmp	r0, #0
     ad6:	d004      	beq.n	ae2 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
     ad8:	b28a      	uxth	r2, r1
     ada:	0021      	movs	r1, r4
     adc:	4b03      	ldr	r3, [pc, #12]	; (aec <stdio_io_read+0x20>)
     ade:	4798      	blx	r3
}
     ae0:	bd10      	pop	{r4, pc}
		return 0;
     ae2:	2000      	movs	r0, #0
     ae4:	e7fc      	b.n	ae0 <stdio_io_read+0x14>
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	20000088 	.word	0x20000088
     aec:	00000375 	.word	0x00000375

00000af0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
     af0:	b510      	push	{r4, lr}
     af2:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
     af4:	4b05      	ldr	r3, [pc, #20]	; (b0c <stdio_io_write+0x1c>)
     af6:	6818      	ldr	r0, [r3, #0]
     af8:	2800      	cmp	r0, #0
     afa:	d004      	beq.n	b06 <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
     afc:	b28a      	uxth	r2, r1
     afe:	0021      	movs	r1, r4
     b00:	4b03      	ldr	r3, [pc, #12]	; (b10 <stdio_io_write+0x20>)
     b02:	4798      	blx	r3
}
     b04:	bd10      	pop	{r4, pc}
		return 0;
     b06:	2000      	movs	r0, #0
     b08:	e7fc      	b.n	b04 <stdio_io_write+0x14>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	20000088 	.word	0x20000088
     b10:	0000033d 	.word	0x0000033d

00000b14 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
     b14:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
     b16:	4c04      	ldr	r4, [pc, #16]	; (b28 <stdio_redirect_init+0x14>)
     b18:	0020      	movs	r0, r4
     b1a:	4b04      	ldr	r3, [pc, #16]	; (b2c <stdio_redirect_init+0x18>)
     b1c:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
     b1e:	0020      	movs	r0, r4
     b20:	4b03      	ldr	r3, [pc, #12]	; (b30 <stdio_redirect_init+0x1c>)
     b22:	4798      	blx	r3
}
     b24:	bd10      	pop	{r4, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	20000094 	.word	0x20000094
     b2c:	000004d9 	.word	0x000004d9
     b30:	00000aa1 	.word	0x00000aa1

00000b34 <__libc_init_array>:
     b34:	b570      	push	{r4, r5, r6, lr}
     b36:	2600      	movs	r6, #0
     b38:	4d0c      	ldr	r5, [pc, #48]	; (b6c <__libc_init_array+0x38>)
     b3a:	4c0d      	ldr	r4, [pc, #52]	; (b70 <__libc_init_array+0x3c>)
     b3c:	1b64      	subs	r4, r4, r5
     b3e:	10a4      	asrs	r4, r4, #2
     b40:	42a6      	cmp	r6, r4
     b42:	d109      	bne.n	b58 <__libc_init_array+0x24>
     b44:	2600      	movs	r6, #0
     b46:	f000 fe4b 	bl	17e0 <_init>
     b4a:	4d0a      	ldr	r5, [pc, #40]	; (b74 <__libc_init_array+0x40>)
     b4c:	4c0a      	ldr	r4, [pc, #40]	; (b78 <__libc_init_array+0x44>)
     b4e:	1b64      	subs	r4, r4, r5
     b50:	10a4      	asrs	r4, r4, #2
     b52:	42a6      	cmp	r6, r4
     b54:	d105      	bne.n	b62 <__libc_init_array+0x2e>
     b56:	bd70      	pop	{r4, r5, r6, pc}
     b58:	00b3      	lsls	r3, r6, #2
     b5a:	58eb      	ldr	r3, [r5, r3]
     b5c:	4798      	blx	r3
     b5e:	3601      	adds	r6, #1
     b60:	e7ee      	b.n	b40 <__libc_init_array+0xc>
     b62:	00b3      	lsls	r3, r6, #2
     b64:	58eb      	ldr	r3, [r5, r3]
     b66:	4798      	blx	r3
     b68:	3601      	adds	r6, #1
     b6a:	e7f2      	b.n	b52 <__libc_init_array+0x1e>
     b6c:	000017ec 	.word	0x000017ec
     b70:	000017ec 	.word	0x000017ec
     b74:	000017ec 	.word	0x000017ec
     b78:	000017f0 	.word	0x000017f0

00000b7c <memset>:
     b7c:	0003      	movs	r3, r0
     b7e:	1882      	adds	r2, r0, r2
     b80:	4293      	cmp	r3, r2
     b82:	d100      	bne.n	b86 <memset+0xa>
     b84:	4770      	bx	lr
     b86:	7019      	strb	r1, [r3, #0]
     b88:	3301      	adds	r3, #1
     b8a:	e7f9      	b.n	b80 <memset+0x4>

00000b8c <_puts_r>:
     b8c:	b570      	push	{r4, r5, r6, lr}
     b8e:	0005      	movs	r5, r0
     b90:	000e      	movs	r6, r1
     b92:	2800      	cmp	r0, #0
     b94:	d004      	beq.n	ba0 <_puts_r+0x14>
     b96:	6983      	ldr	r3, [r0, #24]
     b98:	2b00      	cmp	r3, #0
     b9a:	d101      	bne.n	ba0 <_puts_r+0x14>
     b9c:	f000 fada 	bl	1154 <__sinit>
     ba0:	69ab      	ldr	r3, [r5, #24]
     ba2:	68ac      	ldr	r4, [r5, #8]
     ba4:	2b00      	cmp	r3, #0
     ba6:	d102      	bne.n	bae <_puts_r+0x22>
     ba8:	0028      	movs	r0, r5
     baa:	f000 fad3 	bl	1154 <__sinit>
     bae:	4b24      	ldr	r3, [pc, #144]	; (c40 <_puts_r+0xb4>)
     bb0:	429c      	cmp	r4, r3
     bb2:	d10f      	bne.n	bd4 <_puts_r+0x48>
     bb4:	686c      	ldr	r4, [r5, #4]
     bb6:	89a3      	ldrh	r3, [r4, #12]
     bb8:	071b      	lsls	r3, r3, #28
     bba:	d502      	bpl.n	bc2 <_puts_r+0x36>
     bbc:	6923      	ldr	r3, [r4, #16]
     bbe:	2b00      	cmp	r3, #0
     bc0:	d120      	bne.n	c04 <_puts_r+0x78>
     bc2:	0021      	movs	r1, r4
     bc4:	0028      	movs	r0, r5
     bc6:	f000 f957 	bl	e78 <__swsetup_r>
     bca:	2800      	cmp	r0, #0
     bcc:	d01a      	beq.n	c04 <_puts_r+0x78>
     bce:	2001      	movs	r0, #1
     bd0:	4240      	negs	r0, r0
     bd2:	bd70      	pop	{r4, r5, r6, pc}
     bd4:	4b1b      	ldr	r3, [pc, #108]	; (c44 <_puts_r+0xb8>)
     bd6:	429c      	cmp	r4, r3
     bd8:	d101      	bne.n	bde <_puts_r+0x52>
     bda:	68ac      	ldr	r4, [r5, #8]
     bdc:	e7eb      	b.n	bb6 <_puts_r+0x2a>
     bde:	4b1a      	ldr	r3, [pc, #104]	; (c48 <_puts_r+0xbc>)
     be0:	429c      	cmp	r4, r3
     be2:	d1e8      	bne.n	bb6 <_puts_r+0x2a>
     be4:	68ec      	ldr	r4, [r5, #12]
     be6:	e7e6      	b.n	bb6 <_puts_r+0x2a>
     be8:	3b01      	subs	r3, #1
     bea:	3601      	adds	r6, #1
     bec:	60a3      	str	r3, [r4, #8]
     bee:	2b00      	cmp	r3, #0
     bf0:	da04      	bge.n	bfc <_puts_r+0x70>
     bf2:	69a2      	ldr	r2, [r4, #24]
     bf4:	4293      	cmp	r3, r2
     bf6:	db16      	blt.n	c26 <_puts_r+0x9a>
     bf8:	290a      	cmp	r1, #10
     bfa:	d014      	beq.n	c26 <_puts_r+0x9a>
     bfc:	6823      	ldr	r3, [r4, #0]
     bfe:	1c5a      	adds	r2, r3, #1
     c00:	6022      	str	r2, [r4, #0]
     c02:	7019      	strb	r1, [r3, #0]
     c04:	7831      	ldrb	r1, [r6, #0]
     c06:	68a3      	ldr	r3, [r4, #8]
     c08:	2900      	cmp	r1, #0
     c0a:	d1ed      	bne.n	be8 <_puts_r+0x5c>
     c0c:	3b01      	subs	r3, #1
     c0e:	60a3      	str	r3, [r4, #8]
     c10:	2b00      	cmp	r3, #0
     c12:	da0f      	bge.n	c34 <_puts_r+0xa8>
     c14:	0022      	movs	r2, r4
     c16:	310a      	adds	r1, #10
     c18:	0028      	movs	r0, r5
     c1a:	f000 f8d7 	bl	dcc <__swbuf_r>
     c1e:	1c43      	adds	r3, r0, #1
     c20:	d0d5      	beq.n	bce <_puts_r+0x42>
     c22:	200a      	movs	r0, #10
     c24:	e7d5      	b.n	bd2 <_puts_r+0x46>
     c26:	0022      	movs	r2, r4
     c28:	0028      	movs	r0, r5
     c2a:	f000 f8cf 	bl	dcc <__swbuf_r>
     c2e:	1c43      	adds	r3, r0, #1
     c30:	d1e8      	bne.n	c04 <_puts_r+0x78>
     c32:	e7cc      	b.n	bce <_puts_r+0x42>
     c34:	200a      	movs	r0, #10
     c36:	6823      	ldr	r3, [r4, #0]
     c38:	1c5a      	adds	r2, r3, #1
     c3a:	6022      	str	r2, [r4, #0]
     c3c:	7018      	strb	r0, [r3, #0]
     c3e:	e7c8      	b.n	bd2 <_puts_r+0x46>
     c40:	000017a0 	.word	0x000017a0
     c44:	000017c0 	.word	0x000017c0
     c48:	00001780 	.word	0x00001780

00000c4c <puts>:
     c4c:	b510      	push	{r4, lr}
     c4e:	4b03      	ldr	r3, [pc, #12]	; (c5c <puts+0x10>)
     c50:	0001      	movs	r1, r0
     c52:	6818      	ldr	r0, [r3, #0]
     c54:	f7ff ff9a 	bl	b8c <_puts_r>
     c58:	bd10      	pop	{r4, pc}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	20000000 	.word	0x20000000

00000c60 <setbuf>:
     c60:	424a      	negs	r2, r1
     c62:	414a      	adcs	r2, r1
     c64:	2380      	movs	r3, #128	; 0x80
     c66:	b510      	push	{r4, lr}
     c68:	0052      	lsls	r2, r2, #1
     c6a:	00db      	lsls	r3, r3, #3
     c6c:	f000 f802 	bl	c74 <setvbuf>
     c70:	bd10      	pop	{r4, pc}
	...

00000c74 <setvbuf>:
     c74:	b5f0      	push	{r4, r5, r6, r7, lr}
     c76:	001d      	movs	r5, r3
     c78:	4b4f      	ldr	r3, [pc, #316]	; (db8 <setvbuf+0x144>)
     c7a:	b085      	sub	sp, #20
     c7c:	681e      	ldr	r6, [r3, #0]
     c7e:	0004      	movs	r4, r0
     c80:	000f      	movs	r7, r1
     c82:	9200      	str	r2, [sp, #0]
     c84:	2e00      	cmp	r6, #0
     c86:	d005      	beq.n	c94 <setvbuf+0x20>
     c88:	69b3      	ldr	r3, [r6, #24]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d102      	bne.n	c94 <setvbuf+0x20>
     c8e:	0030      	movs	r0, r6
     c90:	f000 fa60 	bl	1154 <__sinit>
     c94:	4b49      	ldr	r3, [pc, #292]	; (dbc <setvbuf+0x148>)
     c96:	429c      	cmp	r4, r3
     c98:	d150      	bne.n	d3c <setvbuf+0xc8>
     c9a:	6874      	ldr	r4, [r6, #4]
     c9c:	9b00      	ldr	r3, [sp, #0]
     c9e:	2b02      	cmp	r3, #2
     ca0:	d005      	beq.n	cae <setvbuf+0x3a>
     ca2:	2b01      	cmp	r3, #1
     ca4:	d900      	bls.n	ca8 <setvbuf+0x34>
     ca6:	e084      	b.n	db2 <setvbuf+0x13e>
     ca8:	2d00      	cmp	r5, #0
     caa:	da00      	bge.n	cae <setvbuf+0x3a>
     cac:	e081      	b.n	db2 <setvbuf+0x13e>
     cae:	0021      	movs	r1, r4
     cb0:	0030      	movs	r0, r6
     cb2:	f000 f9e1 	bl	1078 <_fflush_r>
     cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
     cb8:	2900      	cmp	r1, #0
     cba:	d008      	beq.n	cce <setvbuf+0x5a>
     cbc:	0023      	movs	r3, r4
     cbe:	3344      	adds	r3, #68	; 0x44
     cc0:	4299      	cmp	r1, r3
     cc2:	d002      	beq.n	cca <setvbuf+0x56>
     cc4:	0030      	movs	r0, r6
     cc6:	f000 fb51 	bl	136c <_free_r>
     cca:	2300      	movs	r3, #0
     ccc:	6363      	str	r3, [r4, #52]	; 0x34
     cce:	2300      	movs	r3, #0
     cd0:	61a3      	str	r3, [r4, #24]
     cd2:	6063      	str	r3, [r4, #4]
     cd4:	89a3      	ldrh	r3, [r4, #12]
     cd6:	061b      	lsls	r3, r3, #24
     cd8:	d503      	bpl.n	ce2 <setvbuf+0x6e>
     cda:	6921      	ldr	r1, [r4, #16]
     cdc:	0030      	movs	r0, r6
     cde:	f000 fb45 	bl	136c <_free_r>
     ce2:	89a3      	ldrh	r3, [r4, #12]
     ce4:	4a36      	ldr	r2, [pc, #216]	; (dc0 <setvbuf+0x14c>)
     ce6:	4013      	ands	r3, r2
     ce8:	81a3      	strh	r3, [r4, #12]
     cea:	9b00      	ldr	r3, [sp, #0]
     cec:	2b02      	cmp	r3, #2
     cee:	d05a      	beq.n	da6 <setvbuf+0x132>
     cf0:	ab03      	add	r3, sp, #12
     cf2:	aa02      	add	r2, sp, #8
     cf4:	0021      	movs	r1, r4
     cf6:	0030      	movs	r0, r6
     cf8:	f000 fac2 	bl	1280 <__swhatbuf_r>
     cfc:	89a3      	ldrh	r3, [r4, #12]
     cfe:	4318      	orrs	r0, r3
     d00:	81a0      	strh	r0, [r4, #12]
     d02:	2d00      	cmp	r5, #0
     d04:	d124      	bne.n	d50 <setvbuf+0xdc>
     d06:	9d02      	ldr	r5, [sp, #8]
     d08:	0028      	movs	r0, r5
     d0a:	f000 fb25 	bl	1358 <malloc>
     d0e:	9501      	str	r5, [sp, #4]
     d10:	1e07      	subs	r7, r0, #0
     d12:	d142      	bne.n	d9a <setvbuf+0x126>
     d14:	9b02      	ldr	r3, [sp, #8]
     d16:	9301      	str	r3, [sp, #4]
     d18:	42ab      	cmp	r3, r5
     d1a:	d139      	bne.n	d90 <setvbuf+0x11c>
     d1c:	2001      	movs	r0, #1
     d1e:	4240      	negs	r0, r0
     d20:	2302      	movs	r3, #2
     d22:	89a2      	ldrh	r2, [r4, #12]
     d24:	4313      	orrs	r3, r2
     d26:	81a3      	strh	r3, [r4, #12]
     d28:	2300      	movs	r3, #0
     d2a:	60a3      	str	r3, [r4, #8]
     d2c:	0023      	movs	r3, r4
     d2e:	3347      	adds	r3, #71	; 0x47
     d30:	6023      	str	r3, [r4, #0]
     d32:	6123      	str	r3, [r4, #16]
     d34:	2301      	movs	r3, #1
     d36:	6163      	str	r3, [r4, #20]
     d38:	b005      	add	sp, #20
     d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3c:	4b21      	ldr	r3, [pc, #132]	; (dc4 <setvbuf+0x150>)
     d3e:	429c      	cmp	r4, r3
     d40:	d101      	bne.n	d46 <setvbuf+0xd2>
     d42:	68b4      	ldr	r4, [r6, #8]
     d44:	e7aa      	b.n	c9c <setvbuf+0x28>
     d46:	4b20      	ldr	r3, [pc, #128]	; (dc8 <setvbuf+0x154>)
     d48:	429c      	cmp	r4, r3
     d4a:	d1a7      	bne.n	c9c <setvbuf+0x28>
     d4c:	68f4      	ldr	r4, [r6, #12]
     d4e:	e7a5      	b.n	c9c <setvbuf+0x28>
     d50:	2f00      	cmp	r7, #0
     d52:	d0d9      	beq.n	d08 <setvbuf+0x94>
     d54:	69b3      	ldr	r3, [r6, #24]
     d56:	2b00      	cmp	r3, #0
     d58:	d102      	bne.n	d60 <setvbuf+0xec>
     d5a:	0030      	movs	r0, r6
     d5c:	f000 f9fa 	bl	1154 <__sinit>
     d60:	9b00      	ldr	r3, [sp, #0]
     d62:	2b01      	cmp	r3, #1
     d64:	d103      	bne.n	d6e <setvbuf+0xfa>
     d66:	89a3      	ldrh	r3, [r4, #12]
     d68:	9a00      	ldr	r2, [sp, #0]
     d6a:	431a      	orrs	r2, r3
     d6c:	81a2      	strh	r2, [r4, #12]
     d6e:	2008      	movs	r0, #8
     d70:	89a3      	ldrh	r3, [r4, #12]
     d72:	6027      	str	r7, [r4, #0]
     d74:	6127      	str	r7, [r4, #16]
     d76:	6165      	str	r5, [r4, #20]
     d78:	4018      	ands	r0, r3
     d7a:	d018      	beq.n	dae <setvbuf+0x13a>
     d7c:	2001      	movs	r0, #1
     d7e:	4018      	ands	r0, r3
     d80:	2300      	movs	r3, #0
     d82:	4298      	cmp	r0, r3
     d84:	d011      	beq.n	daa <setvbuf+0x136>
     d86:	426d      	negs	r5, r5
     d88:	60a3      	str	r3, [r4, #8]
     d8a:	61a5      	str	r5, [r4, #24]
     d8c:	0018      	movs	r0, r3
     d8e:	e7d3      	b.n	d38 <setvbuf+0xc4>
     d90:	9801      	ldr	r0, [sp, #4]
     d92:	f000 fae1 	bl	1358 <malloc>
     d96:	1e07      	subs	r7, r0, #0
     d98:	d0c0      	beq.n	d1c <setvbuf+0xa8>
     d9a:	2380      	movs	r3, #128	; 0x80
     d9c:	89a2      	ldrh	r2, [r4, #12]
     d9e:	9d01      	ldr	r5, [sp, #4]
     da0:	4313      	orrs	r3, r2
     da2:	81a3      	strh	r3, [r4, #12]
     da4:	e7d6      	b.n	d54 <setvbuf+0xe0>
     da6:	2000      	movs	r0, #0
     da8:	e7ba      	b.n	d20 <setvbuf+0xac>
     daa:	60a5      	str	r5, [r4, #8]
     dac:	e7c4      	b.n	d38 <setvbuf+0xc4>
     dae:	60a0      	str	r0, [r4, #8]
     db0:	e7c2      	b.n	d38 <setvbuf+0xc4>
     db2:	2001      	movs	r0, #1
     db4:	4240      	negs	r0, r0
     db6:	e7bf      	b.n	d38 <setvbuf+0xc4>
     db8:	20000000 	.word	0x20000000
     dbc:	000017a0 	.word	0x000017a0
     dc0:	fffff35c 	.word	0xfffff35c
     dc4:	000017c0 	.word	0x000017c0
     dc8:	00001780 	.word	0x00001780

00000dcc <__swbuf_r>:
     dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dce:	0005      	movs	r5, r0
     dd0:	000e      	movs	r6, r1
     dd2:	0014      	movs	r4, r2
     dd4:	2800      	cmp	r0, #0
     dd6:	d004      	beq.n	de2 <__swbuf_r+0x16>
     dd8:	6983      	ldr	r3, [r0, #24]
     dda:	2b00      	cmp	r3, #0
     ddc:	d101      	bne.n	de2 <__swbuf_r+0x16>
     dde:	f000 f9b9 	bl	1154 <__sinit>
     de2:	4b22      	ldr	r3, [pc, #136]	; (e6c <__swbuf_r+0xa0>)
     de4:	429c      	cmp	r4, r3
     de6:	d12d      	bne.n	e44 <__swbuf_r+0x78>
     de8:	686c      	ldr	r4, [r5, #4]
     dea:	69a3      	ldr	r3, [r4, #24]
     dec:	60a3      	str	r3, [r4, #8]
     dee:	89a3      	ldrh	r3, [r4, #12]
     df0:	071b      	lsls	r3, r3, #28
     df2:	d531      	bpl.n	e58 <__swbuf_r+0x8c>
     df4:	6923      	ldr	r3, [r4, #16]
     df6:	2b00      	cmp	r3, #0
     df8:	d02e      	beq.n	e58 <__swbuf_r+0x8c>
     dfa:	6823      	ldr	r3, [r4, #0]
     dfc:	6922      	ldr	r2, [r4, #16]
     dfe:	b2f7      	uxtb	r7, r6
     e00:	1a98      	subs	r0, r3, r2
     e02:	6963      	ldr	r3, [r4, #20]
     e04:	b2f6      	uxtb	r6, r6
     e06:	4298      	cmp	r0, r3
     e08:	db05      	blt.n	e16 <__swbuf_r+0x4a>
     e0a:	0021      	movs	r1, r4
     e0c:	0028      	movs	r0, r5
     e0e:	f000 f933 	bl	1078 <_fflush_r>
     e12:	2800      	cmp	r0, #0
     e14:	d126      	bne.n	e64 <__swbuf_r+0x98>
     e16:	68a3      	ldr	r3, [r4, #8]
     e18:	3001      	adds	r0, #1
     e1a:	3b01      	subs	r3, #1
     e1c:	60a3      	str	r3, [r4, #8]
     e1e:	6823      	ldr	r3, [r4, #0]
     e20:	1c5a      	adds	r2, r3, #1
     e22:	6022      	str	r2, [r4, #0]
     e24:	701f      	strb	r7, [r3, #0]
     e26:	6963      	ldr	r3, [r4, #20]
     e28:	4298      	cmp	r0, r3
     e2a:	d004      	beq.n	e36 <__swbuf_r+0x6a>
     e2c:	89a3      	ldrh	r3, [r4, #12]
     e2e:	07db      	lsls	r3, r3, #31
     e30:	d51a      	bpl.n	e68 <__swbuf_r+0x9c>
     e32:	2e0a      	cmp	r6, #10
     e34:	d118      	bne.n	e68 <__swbuf_r+0x9c>
     e36:	0021      	movs	r1, r4
     e38:	0028      	movs	r0, r5
     e3a:	f000 f91d 	bl	1078 <_fflush_r>
     e3e:	2800      	cmp	r0, #0
     e40:	d012      	beq.n	e68 <__swbuf_r+0x9c>
     e42:	e00f      	b.n	e64 <__swbuf_r+0x98>
     e44:	4b0a      	ldr	r3, [pc, #40]	; (e70 <__swbuf_r+0xa4>)
     e46:	429c      	cmp	r4, r3
     e48:	d101      	bne.n	e4e <__swbuf_r+0x82>
     e4a:	68ac      	ldr	r4, [r5, #8]
     e4c:	e7cd      	b.n	dea <__swbuf_r+0x1e>
     e4e:	4b09      	ldr	r3, [pc, #36]	; (e74 <__swbuf_r+0xa8>)
     e50:	429c      	cmp	r4, r3
     e52:	d1ca      	bne.n	dea <__swbuf_r+0x1e>
     e54:	68ec      	ldr	r4, [r5, #12]
     e56:	e7c8      	b.n	dea <__swbuf_r+0x1e>
     e58:	0021      	movs	r1, r4
     e5a:	0028      	movs	r0, r5
     e5c:	f000 f80c 	bl	e78 <__swsetup_r>
     e60:	2800      	cmp	r0, #0
     e62:	d0ca      	beq.n	dfa <__swbuf_r+0x2e>
     e64:	2601      	movs	r6, #1
     e66:	4276      	negs	r6, r6
     e68:	0030      	movs	r0, r6
     e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e6c:	000017a0 	.word	0x000017a0
     e70:	000017c0 	.word	0x000017c0
     e74:	00001780 	.word	0x00001780

00000e78 <__swsetup_r>:
     e78:	4b36      	ldr	r3, [pc, #216]	; (f54 <__swsetup_r+0xdc>)
     e7a:	b570      	push	{r4, r5, r6, lr}
     e7c:	681d      	ldr	r5, [r3, #0]
     e7e:	0006      	movs	r6, r0
     e80:	000c      	movs	r4, r1
     e82:	2d00      	cmp	r5, #0
     e84:	d005      	beq.n	e92 <__swsetup_r+0x1a>
     e86:	69ab      	ldr	r3, [r5, #24]
     e88:	2b00      	cmp	r3, #0
     e8a:	d102      	bne.n	e92 <__swsetup_r+0x1a>
     e8c:	0028      	movs	r0, r5
     e8e:	f000 f961 	bl	1154 <__sinit>
     e92:	4b31      	ldr	r3, [pc, #196]	; (f58 <__swsetup_r+0xe0>)
     e94:	429c      	cmp	r4, r3
     e96:	d10f      	bne.n	eb8 <__swsetup_r+0x40>
     e98:	686c      	ldr	r4, [r5, #4]
     e9a:	230c      	movs	r3, #12
     e9c:	5ee2      	ldrsh	r2, [r4, r3]
     e9e:	b293      	uxth	r3, r2
     ea0:	0719      	lsls	r1, r3, #28
     ea2:	d42d      	bmi.n	f00 <__swsetup_r+0x88>
     ea4:	06d9      	lsls	r1, r3, #27
     ea6:	d411      	bmi.n	ecc <__swsetup_r+0x54>
     ea8:	2309      	movs	r3, #9
     eaa:	2001      	movs	r0, #1
     eac:	6033      	str	r3, [r6, #0]
     eae:	3337      	adds	r3, #55	; 0x37
     eb0:	4313      	orrs	r3, r2
     eb2:	81a3      	strh	r3, [r4, #12]
     eb4:	4240      	negs	r0, r0
     eb6:	bd70      	pop	{r4, r5, r6, pc}
     eb8:	4b28      	ldr	r3, [pc, #160]	; (f5c <__swsetup_r+0xe4>)
     eba:	429c      	cmp	r4, r3
     ebc:	d101      	bne.n	ec2 <__swsetup_r+0x4a>
     ebe:	68ac      	ldr	r4, [r5, #8]
     ec0:	e7eb      	b.n	e9a <__swsetup_r+0x22>
     ec2:	4b27      	ldr	r3, [pc, #156]	; (f60 <__swsetup_r+0xe8>)
     ec4:	429c      	cmp	r4, r3
     ec6:	d1e8      	bne.n	e9a <__swsetup_r+0x22>
     ec8:	68ec      	ldr	r4, [r5, #12]
     eca:	e7e6      	b.n	e9a <__swsetup_r+0x22>
     ecc:	075b      	lsls	r3, r3, #29
     ece:	d513      	bpl.n	ef8 <__swsetup_r+0x80>
     ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
     ed2:	2900      	cmp	r1, #0
     ed4:	d008      	beq.n	ee8 <__swsetup_r+0x70>
     ed6:	0023      	movs	r3, r4
     ed8:	3344      	adds	r3, #68	; 0x44
     eda:	4299      	cmp	r1, r3
     edc:	d002      	beq.n	ee4 <__swsetup_r+0x6c>
     ede:	0030      	movs	r0, r6
     ee0:	f000 fa44 	bl	136c <_free_r>
     ee4:	2300      	movs	r3, #0
     ee6:	6363      	str	r3, [r4, #52]	; 0x34
     ee8:	2224      	movs	r2, #36	; 0x24
     eea:	89a3      	ldrh	r3, [r4, #12]
     eec:	4393      	bics	r3, r2
     eee:	81a3      	strh	r3, [r4, #12]
     ef0:	2300      	movs	r3, #0
     ef2:	6063      	str	r3, [r4, #4]
     ef4:	6923      	ldr	r3, [r4, #16]
     ef6:	6023      	str	r3, [r4, #0]
     ef8:	2308      	movs	r3, #8
     efa:	89a2      	ldrh	r2, [r4, #12]
     efc:	4313      	orrs	r3, r2
     efe:	81a3      	strh	r3, [r4, #12]
     f00:	6923      	ldr	r3, [r4, #16]
     f02:	2b00      	cmp	r3, #0
     f04:	d10b      	bne.n	f1e <__swsetup_r+0xa6>
     f06:	21a0      	movs	r1, #160	; 0xa0
     f08:	2280      	movs	r2, #128	; 0x80
     f0a:	89a3      	ldrh	r3, [r4, #12]
     f0c:	0089      	lsls	r1, r1, #2
     f0e:	0092      	lsls	r2, r2, #2
     f10:	400b      	ands	r3, r1
     f12:	4293      	cmp	r3, r2
     f14:	d003      	beq.n	f1e <__swsetup_r+0xa6>
     f16:	0021      	movs	r1, r4
     f18:	0030      	movs	r0, r6
     f1a:	f000 f9d9 	bl	12d0 <__smakebuf_r>
     f1e:	2301      	movs	r3, #1
     f20:	89a2      	ldrh	r2, [r4, #12]
     f22:	4013      	ands	r3, r2
     f24:	d011      	beq.n	f4a <__swsetup_r+0xd2>
     f26:	2300      	movs	r3, #0
     f28:	60a3      	str	r3, [r4, #8]
     f2a:	6963      	ldr	r3, [r4, #20]
     f2c:	425b      	negs	r3, r3
     f2e:	61a3      	str	r3, [r4, #24]
     f30:	2000      	movs	r0, #0
     f32:	6923      	ldr	r3, [r4, #16]
     f34:	4283      	cmp	r3, r0
     f36:	d1be      	bne.n	eb6 <__swsetup_r+0x3e>
     f38:	230c      	movs	r3, #12
     f3a:	5ee2      	ldrsh	r2, [r4, r3]
     f3c:	0613      	lsls	r3, r2, #24
     f3e:	d5ba      	bpl.n	eb6 <__swsetup_r+0x3e>
     f40:	2340      	movs	r3, #64	; 0x40
     f42:	4313      	orrs	r3, r2
     f44:	81a3      	strh	r3, [r4, #12]
     f46:	3801      	subs	r0, #1
     f48:	e7b5      	b.n	eb6 <__swsetup_r+0x3e>
     f4a:	0792      	lsls	r2, r2, #30
     f4c:	d400      	bmi.n	f50 <__swsetup_r+0xd8>
     f4e:	6963      	ldr	r3, [r4, #20]
     f50:	60a3      	str	r3, [r4, #8]
     f52:	e7ed      	b.n	f30 <__swsetup_r+0xb8>
     f54:	20000000 	.word	0x20000000
     f58:	000017a0 	.word	0x000017a0
     f5c:	000017c0 	.word	0x000017c0
     f60:	00001780 	.word	0x00001780

00000f64 <__sflush_r>:
     f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     f66:	898a      	ldrh	r2, [r1, #12]
     f68:	0005      	movs	r5, r0
     f6a:	000c      	movs	r4, r1
     f6c:	0713      	lsls	r3, r2, #28
     f6e:	d460      	bmi.n	1032 <__sflush_r+0xce>
     f70:	684b      	ldr	r3, [r1, #4]
     f72:	2b00      	cmp	r3, #0
     f74:	dc04      	bgt.n	f80 <__sflush_r+0x1c>
     f76:	6c0b      	ldr	r3, [r1, #64]	; 0x40
     f78:	2b00      	cmp	r3, #0
     f7a:	dc01      	bgt.n	f80 <__sflush_r+0x1c>
     f7c:	2000      	movs	r0, #0
     f7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     f80:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
     f82:	2f00      	cmp	r7, #0
     f84:	d0fa      	beq.n	f7c <__sflush_r+0x18>
     f86:	2300      	movs	r3, #0
     f88:	682e      	ldr	r6, [r5, #0]
     f8a:	602b      	str	r3, [r5, #0]
     f8c:	2380      	movs	r3, #128	; 0x80
     f8e:	015b      	lsls	r3, r3, #5
     f90:	401a      	ands	r2, r3
     f92:	d034      	beq.n	ffe <__sflush_r+0x9a>
     f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
     f96:	89a3      	ldrh	r3, [r4, #12]
     f98:	075b      	lsls	r3, r3, #29
     f9a:	d506      	bpl.n	faa <__sflush_r+0x46>
     f9c:	6863      	ldr	r3, [r4, #4]
     f9e:	1ac0      	subs	r0, r0, r3
     fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
     fa2:	2b00      	cmp	r3, #0
     fa4:	d001      	beq.n	faa <__sflush_r+0x46>
     fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
     fa8:	1ac0      	subs	r0, r0, r3
     faa:	0002      	movs	r2, r0
     fac:	6a21      	ldr	r1, [r4, #32]
     fae:	2300      	movs	r3, #0
     fb0:	0028      	movs	r0, r5
     fb2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
     fb4:	47b8      	blx	r7
     fb6:	89a1      	ldrh	r1, [r4, #12]
     fb8:	1c43      	adds	r3, r0, #1
     fba:	d106      	bne.n	fca <__sflush_r+0x66>
     fbc:	682b      	ldr	r3, [r5, #0]
     fbe:	2b1d      	cmp	r3, #29
     fc0:	d831      	bhi.n	1026 <__sflush_r+0xc2>
     fc2:	4a2c      	ldr	r2, [pc, #176]	; (1074 <__sflush_r+0x110>)
     fc4:	40da      	lsrs	r2, r3
     fc6:	07d3      	lsls	r3, r2, #31
     fc8:	d52d      	bpl.n	1026 <__sflush_r+0xc2>
     fca:	2300      	movs	r3, #0
     fcc:	6063      	str	r3, [r4, #4]
     fce:	6923      	ldr	r3, [r4, #16]
     fd0:	6023      	str	r3, [r4, #0]
     fd2:	04cb      	lsls	r3, r1, #19
     fd4:	d505      	bpl.n	fe2 <__sflush_r+0x7e>
     fd6:	1c43      	adds	r3, r0, #1
     fd8:	d102      	bne.n	fe0 <__sflush_r+0x7c>
     fda:	682b      	ldr	r3, [r5, #0]
     fdc:	2b00      	cmp	r3, #0
     fde:	d100      	bne.n	fe2 <__sflush_r+0x7e>
     fe0:	6560      	str	r0, [r4, #84]	; 0x54
     fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
     fe4:	602e      	str	r6, [r5, #0]
     fe6:	2900      	cmp	r1, #0
     fe8:	d0c8      	beq.n	f7c <__sflush_r+0x18>
     fea:	0023      	movs	r3, r4
     fec:	3344      	adds	r3, #68	; 0x44
     fee:	4299      	cmp	r1, r3
     ff0:	d002      	beq.n	ff8 <__sflush_r+0x94>
     ff2:	0028      	movs	r0, r5
     ff4:	f000 f9ba 	bl	136c <_free_r>
     ff8:	2000      	movs	r0, #0
     ffa:	6360      	str	r0, [r4, #52]	; 0x34
     ffc:	e7bf      	b.n	f7e <__sflush_r+0x1a>
     ffe:	2301      	movs	r3, #1
    1000:	6a21      	ldr	r1, [r4, #32]
    1002:	0028      	movs	r0, r5
    1004:	47b8      	blx	r7
    1006:	1c43      	adds	r3, r0, #1
    1008:	d1c5      	bne.n	f96 <__sflush_r+0x32>
    100a:	682b      	ldr	r3, [r5, #0]
    100c:	2b00      	cmp	r3, #0
    100e:	d0c2      	beq.n	f96 <__sflush_r+0x32>
    1010:	2b1d      	cmp	r3, #29
    1012:	d001      	beq.n	1018 <__sflush_r+0xb4>
    1014:	2b16      	cmp	r3, #22
    1016:	d101      	bne.n	101c <__sflush_r+0xb8>
    1018:	602e      	str	r6, [r5, #0]
    101a:	e7af      	b.n	f7c <__sflush_r+0x18>
    101c:	2340      	movs	r3, #64	; 0x40
    101e:	89a2      	ldrh	r2, [r4, #12]
    1020:	4313      	orrs	r3, r2
    1022:	81a3      	strh	r3, [r4, #12]
    1024:	e7ab      	b.n	f7e <__sflush_r+0x1a>
    1026:	2340      	movs	r3, #64	; 0x40
    1028:	430b      	orrs	r3, r1
    102a:	2001      	movs	r0, #1
    102c:	81a3      	strh	r3, [r4, #12]
    102e:	4240      	negs	r0, r0
    1030:	e7a5      	b.n	f7e <__sflush_r+0x1a>
    1032:	690f      	ldr	r7, [r1, #16]
    1034:	2f00      	cmp	r7, #0
    1036:	d0a1      	beq.n	f7c <__sflush_r+0x18>
    1038:	680b      	ldr	r3, [r1, #0]
    103a:	600f      	str	r7, [r1, #0]
    103c:	1bdb      	subs	r3, r3, r7
    103e:	9301      	str	r3, [sp, #4]
    1040:	2300      	movs	r3, #0
    1042:	0792      	lsls	r2, r2, #30
    1044:	d100      	bne.n	1048 <__sflush_r+0xe4>
    1046:	694b      	ldr	r3, [r1, #20]
    1048:	60a3      	str	r3, [r4, #8]
    104a:	9b01      	ldr	r3, [sp, #4]
    104c:	2b00      	cmp	r3, #0
    104e:	dc00      	bgt.n	1052 <__sflush_r+0xee>
    1050:	e794      	b.n	f7c <__sflush_r+0x18>
    1052:	9b01      	ldr	r3, [sp, #4]
    1054:	003a      	movs	r2, r7
    1056:	6a21      	ldr	r1, [r4, #32]
    1058:	0028      	movs	r0, r5
    105a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    105c:	47b0      	blx	r6
    105e:	2800      	cmp	r0, #0
    1060:	dc03      	bgt.n	106a <__sflush_r+0x106>
    1062:	2340      	movs	r3, #64	; 0x40
    1064:	89a2      	ldrh	r2, [r4, #12]
    1066:	4313      	orrs	r3, r2
    1068:	e7df      	b.n	102a <__sflush_r+0xc6>
    106a:	9b01      	ldr	r3, [sp, #4]
    106c:	183f      	adds	r7, r7, r0
    106e:	1a1b      	subs	r3, r3, r0
    1070:	9301      	str	r3, [sp, #4]
    1072:	e7ea      	b.n	104a <__sflush_r+0xe6>
    1074:	20400001 	.word	0x20400001

00001078 <_fflush_r>:
    1078:	690b      	ldr	r3, [r1, #16]
    107a:	b570      	push	{r4, r5, r6, lr}
    107c:	0005      	movs	r5, r0
    107e:	000c      	movs	r4, r1
    1080:	2b00      	cmp	r3, #0
    1082:	d101      	bne.n	1088 <_fflush_r+0x10>
    1084:	2000      	movs	r0, #0
    1086:	bd70      	pop	{r4, r5, r6, pc}
    1088:	2800      	cmp	r0, #0
    108a:	d004      	beq.n	1096 <_fflush_r+0x1e>
    108c:	6983      	ldr	r3, [r0, #24]
    108e:	2b00      	cmp	r3, #0
    1090:	d101      	bne.n	1096 <_fflush_r+0x1e>
    1092:	f000 f85f 	bl	1154 <__sinit>
    1096:	4b0b      	ldr	r3, [pc, #44]	; (10c4 <_fflush_r+0x4c>)
    1098:	429c      	cmp	r4, r3
    109a:	d109      	bne.n	10b0 <_fflush_r+0x38>
    109c:	686c      	ldr	r4, [r5, #4]
    109e:	220c      	movs	r2, #12
    10a0:	5ea3      	ldrsh	r3, [r4, r2]
    10a2:	2b00      	cmp	r3, #0
    10a4:	d0ee      	beq.n	1084 <_fflush_r+0xc>
    10a6:	0021      	movs	r1, r4
    10a8:	0028      	movs	r0, r5
    10aa:	f7ff ff5b 	bl	f64 <__sflush_r>
    10ae:	e7ea      	b.n	1086 <_fflush_r+0xe>
    10b0:	4b05      	ldr	r3, [pc, #20]	; (10c8 <_fflush_r+0x50>)
    10b2:	429c      	cmp	r4, r3
    10b4:	d101      	bne.n	10ba <_fflush_r+0x42>
    10b6:	68ac      	ldr	r4, [r5, #8]
    10b8:	e7f1      	b.n	109e <_fflush_r+0x26>
    10ba:	4b04      	ldr	r3, [pc, #16]	; (10cc <_fflush_r+0x54>)
    10bc:	429c      	cmp	r4, r3
    10be:	d1ee      	bne.n	109e <_fflush_r+0x26>
    10c0:	68ec      	ldr	r4, [r5, #12]
    10c2:	e7ec      	b.n	109e <_fflush_r+0x26>
    10c4:	000017a0 	.word	0x000017a0
    10c8:	000017c0 	.word	0x000017c0
    10cc:	00001780 	.word	0x00001780

000010d0 <_cleanup_r>:
    10d0:	b510      	push	{r4, lr}
    10d2:	4902      	ldr	r1, [pc, #8]	; (10dc <_cleanup_r+0xc>)
    10d4:	f000 f8b2 	bl	123c <_fwalk_reent>
    10d8:	bd10      	pop	{r4, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00001079 	.word	0x00001079

000010e0 <std.isra.0>:
    10e0:	2300      	movs	r3, #0
    10e2:	b510      	push	{r4, lr}
    10e4:	0004      	movs	r4, r0
    10e6:	6003      	str	r3, [r0, #0]
    10e8:	6043      	str	r3, [r0, #4]
    10ea:	6083      	str	r3, [r0, #8]
    10ec:	8181      	strh	r1, [r0, #12]
    10ee:	6643      	str	r3, [r0, #100]	; 0x64
    10f0:	81c2      	strh	r2, [r0, #14]
    10f2:	6103      	str	r3, [r0, #16]
    10f4:	6143      	str	r3, [r0, #20]
    10f6:	6183      	str	r3, [r0, #24]
    10f8:	0019      	movs	r1, r3
    10fa:	2208      	movs	r2, #8
    10fc:	305c      	adds	r0, #92	; 0x5c
    10fe:	f7ff fd3d 	bl	b7c <memset>
    1102:	4b05      	ldr	r3, [pc, #20]	; (1118 <std.isra.0+0x38>)
    1104:	6224      	str	r4, [r4, #32]
    1106:	6263      	str	r3, [r4, #36]	; 0x24
    1108:	4b04      	ldr	r3, [pc, #16]	; (111c <std.isra.0+0x3c>)
    110a:	62a3      	str	r3, [r4, #40]	; 0x28
    110c:	4b04      	ldr	r3, [pc, #16]	; (1120 <std.isra.0+0x40>)
    110e:	62e3      	str	r3, [r4, #44]	; 0x2c
    1110:	4b04      	ldr	r3, [pc, #16]	; (1124 <std.isra.0+0x44>)
    1112:	6323      	str	r3, [r4, #48]	; 0x30
    1114:	bd10      	pop	{r4, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	000014e1 	.word	0x000014e1
    111c:	00001509 	.word	0x00001509
    1120:	00001541 	.word	0x00001541
    1124:	0000156d 	.word	0x0000156d

00001128 <__sfmoreglue>:
    1128:	b570      	push	{r4, r5, r6, lr}
    112a:	2568      	movs	r5, #104	; 0x68
    112c:	1e4a      	subs	r2, r1, #1
    112e:	4355      	muls	r5, r2
    1130:	000e      	movs	r6, r1
    1132:	0029      	movs	r1, r5
    1134:	3174      	adds	r1, #116	; 0x74
    1136:	f000 f963 	bl	1400 <_malloc_r>
    113a:	1e04      	subs	r4, r0, #0
    113c:	d008      	beq.n	1150 <__sfmoreglue+0x28>
    113e:	2100      	movs	r1, #0
    1140:	002a      	movs	r2, r5
    1142:	6001      	str	r1, [r0, #0]
    1144:	6046      	str	r6, [r0, #4]
    1146:	300c      	adds	r0, #12
    1148:	60a0      	str	r0, [r4, #8]
    114a:	3268      	adds	r2, #104	; 0x68
    114c:	f7ff fd16 	bl	b7c <memset>
    1150:	0020      	movs	r0, r4
    1152:	bd70      	pop	{r4, r5, r6, pc}

00001154 <__sinit>:
    1154:	6983      	ldr	r3, [r0, #24]
    1156:	b513      	push	{r0, r1, r4, lr}
    1158:	0004      	movs	r4, r0
    115a:	2b00      	cmp	r3, #0
    115c:	d128      	bne.n	11b0 <__sinit+0x5c>
    115e:	6483      	str	r3, [r0, #72]	; 0x48
    1160:	64c3      	str	r3, [r0, #76]	; 0x4c
    1162:	6503      	str	r3, [r0, #80]	; 0x50
    1164:	4b13      	ldr	r3, [pc, #76]	; (11b4 <__sinit+0x60>)
    1166:	4a14      	ldr	r2, [pc, #80]	; (11b8 <__sinit+0x64>)
    1168:	681b      	ldr	r3, [r3, #0]
    116a:	6282      	str	r2, [r0, #40]	; 0x28
    116c:	9301      	str	r3, [sp, #4]
    116e:	4298      	cmp	r0, r3
    1170:	d101      	bne.n	1176 <__sinit+0x22>
    1172:	2301      	movs	r3, #1
    1174:	6183      	str	r3, [r0, #24]
    1176:	0020      	movs	r0, r4
    1178:	f000 f820 	bl	11bc <__sfp>
    117c:	6060      	str	r0, [r4, #4]
    117e:	0020      	movs	r0, r4
    1180:	f000 f81c 	bl	11bc <__sfp>
    1184:	60a0      	str	r0, [r4, #8]
    1186:	0020      	movs	r0, r4
    1188:	f000 f818 	bl	11bc <__sfp>
    118c:	2200      	movs	r2, #0
    118e:	60e0      	str	r0, [r4, #12]
    1190:	2104      	movs	r1, #4
    1192:	6860      	ldr	r0, [r4, #4]
    1194:	f7ff ffa4 	bl	10e0 <std.isra.0>
    1198:	2201      	movs	r2, #1
    119a:	2109      	movs	r1, #9
    119c:	68a0      	ldr	r0, [r4, #8]
    119e:	f7ff ff9f 	bl	10e0 <std.isra.0>
    11a2:	2202      	movs	r2, #2
    11a4:	2112      	movs	r1, #18
    11a6:	68e0      	ldr	r0, [r4, #12]
    11a8:	f7ff ff9a 	bl	10e0 <std.isra.0>
    11ac:	2301      	movs	r3, #1
    11ae:	61a3      	str	r3, [r4, #24]
    11b0:	bd13      	pop	{r0, r1, r4, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	0000177c 	.word	0x0000177c
    11b8:	000010d1 	.word	0x000010d1

000011bc <__sfp>:
    11bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11be:	4b1e      	ldr	r3, [pc, #120]	; (1238 <__sfp+0x7c>)
    11c0:	0007      	movs	r7, r0
    11c2:	681e      	ldr	r6, [r3, #0]
    11c4:	69b3      	ldr	r3, [r6, #24]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d102      	bne.n	11d0 <__sfp+0x14>
    11ca:	0030      	movs	r0, r6
    11cc:	f7ff ffc2 	bl	1154 <__sinit>
    11d0:	3648      	adds	r6, #72	; 0x48
    11d2:	68b4      	ldr	r4, [r6, #8]
    11d4:	6873      	ldr	r3, [r6, #4]
    11d6:	3b01      	subs	r3, #1
    11d8:	d504      	bpl.n	11e4 <__sfp+0x28>
    11da:	6833      	ldr	r3, [r6, #0]
    11dc:	2b00      	cmp	r3, #0
    11de:	d007      	beq.n	11f0 <__sfp+0x34>
    11e0:	6836      	ldr	r6, [r6, #0]
    11e2:	e7f6      	b.n	11d2 <__sfp+0x16>
    11e4:	220c      	movs	r2, #12
    11e6:	5ea5      	ldrsh	r5, [r4, r2]
    11e8:	2d00      	cmp	r5, #0
    11ea:	d00d      	beq.n	1208 <__sfp+0x4c>
    11ec:	3468      	adds	r4, #104	; 0x68
    11ee:	e7f2      	b.n	11d6 <__sfp+0x1a>
    11f0:	2104      	movs	r1, #4
    11f2:	0038      	movs	r0, r7
    11f4:	f7ff ff98 	bl	1128 <__sfmoreglue>
    11f8:	6030      	str	r0, [r6, #0]
    11fa:	2800      	cmp	r0, #0
    11fc:	d1f0      	bne.n	11e0 <__sfp+0x24>
    11fe:	230c      	movs	r3, #12
    1200:	0004      	movs	r4, r0
    1202:	603b      	str	r3, [r7, #0]
    1204:	0020      	movs	r0, r4
    1206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1208:	2301      	movs	r3, #1
    120a:	0020      	movs	r0, r4
    120c:	425b      	negs	r3, r3
    120e:	81e3      	strh	r3, [r4, #14]
    1210:	3302      	adds	r3, #2
    1212:	81a3      	strh	r3, [r4, #12]
    1214:	6665      	str	r5, [r4, #100]	; 0x64
    1216:	6025      	str	r5, [r4, #0]
    1218:	60a5      	str	r5, [r4, #8]
    121a:	6065      	str	r5, [r4, #4]
    121c:	6125      	str	r5, [r4, #16]
    121e:	6165      	str	r5, [r4, #20]
    1220:	61a5      	str	r5, [r4, #24]
    1222:	2208      	movs	r2, #8
    1224:	0029      	movs	r1, r5
    1226:	305c      	adds	r0, #92	; 0x5c
    1228:	f7ff fca8 	bl	b7c <memset>
    122c:	6365      	str	r5, [r4, #52]	; 0x34
    122e:	63a5      	str	r5, [r4, #56]	; 0x38
    1230:	64a5      	str	r5, [r4, #72]	; 0x48
    1232:	64e5      	str	r5, [r4, #76]	; 0x4c
    1234:	e7e6      	b.n	1204 <__sfp+0x48>
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	0000177c 	.word	0x0000177c

0000123c <_fwalk_reent>:
    123c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    123e:	0004      	movs	r4, r0
    1240:	0007      	movs	r7, r0
    1242:	2600      	movs	r6, #0
    1244:	9101      	str	r1, [sp, #4]
    1246:	3448      	adds	r4, #72	; 0x48
    1248:	2c00      	cmp	r4, #0
    124a:	d101      	bne.n	1250 <_fwalk_reent+0x14>
    124c:	0030      	movs	r0, r6
    124e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1250:	6863      	ldr	r3, [r4, #4]
    1252:	68a5      	ldr	r5, [r4, #8]
    1254:	9300      	str	r3, [sp, #0]
    1256:	9b00      	ldr	r3, [sp, #0]
    1258:	3b01      	subs	r3, #1
    125a:	9300      	str	r3, [sp, #0]
    125c:	d501      	bpl.n	1262 <_fwalk_reent+0x26>
    125e:	6824      	ldr	r4, [r4, #0]
    1260:	e7f2      	b.n	1248 <_fwalk_reent+0xc>
    1262:	89ab      	ldrh	r3, [r5, #12]
    1264:	2b01      	cmp	r3, #1
    1266:	d908      	bls.n	127a <_fwalk_reent+0x3e>
    1268:	220e      	movs	r2, #14
    126a:	5eab      	ldrsh	r3, [r5, r2]
    126c:	3301      	adds	r3, #1
    126e:	d004      	beq.n	127a <_fwalk_reent+0x3e>
    1270:	0029      	movs	r1, r5
    1272:	0038      	movs	r0, r7
    1274:	9b01      	ldr	r3, [sp, #4]
    1276:	4798      	blx	r3
    1278:	4306      	orrs	r6, r0
    127a:	3568      	adds	r5, #104	; 0x68
    127c:	e7eb      	b.n	1256 <_fwalk_reent+0x1a>
	...

00001280 <__swhatbuf_r>:
    1280:	b570      	push	{r4, r5, r6, lr}
    1282:	000e      	movs	r6, r1
    1284:	001d      	movs	r5, r3
    1286:	230e      	movs	r3, #14
    1288:	5ec9      	ldrsh	r1, [r1, r3]
    128a:	b090      	sub	sp, #64	; 0x40
    128c:	0014      	movs	r4, r2
    128e:	2900      	cmp	r1, #0
    1290:	da07      	bge.n	12a2 <__swhatbuf_r+0x22>
    1292:	2300      	movs	r3, #0
    1294:	602b      	str	r3, [r5, #0]
    1296:	89b3      	ldrh	r3, [r6, #12]
    1298:	061b      	lsls	r3, r3, #24
    129a:	d411      	bmi.n	12c0 <__swhatbuf_r+0x40>
    129c:	2380      	movs	r3, #128	; 0x80
    129e:	00db      	lsls	r3, r3, #3
    12a0:	e00f      	b.n	12c2 <__swhatbuf_r+0x42>
    12a2:	aa01      	add	r2, sp, #4
    12a4:	f000 f98e 	bl	15c4 <_fstat_r>
    12a8:	2800      	cmp	r0, #0
    12aa:	dbf2      	blt.n	1292 <__swhatbuf_r+0x12>
    12ac:	22f0      	movs	r2, #240	; 0xf0
    12ae:	9b02      	ldr	r3, [sp, #8]
    12b0:	0212      	lsls	r2, r2, #8
    12b2:	4013      	ands	r3, r2
    12b4:	4a05      	ldr	r2, [pc, #20]	; (12cc <__swhatbuf_r+0x4c>)
    12b6:	189b      	adds	r3, r3, r2
    12b8:	425a      	negs	r2, r3
    12ba:	4153      	adcs	r3, r2
    12bc:	602b      	str	r3, [r5, #0]
    12be:	e7ed      	b.n	129c <__swhatbuf_r+0x1c>
    12c0:	2340      	movs	r3, #64	; 0x40
    12c2:	2000      	movs	r0, #0
    12c4:	6023      	str	r3, [r4, #0]
    12c6:	b010      	add	sp, #64	; 0x40
    12c8:	bd70      	pop	{r4, r5, r6, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	ffffe000 	.word	0xffffe000

000012d0 <__smakebuf_r>:
    12d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    12d2:	2602      	movs	r6, #2
    12d4:	898b      	ldrh	r3, [r1, #12]
    12d6:	0005      	movs	r5, r0
    12d8:	000c      	movs	r4, r1
    12da:	4233      	tst	r3, r6
    12dc:	d006      	beq.n	12ec <__smakebuf_r+0x1c>
    12de:	0023      	movs	r3, r4
    12e0:	3347      	adds	r3, #71	; 0x47
    12e2:	6023      	str	r3, [r4, #0]
    12e4:	6123      	str	r3, [r4, #16]
    12e6:	2301      	movs	r3, #1
    12e8:	6163      	str	r3, [r4, #20]
    12ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    12ec:	ab01      	add	r3, sp, #4
    12ee:	466a      	mov	r2, sp
    12f0:	f7ff ffc6 	bl	1280 <__swhatbuf_r>
    12f4:	9900      	ldr	r1, [sp, #0]
    12f6:	0007      	movs	r7, r0
    12f8:	0028      	movs	r0, r5
    12fa:	f000 f881 	bl	1400 <_malloc_r>
    12fe:	2800      	cmp	r0, #0
    1300:	d108      	bne.n	1314 <__smakebuf_r+0x44>
    1302:	220c      	movs	r2, #12
    1304:	5ea3      	ldrsh	r3, [r4, r2]
    1306:	059a      	lsls	r2, r3, #22
    1308:	d4ef      	bmi.n	12ea <__smakebuf_r+0x1a>
    130a:	2203      	movs	r2, #3
    130c:	4393      	bics	r3, r2
    130e:	431e      	orrs	r6, r3
    1310:	81a6      	strh	r6, [r4, #12]
    1312:	e7e4      	b.n	12de <__smakebuf_r+0xe>
    1314:	4b0f      	ldr	r3, [pc, #60]	; (1354 <__smakebuf_r+0x84>)
    1316:	62ab      	str	r3, [r5, #40]	; 0x28
    1318:	2380      	movs	r3, #128	; 0x80
    131a:	89a2      	ldrh	r2, [r4, #12]
    131c:	6020      	str	r0, [r4, #0]
    131e:	4313      	orrs	r3, r2
    1320:	81a3      	strh	r3, [r4, #12]
    1322:	9b00      	ldr	r3, [sp, #0]
    1324:	6120      	str	r0, [r4, #16]
    1326:	6163      	str	r3, [r4, #20]
    1328:	9b01      	ldr	r3, [sp, #4]
    132a:	2b00      	cmp	r3, #0
    132c:	d00d      	beq.n	134a <__smakebuf_r+0x7a>
    132e:	230e      	movs	r3, #14
    1330:	5ee1      	ldrsh	r1, [r4, r3]
    1332:	0028      	movs	r0, r5
    1334:	f000 f958 	bl	15e8 <_isatty_r>
    1338:	2800      	cmp	r0, #0
    133a:	d006      	beq.n	134a <__smakebuf_r+0x7a>
    133c:	2203      	movs	r2, #3
    133e:	89a3      	ldrh	r3, [r4, #12]
    1340:	4393      	bics	r3, r2
    1342:	001a      	movs	r2, r3
    1344:	2301      	movs	r3, #1
    1346:	4313      	orrs	r3, r2
    1348:	81a3      	strh	r3, [r4, #12]
    134a:	89a0      	ldrh	r0, [r4, #12]
    134c:	4338      	orrs	r0, r7
    134e:	81a0      	strh	r0, [r4, #12]
    1350:	e7cb      	b.n	12ea <__smakebuf_r+0x1a>
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	000010d1 	.word	0x000010d1

00001358 <malloc>:
    1358:	b510      	push	{r4, lr}
    135a:	4b03      	ldr	r3, [pc, #12]	; (1368 <malloc+0x10>)
    135c:	0001      	movs	r1, r0
    135e:	6818      	ldr	r0, [r3, #0]
    1360:	f000 f84e 	bl	1400 <_malloc_r>
    1364:	bd10      	pop	{r4, pc}
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	20000000 	.word	0x20000000

0000136c <_free_r>:
    136c:	b570      	push	{r4, r5, r6, lr}
    136e:	0005      	movs	r5, r0
    1370:	2900      	cmp	r1, #0
    1372:	d010      	beq.n	1396 <_free_r+0x2a>
    1374:	1f0c      	subs	r4, r1, #4
    1376:	6823      	ldr	r3, [r4, #0]
    1378:	2b00      	cmp	r3, #0
    137a:	da00      	bge.n	137e <_free_r+0x12>
    137c:	18e4      	adds	r4, r4, r3
    137e:	0028      	movs	r0, r5
    1380:	f000 f958 	bl	1634 <__malloc_lock>
    1384:	4a1d      	ldr	r2, [pc, #116]	; (13fc <_free_r+0x90>)
    1386:	6813      	ldr	r3, [r2, #0]
    1388:	2b00      	cmp	r3, #0
    138a:	d105      	bne.n	1398 <_free_r+0x2c>
    138c:	6063      	str	r3, [r4, #4]
    138e:	6014      	str	r4, [r2, #0]
    1390:	0028      	movs	r0, r5
    1392:	f000 f950 	bl	1636 <__malloc_unlock>
    1396:	bd70      	pop	{r4, r5, r6, pc}
    1398:	42a3      	cmp	r3, r4
    139a:	d909      	bls.n	13b0 <_free_r+0x44>
    139c:	6821      	ldr	r1, [r4, #0]
    139e:	1860      	adds	r0, r4, r1
    13a0:	4283      	cmp	r3, r0
    13a2:	d1f3      	bne.n	138c <_free_r+0x20>
    13a4:	6818      	ldr	r0, [r3, #0]
    13a6:	685b      	ldr	r3, [r3, #4]
    13a8:	1841      	adds	r1, r0, r1
    13aa:	6021      	str	r1, [r4, #0]
    13ac:	e7ee      	b.n	138c <_free_r+0x20>
    13ae:	0013      	movs	r3, r2
    13b0:	685a      	ldr	r2, [r3, #4]
    13b2:	2a00      	cmp	r2, #0
    13b4:	d001      	beq.n	13ba <_free_r+0x4e>
    13b6:	42a2      	cmp	r2, r4
    13b8:	d9f9      	bls.n	13ae <_free_r+0x42>
    13ba:	6819      	ldr	r1, [r3, #0]
    13bc:	1858      	adds	r0, r3, r1
    13be:	42a0      	cmp	r0, r4
    13c0:	d10b      	bne.n	13da <_free_r+0x6e>
    13c2:	6820      	ldr	r0, [r4, #0]
    13c4:	1809      	adds	r1, r1, r0
    13c6:	1858      	adds	r0, r3, r1
    13c8:	6019      	str	r1, [r3, #0]
    13ca:	4282      	cmp	r2, r0
    13cc:	d1e0      	bne.n	1390 <_free_r+0x24>
    13ce:	6810      	ldr	r0, [r2, #0]
    13d0:	6852      	ldr	r2, [r2, #4]
    13d2:	1841      	adds	r1, r0, r1
    13d4:	6019      	str	r1, [r3, #0]
    13d6:	605a      	str	r2, [r3, #4]
    13d8:	e7da      	b.n	1390 <_free_r+0x24>
    13da:	42a0      	cmp	r0, r4
    13dc:	d902      	bls.n	13e4 <_free_r+0x78>
    13de:	230c      	movs	r3, #12
    13e0:	602b      	str	r3, [r5, #0]
    13e2:	e7d5      	b.n	1390 <_free_r+0x24>
    13e4:	6821      	ldr	r1, [r4, #0]
    13e6:	1860      	adds	r0, r4, r1
    13e8:	4282      	cmp	r2, r0
    13ea:	d103      	bne.n	13f4 <_free_r+0x88>
    13ec:	6810      	ldr	r0, [r2, #0]
    13ee:	6852      	ldr	r2, [r2, #4]
    13f0:	1841      	adds	r1, r0, r1
    13f2:	6021      	str	r1, [r4, #0]
    13f4:	6062      	str	r2, [r4, #4]
    13f6:	605c      	str	r4, [r3, #4]
    13f8:	e7ca      	b.n	1390 <_free_r+0x24>
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	2000008c 	.word	0x2000008c

00001400 <_malloc_r>:
    1400:	2303      	movs	r3, #3
    1402:	b570      	push	{r4, r5, r6, lr}
    1404:	1ccd      	adds	r5, r1, #3
    1406:	439d      	bics	r5, r3
    1408:	3508      	adds	r5, #8
    140a:	0006      	movs	r6, r0
    140c:	2d0c      	cmp	r5, #12
    140e:	d21e      	bcs.n	144e <_malloc_r+0x4e>
    1410:	250c      	movs	r5, #12
    1412:	42a9      	cmp	r1, r5
    1414:	d81d      	bhi.n	1452 <_malloc_r+0x52>
    1416:	0030      	movs	r0, r6
    1418:	f000 f90c 	bl	1634 <__malloc_lock>
    141c:	4a25      	ldr	r2, [pc, #148]	; (14b4 <_malloc_r+0xb4>)
    141e:	6814      	ldr	r4, [r2, #0]
    1420:	0021      	movs	r1, r4
    1422:	2900      	cmp	r1, #0
    1424:	d119      	bne.n	145a <_malloc_r+0x5a>
    1426:	4c24      	ldr	r4, [pc, #144]	; (14b8 <_malloc_r+0xb8>)
    1428:	6823      	ldr	r3, [r4, #0]
    142a:	2b00      	cmp	r3, #0
    142c:	d103      	bne.n	1436 <_malloc_r+0x36>
    142e:	0030      	movs	r0, r6
    1430:	f000 f844 	bl	14bc <_sbrk_r>
    1434:	6020      	str	r0, [r4, #0]
    1436:	0029      	movs	r1, r5
    1438:	0030      	movs	r0, r6
    143a:	f000 f83f 	bl	14bc <_sbrk_r>
    143e:	1c43      	adds	r3, r0, #1
    1440:	d12c      	bne.n	149c <_malloc_r+0x9c>
    1442:	230c      	movs	r3, #12
    1444:	0030      	movs	r0, r6
    1446:	6033      	str	r3, [r6, #0]
    1448:	f000 f8f5 	bl	1636 <__malloc_unlock>
    144c:	e003      	b.n	1456 <_malloc_r+0x56>
    144e:	2d00      	cmp	r5, #0
    1450:	dadf      	bge.n	1412 <_malloc_r+0x12>
    1452:	230c      	movs	r3, #12
    1454:	6033      	str	r3, [r6, #0]
    1456:	2000      	movs	r0, #0
    1458:	bd70      	pop	{r4, r5, r6, pc}
    145a:	680b      	ldr	r3, [r1, #0]
    145c:	1b5b      	subs	r3, r3, r5
    145e:	d41a      	bmi.n	1496 <_malloc_r+0x96>
    1460:	2b0b      	cmp	r3, #11
    1462:	d903      	bls.n	146c <_malloc_r+0x6c>
    1464:	600b      	str	r3, [r1, #0]
    1466:	18cc      	adds	r4, r1, r3
    1468:	6025      	str	r5, [r4, #0]
    146a:	e003      	b.n	1474 <_malloc_r+0x74>
    146c:	428c      	cmp	r4, r1
    146e:	d10e      	bne.n	148e <_malloc_r+0x8e>
    1470:	6863      	ldr	r3, [r4, #4]
    1472:	6013      	str	r3, [r2, #0]
    1474:	0030      	movs	r0, r6
    1476:	f000 f8de 	bl	1636 <__malloc_unlock>
    147a:	0020      	movs	r0, r4
    147c:	2207      	movs	r2, #7
    147e:	300b      	adds	r0, #11
    1480:	1d23      	adds	r3, r4, #4
    1482:	4390      	bics	r0, r2
    1484:	1ac3      	subs	r3, r0, r3
    1486:	d0e7      	beq.n	1458 <_malloc_r+0x58>
    1488:	425a      	negs	r2, r3
    148a:	50e2      	str	r2, [r4, r3]
    148c:	e7e4      	b.n	1458 <_malloc_r+0x58>
    148e:	684b      	ldr	r3, [r1, #4]
    1490:	6063      	str	r3, [r4, #4]
    1492:	000c      	movs	r4, r1
    1494:	e7ee      	b.n	1474 <_malloc_r+0x74>
    1496:	000c      	movs	r4, r1
    1498:	6849      	ldr	r1, [r1, #4]
    149a:	e7c2      	b.n	1422 <_malloc_r+0x22>
    149c:	2303      	movs	r3, #3
    149e:	1cc4      	adds	r4, r0, #3
    14a0:	439c      	bics	r4, r3
    14a2:	42a0      	cmp	r0, r4
    14a4:	d0e0      	beq.n	1468 <_malloc_r+0x68>
    14a6:	1a21      	subs	r1, r4, r0
    14a8:	0030      	movs	r0, r6
    14aa:	f000 f807 	bl	14bc <_sbrk_r>
    14ae:	1c43      	adds	r3, r0, #1
    14b0:	d1da      	bne.n	1468 <_malloc_r+0x68>
    14b2:	e7c6      	b.n	1442 <_malloc_r+0x42>
    14b4:	2000008c 	.word	0x2000008c
    14b8:	20000090 	.word	0x20000090

000014bc <_sbrk_r>:
    14bc:	2300      	movs	r3, #0
    14be:	b570      	push	{r4, r5, r6, lr}
    14c0:	4c06      	ldr	r4, [pc, #24]	; (14dc <_sbrk_r+0x20>)
    14c2:	0005      	movs	r5, r0
    14c4:	0008      	movs	r0, r1
    14c6:	6023      	str	r3, [r4, #0]
    14c8:	f7ff f820 	bl	50c <_sbrk>
    14cc:	1c43      	adds	r3, r0, #1
    14ce:	d103      	bne.n	14d8 <_sbrk_r+0x1c>
    14d0:	6823      	ldr	r3, [r4, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d000      	beq.n	14d8 <_sbrk_r+0x1c>
    14d6:	602b      	str	r3, [r5, #0]
    14d8:	bd70      	pop	{r4, r5, r6, pc}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	200000a4 	.word	0x200000a4

000014e0 <__sread>:
    14e0:	b570      	push	{r4, r5, r6, lr}
    14e2:	000c      	movs	r4, r1
    14e4:	250e      	movs	r5, #14
    14e6:	5f49      	ldrsh	r1, [r1, r5]
    14e8:	f000 f8a6 	bl	1638 <_read_r>
    14ec:	2800      	cmp	r0, #0
    14ee:	db03      	blt.n	14f8 <__sread+0x18>
    14f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    14f2:	181b      	adds	r3, r3, r0
    14f4:	6563      	str	r3, [r4, #84]	; 0x54
    14f6:	bd70      	pop	{r4, r5, r6, pc}
    14f8:	89a3      	ldrh	r3, [r4, #12]
    14fa:	4a02      	ldr	r2, [pc, #8]	; (1504 <__sread+0x24>)
    14fc:	4013      	ands	r3, r2
    14fe:	81a3      	strh	r3, [r4, #12]
    1500:	e7f9      	b.n	14f6 <__sread+0x16>
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	ffffefff 	.word	0xffffefff

00001508 <__swrite>:
    1508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    150a:	001f      	movs	r7, r3
    150c:	898b      	ldrh	r3, [r1, #12]
    150e:	0005      	movs	r5, r0
    1510:	000c      	movs	r4, r1
    1512:	0016      	movs	r6, r2
    1514:	05db      	lsls	r3, r3, #23
    1516:	d505      	bpl.n	1524 <__swrite+0x1c>
    1518:	230e      	movs	r3, #14
    151a:	5ec9      	ldrsh	r1, [r1, r3]
    151c:	2200      	movs	r2, #0
    151e:	2302      	movs	r3, #2
    1520:	f000 f874 	bl	160c <_lseek_r>
    1524:	89a3      	ldrh	r3, [r4, #12]
    1526:	4a05      	ldr	r2, [pc, #20]	; (153c <__swrite+0x34>)
    1528:	0028      	movs	r0, r5
    152a:	4013      	ands	r3, r2
    152c:	81a3      	strh	r3, [r4, #12]
    152e:	0032      	movs	r2, r6
    1530:	230e      	movs	r3, #14
    1532:	5ee1      	ldrsh	r1, [r4, r3]
    1534:	003b      	movs	r3, r7
    1536:	f000 f81f 	bl	1578 <_write_r>
    153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    153c:	ffffefff 	.word	0xffffefff

00001540 <__sseek>:
    1540:	b570      	push	{r4, r5, r6, lr}
    1542:	000c      	movs	r4, r1
    1544:	250e      	movs	r5, #14
    1546:	5f49      	ldrsh	r1, [r1, r5]
    1548:	f000 f860 	bl	160c <_lseek_r>
    154c:	89a3      	ldrh	r3, [r4, #12]
    154e:	1c42      	adds	r2, r0, #1
    1550:	d103      	bne.n	155a <__sseek+0x1a>
    1552:	4a05      	ldr	r2, [pc, #20]	; (1568 <__sseek+0x28>)
    1554:	4013      	ands	r3, r2
    1556:	81a3      	strh	r3, [r4, #12]
    1558:	bd70      	pop	{r4, r5, r6, pc}
    155a:	2280      	movs	r2, #128	; 0x80
    155c:	0152      	lsls	r2, r2, #5
    155e:	4313      	orrs	r3, r2
    1560:	81a3      	strh	r3, [r4, #12]
    1562:	6560      	str	r0, [r4, #84]	; 0x54
    1564:	e7f8      	b.n	1558 <__sseek+0x18>
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	ffffefff 	.word	0xffffefff

0000156c <__sclose>:
    156c:	b510      	push	{r4, lr}
    156e:	230e      	movs	r3, #14
    1570:	5ec9      	ldrsh	r1, [r1, r3]
    1572:	f000 f815 	bl	15a0 <_close_r>
    1576:	bd10      	pop	{r4, pc}

00001578 <_write_r>:
    1578:	b570      	push	{r4, r5, r6, lr}
    157a:	0005      	movs	r5, r0
    157c:	0008      	movs	r0, r1
    157e:	0011      	movs	r1, r2
    1580:	2200      	movs	r2, #0
    1582:	4c06      	ldr	r4, [pc, #24]	; (159c <_write_r+0x24>)
    1584:	6022      	str	r2, [r4, #0]
    1586:	001a      	movs	r2, r3
    1588:	f7ff fa76 	bl	a78 <_write>
    158c:	1c43      	adds	r3, r0, #1
    158e:	d103      	bne.n	1598 <_write_r+0x20>
    1590:	6823      	ldr	r3, [r4, #0]
    1592:	2b00      	cmp	r3, #0
    1594:	d000      	beq.n	1598 <_write_r+0x20>
    1596:	602b      	str	r3, [r5, #0]
    1598:	bd70      	pop	{r4, r5, r6, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	200000a4 	.word	0x200000a4

000015a0 <_close_r>:
    15a0:	2300      	movs	r3, #0
    15a2:	b570      	push	{r4, r5, r6, lr}
    15a4:	4c06      	ldr	r4, [pc, #24]	; (15c0 <_close_r+0x20>)
    15a6:	0005      	movs	r5, r0
    15a8:	0008      	movs	r0, r1
    15aa:	6023      	str	r3, [r4, #0]
    15ac:	f7fe ffc0 	bl	530 <_close>
    15b0:	1c43      	adds	r3, r0, #1
    15b2:	d103      	bne.n	15bc <_close_r+0x1c>
    15b4:	6823      	ldr	r3, [r4, #0]
    15b6:	2b00      	cmp	r3, #0
    15b8:	d000      	beq.n	15bc <_close_r+0x1c>
    15ba:	602b      	str	r3, [r5, #0]
    15bc:	bd70      	pop	{r4, r5, r6, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	200000a4 	.word	0x200000a4

000015c4 <_fstat_r>:
    15c4:	2300      	movs	r3, #0
    15c6:	b570      	push	{r4, r5, r6, lr}
    15c8:	4c06      	ldr	r4, [pc, #24]	; (15e4 <_fstat_r+0x20>)
    15ca:	0005      	movs	r5, r0
    15cc:	0008      	movs	r0, r1
    15ce:	0011      	movs	r1, r2
    15d0:	6023      	str	r3, [r4, #0]
    15d2:	f7fe ffb0 	bl	536 <_fstat>
    15d6:	1c43      	adds	r3, r0, #1
    15d8:	d103      	bne.n	15e2 <_fstat_r+0x1e>
    15da:	6823      	ldr	r3, [r4, #0]
    15dc:	2b00      	cmp	r3, #0
    15de:	d000      	beq.n	15e2 <_fstat_r+0x1e>
    15e0:	602b      	str	r3, [r5, #0]
    15e2:	bd70      	pop	{r4, r5, r6, pc}
    15e4:	200000a4 	.word	0x200000a4

000015e8 <_isatty_r>:
    15e8:	2300      	movs	r3, #0
    15ea:	b570      	push	{r4, r5, r6, lr}
    15ec:	4c06      	ldr	r4, [pc, #24]	; (1608 <_isatty_r+0x20>)
    15ee:	0005      	movs	r5, r0
    15f0:	0008      	movs	r0, r1
    15f2:	6023      	str	r3, [r4, #0]
    15f4:	f7fe ffa4 	bl	540 <_isatty>
    15f8:	1c43      	adds	r3, r0, #1
    15fa:	d103      	bne.n	1604 <_isatty_r+0x1c>
    15fc:	6823      	ldr	r3, [r4, #0]
    15fe:	2b00      	cmp	r3, #0
    1600:	d000      	beq.n	1604 <_isatty_r+0x1c>
    1602:	602b      	str	r3, [r5, #0]
    1604:	bd70      	pop	{r4, r5, r6, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	200000a4 	.word	0x200000a4

0000160c <_lseek_r>:
    160c:	b570      	push	{r4, r5, r6, lr}
    160e:	0005      	movs	r5, r0
    1610:	0008      	movs	r0, r1
    1612:	0011      	movs	r1, r2
    1614:	2200      	movs	r2, #0
    1616:	4c06      	ldr	r4, [pc, #24]	; (1630 <_lseek_r+0x24>)
    1618:	6022      	str	r2, [r4, #0]
    161a:	001a      	movs	r2, r3
    161c:	f7fe ff92 	bl	544 <_lseek>
    1620:	1c43      	adds	r3, r0, #1
    1622:	d103      	bne.n	162c <_lseek_r+0x20>
    1624:	6823      	ldr	r3, [r4, #0]
    1626:	2b00      	cmp	r3, #0
    1628:	d000      	beq.n	162c <_lseek_r+0x20>
    162a:	602b      	str	r3, [r5, #0]
    162c:	bd70      	pop	{r4, r5, r6, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	200000a4 	.word	0x200000a4

00001634 <__malloc_lock>:
    1634:	4770      	bx	lr

00001636 <__malloc_unlock>:
    1636:	4770      	bx	lr

00001638 <_read_r>:
    1638:	b570      	push	{r4, r5, r6, lr}
    163a:	0005      	movs	r5, r0
    163c:	0008      	movs	r0, r1
    163e:	0011      	movs	r1, r2
    1640:	2200      	movs	r2, #0
    1642:	4c06      	ldr	r4, [pc, #24]	; (165c <_read_r+0x24>)
    1644:	6022      	str	r2, [r4, #0]
    1646:	001a      	movs	r2, r3
    1648:	f7ff fa02 	bl	a50 <_read>
    164