
MULTIPLE_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d60  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00001d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  20000064  00001dc4  00020064  2**2
                  ALLOC
  3 .stack        00002004  200001b4  00001f14  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025678  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038c5  00000000  00000000  0004575d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000dfcb  00000000  00000000  00049022  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d38  00000000  00000000  00056fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000db0  00000000  00000000  00057d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000221dc  00000000  00000000  00058ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000155a6  00000000  00000000  0007acb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009fc9d  00000000  00000000  00090257  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002638  00000000  00000000  0012fef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 21 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .!. 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 15 10 00 00     1...1...1.......
      4c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      5c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      6c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      8c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      9c:	31 01 00 00 31 01 00 00 0d 0e 00 00 21 0e 00 00     1...1.......!...
      ac:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000064 	.word	0x20000064
      dc:	00000000 	.word	0x00000000
      e0:	00001d60 	.word	0x00001d60

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000068 	.word	0x20000068
     110:	00001d60 	.word	0x00001d60
     114:	00001d60 	.word	0x00001d60
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b02      	ldr	r3, [pc, #8]	; (128 <atmel_start_init+0xc>)
     120:	4798      	blx	r3
	stdio_redirect_init();
     122:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     124:	4798      	blx	r3
}
     126:	bd10      	pop	{r4, pc}
     128:	000003f5 	.word	0x000003f5
     12c:	0000132d 	.word	0x0000132d

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     136:	4a10      	ldr	r2, [pc, #64]	; (178 <Reset_Handler+0x44>)
     138:	4b10      	ldr	r3, [pc, #64]	; (17c <Reset_Handler+0x48>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <Reset_Handler+0x48>)
     140:	4a0d      	ldr	r2, [pc, #52]	; (178 <Reset_Handler+0x44>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	490c      	ldr	r1, [pc, #48]	; (180 <Reset_Handler+0x4c>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x50>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a0a      	ldr	r2, [pc, #40]	; (188 <Reset_Handler+0x54>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a0a      	ldr	r2, [pc, #40]	; (18c <Reset_Handler+0x58>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <Reset_Handler+0x5c>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     16c:	4b09      	ldr	r3, [pc, #36]	; (194 <Reset_Handler+0x60>)
     16e:	4798      	blx	r3
        main();
     170:	4b09      	ldr	r3, [pc, #36]	; (198 <Reset_Handler+0x64>)
     172:	4798      	blx	r3
     174:	e7fe      	b.n	174 <Reset_Handler+0x40>
     176:	46c0      	nop			; (mov r8, r8)
     178:	00001d60 	.word	0x00001d60
     17c:	20000000 	.word	0x20000000
     180:	20000064 	.word	0x20000064
     184:	20000064 	.word	0x20000064
     188:	200001b4 	.word	0x200001b4
     18c:	e000ed00 	.word	0xe000ed00
     190:	00000000 	.word	0x00000000
     194:	0000134d 	.word	0x0000134d
     198:	000011f9 	.word	0x000011f9

0000019c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     19c:	b510      	push	{r4, lr}
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     19e:	4a07      	ldr	r2, [pc, #28]	; (1bc <TIMER_0_init+0x20>)
     1a0:	6951      	ldr	r1, [r2, #20]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	009b      	lsls	r3, r3, #2
     1a6:	430b      	orrs	r3, r1
     1a8:	6153      	str	r3, [r2, #20]
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     1aa:	4b05      	ldr	r3, [pc, #20]	; (1c0 <TIMER_0_init+0x24>)
     1ac:	4798      	blx	r3
     1ae:	0002      	movs	r2, r0
     1b0:	4904      	ldr	r1, [pc, #16]	; (1c4 <TIMER_0_init+0x28>)
     1b2:	4805      	ldr	r0, [pc, #20]	; (1c8 <TIMER_0_init+0x2c>)
     1b4:	4b05      	ldr	r3, [pc, #20]	; (1cc <TIMER_0_init+0x30>)
     1b6:	4798      	blx	r3
}
     1b8:	bd10      	pop	{r4, pc}
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	40000800 	.word	0x40000800
     1c0:	0000100f 	.word	0x0000100f
     1c4:	40002400 	.word	0x40002400
     1c8:	20000194 	.word	0x20000194
     1cc:	00000775 	.word	0x00000775

000001d0 <ADC_0_init>:
{
     1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1d2:	46ce      	mov	lr, r9
     1d4:	4647      	mov	r7, r8
     1d6:	b580      	push	{r7, lr}
     1d8:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     1da:	4a2c      	ldr	r2, [pc, #176]	; (28c <ADC_0_init+0xbc>)
     1dc:	69d1      	ldr	r1, [r2, #28]
     1de:	2380      	movs	r3, #128	; 0x80
     1e0:	029b      	lsls	r3, r3, #10
     1e2:	430b      	orrs	r3, r1
     1e4:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1e6:	2140      	movs	r1, #64	; 0x40
     1e8:	2382      	movs	r3, #130	; 0x82
     1ea:	005b      	lsls	r3, r3, #1
     1ec:	4a28      	ldr	r2, [pc, #160]	; (290 <ADC_0_init+0xc0>)
     1ee:	50d1      	str	r1, [r2, r3]
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], _adc_get_adc_async());
     1f0:	4b28      	ldr	r3, [pc, #160]	; (294 <ADC_0_init+0xc4>)
     1f2:	4798      	blx	r3
     1f4:	4d28      	ldr	r5, [pc, #160]	; (298 <ADC_0_init+0xc8>)
     1f6:	4e29      	ldr	r6, [pc, #164]	; (29c <ADC_0_init+0xcc>)
     1f8:	9002      	str	r0, [sp, #8]
     1fa:	4b29      	ldr	r3, [pc, #164]	; (2a0 <ADC_0_init+0xd0>)
     1fc:	9301      	str	r3, [sp, #4]
     1fe:	2401      	movs	r4, #1
     200:	9400      	str	r4, [sp, #0]
     202:	2300      	movs	r3, #0
     204:	002a      	movs	r2, r5
     206:	4927      	ldr	r1, [pc, #156]	; (2a4 <ADC_0_init+0xd4>)
     208:	0030      	movs	r0, r6
     20a:	4f27      	ldr	r7, [pc, #156]	; (2a8 <ADC_0_init+0xd8>)
     20c:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     20e:	1d2a      	adds	r2, r5, #4
     210:	2310      	movs	r3, #16
     212:	2100      	movs	r1, #0
     214:	0030      	movs	r0, r6
     216:	4d25      	ldr	r5, [pc, #148]	; (2ac <ADC_0_init+0xdc>)
     218:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     21a:	23c0      	movs	r3, #192	; 0xc0
     21c:	05db      	lsls	r3, r3, #23
     21e:	469c      	mov	ip, r3
     220:	2784      	movs	r7, #132	; 0x84
     222:	2380      	movs	r3, #128	; 0x80
     224:	005b      	lsls	r3, r3, #1
     226:	4662      	mov	r2, ip
     228:	51d3      	str	r3, [r2, r7]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22a:	2382      	movs	r3, #130	; 0x82
     22c:	05db      	lsls	r3, r3, #23
     22e:	25a8      	movs	r5, #168	; 0xa8
     230:	4a1f      	ldr	r2, [pc, #124]	; (2b0 <ADC_0_init+0xe0>)
     232:	515a      	str	r2, [r3, r5]
     234:	22c0      	movs	r2, #192	; 0xc0
     236:	0612      	lsls	r2, r2, #24
     238:	4691      	mov	r9, r2
     23a:	515a      	str	r2, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     23c:	20c8      	movs	r0, #200	; 0xc8
     23e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     240:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     242:	2601      	movs	r6, #1
     244:	4331      	orrs	r1, r6
     246:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     248:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     24a:	3814      	subs	r0, #20
     24c:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     24e:	220f      	movs	r2, #15
     250:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     252:	4331      	orrs	r1, r6
     254:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     256:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     258:	2180      	movs	r1, #128	; 0x80
     25a:	0089      	lsls	r1, r1, #2
     25c:	4662      	mov	r2, ip
     25e:	51d1      	str	r1, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     260:	4914      	ldr	r1, [pc, #80]	; (2b4 <ADC_0_init+0xe4>)
     262:	5159      	str	r1, [r3, r5]
     264:	464a      	mov	r2, r9
     266:	515a      	str	r2, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     268:	21c9      	movs	r1, #201	; 0xc9
     26a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     26c:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     26e:	4332      	orrs	r2, r6
     270:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     272:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     274:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     276:	39ba      	subs	r1, #186	; 0xba
     278:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     27a:	2110      	movs	r1, #16
     27c:	430a      	orrs	r2, r1
     27e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     280:	541a      	strb	r2, [r3, r0]
}
     282:	b005      	add	sp, #20
     284:	bc0c      	pop	{r2, r3}
     286:	4690      	mov	r8, r2
     288:	4699      	mov	r9, r3
     28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     28c:	40000800 	.word	0x40000800
     290:	40001c00 	.word	0x40001c00
     294:	00000e35 	.word	0x00000e35
     298:	20000080 	.word	0x20000080
     29c:	20000124 	.word	0x20000124
     2a0:	20000150 	.word	0x20000150
     2a4:	42004400 	.word	0x42004400
     2a8:	000004c1 	.word	0x000004c1
     2ac:	00000575 	.word	0x00000575
     2b0:	40000100 	.word	0x40000100
     2b4:	40000200 	.word	0x40000200

000002b8 <ADC_1_init>:
{
     2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ba:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBCMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC1;
     2bc:	4a1e      	ldr	r2, [pc, #120]	; (338 <ADC_1_init+0x80>)
     2be:	69d1      	ldr	r1, [r2, #28]
     2c0:	2380      	movs	r3, #128	; 0x80
     2c2:	02db      	lsls	r3, r3, #11
     2c4:	430b      	orrs	r3, r1
     2c6:	61d3      	str	r3, [r2, #28]
     2c8:	2140      	movs	r1, #64	; 0x40
     2ca:	2384      	movs	r3, #132	; 0x84
     2cc:	005b      	lsls	r3, r3, #1
     2ce:	4a1b      	ldr	r2, [pc, #108]	; (33c <ADC_1_init+0x84>)
     2d0:	50d1      	str	r1, [r2, r3]
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], _adc_get_adc_async());
     2d2:	4b1b      	ldr	r3, [pc, #108]	; (340 <ADC_1_init+0x88>)
     2d4:	4798      	blx	r3
     2d6:	4c1b      	ldr	r4, [pc, #108]	; (344 <ADC_1_init+0x8c>)
     2d8:	0022      	movs	r2, r4
     2da:	3214      	adds	r2, #20
     2dc:	4e1a      	ldr	r6, [pc, #104]	; (348 <ADC_1_init+0x90>)
     2de:	9002      	str	r0, [sp, #8]
     2e0:	4b1a      	ldr	r3, [pc, #104]	; (34c <ADC_1_init+0x94>)
     2e2:	9301      	str	r3, [sp, #4]
     2e4:	2501      	movs	r5, #1
     2e6:	9500      	str	r5, [sp, #0]
     2e8:	2300      	movs	r3, #0
     2ea:	4919      	ldr	r1, [pc, #100]	; (350 <ADC_1_init+0x98>)
     2ec:	0030      	movs	r0, r6
     2ee:	4f19      	ldr	r7, [pc, #100]	; (354 <ADC_1_init+0x9c>)
     2f0:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     2f2:	0022      	movs	r2, r4
     2f4:	3218      	adds	r2, #24
     2f6:	2310      	movs	r3, #16
     2f8:	2100      	movs	r1, #0
     2fa:	0030      	movs	r0, r6
     2fc:	4c16      	ldr	r4, [pc, #88]	; (358 <ADC_1_init+0xa0>)
     2fe:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     300:	2280      	movs	r2, #128	; 0x80
     302:	0052      	lsls	r2, r2, #1
     304:	23c0      	movs	r3, #192	; 0xc0
     306:	05db      	lsls	r3, r3, #23
     308:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     30a:	2182      	movs	r1, #130	; 0x82
     30c:	05c9      	lsls	r1, r1, #23
     30e:	4b13      	ldr	r3, [pc, #76]	; (35c <ADC_1_init+0xa4>)
     310:	628b      	str	r3, [r1, #40]	; 0x28
     312:	23c0      	movs	r3, #192	; 0xc0
     314:	061b      	lsls	r3, r3, #24
     316:	628b      	str	r3, [r1, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     318:	2348      	movs	r3, #72	; 0x48
     31a:	5cca      	ldrb	r2, [r1, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     31e:	2001      	movs	r0, #1
     320:	4302      	orrs	r2, r0
     322:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     324:	54ca      	strb	r2, [r1, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     326:	2234      	movs	r2, #52	; 0x34
     328:	5c8b      	ldrb	r3, [r1, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     32a:	240f      	movs	r4, #15
     32c:	43a3      	bics	r3, r4
	tmp |= PORT_PMUX_PMUXE(data);
     32e:	4303      	orrs	r3, r0
     330:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     332:	548b      	strb	r3, [r1, r2]
}
     334:	b005      	add	sp, #20
     336:	bdf0      	pop	{r4, r5, r6, r7, pc}
     338:	40000800 	.word	0x40000800
     33c:	40001c00 	.word	0x40001c00
     340:	00000e35 	.word	0x00000e35
     344:	20000080 	.word	0x20000080
     348:	20000168 	.word	0x20000168
     34c:	2000010c 	.word	0x2000010c
     350:	42004800 	.word	0x42004800
     354:	000004c1 	.word	0x000004c1
     358:	00000575 	.word	0x00000575
     35c:	40000100 	.word	0x40000100

00000360 <TARGET_IO_PORT_init>:

void TARGET_IO_PORT_init(void)
{
     360:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     362:	2382      	movs	r3, #130	; 0x82
     364:	05db      	lsls	r3, r3, #23
     366:	22ca      	movs	r2, #202	; 0xca
     368:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     36a:	2501      	movs	r5, #1
     36c:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     36e:	2401      	movs	r4, #1
     370:	4321      	orrs	r1, r4
     372:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     374:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     376:	20b5      	movs	r0, #181	; 0xb5
     378:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     37a:	3abb      	subs	r2, #187	; 0xbb
     37c:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     37e:	2203      	movs	r2, #3
     380:	4311      	orrs	r1, r2
     382:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     384:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     386:	21cb      	movs	r1, #203	; 0xcb
     388:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     38a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     38c:	4322      	orrs	r2, r4
     38e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     390:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     392:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     394:	39bc      	subs	r1, #188	; 0xbc
     396:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     398:	2130      	movs	r1, #48	; 0x30
     39a:	430a      	orrs	r2, r1
     39c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     39e:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
     3a0:	bd30      	pop	{r4, r5, pc}
	...

000003a4 <TARGET_IO_CLOCK_init>:
     3a4:	4b06      	ldr	r3, [pc, #24]	; (3c0 <TARGET_IO_CLOCK_init+0x1c>)
     3a6:	2140      	movs	r1, #64	; 0x40
     3a8:	22dc      	movs	r2, #220	; 0xdc
     3aa:	5099      	str	r1, [r3, r2]
     3ac:	3103      	adds	r1, #3
     3ae:	3a14      	subs	r2, #20
     3b0:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     3b2:	4a04      	ldr	r2, [pc, #16]	; (3c4 <TARGET_IO_CLOCK_init+0x20>)
     3b4:	69d3      	ldr	r3, [r2, #28]
     3b6:	3923      	subs	r1, #35	; 0x23
     3b8:	430b      	orrs	r3, r1
     3ba:	61d3      	str	r3, [r2, #28]
void TARGET_IO_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     3bc:	4770      	bx	lr
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	40001c00 	.word	0x40001c00
     3c4:	40000800 	.word	0x40000800

000003c8 <TARGET_IO_init>:

void TARGET_IO_init(void)
{
     3c8:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     3ca:	4b05      	ldr	r3, [pc, #20]	; (3e0 <TARGET_IO_init+0x18>)
     3cc:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM4, (void *)NULL);
     3ce:	2200      	movs	r2, #0
     3d0:	4904      	ldr	r1, [pc, #16]	; (3e4 <TARGET_IO_init+0x1c>)
     3d2:	4805      	ldr	r0, [pc, #20]	; (3e8 <TARGET_IO_init+0x20>)
     3d4:	4b05      	ldr	r3, [pc, #20]	; (3ec <TARGET_IO_init+0x24>)
     3d6:	4798      	blx	r3
	TARGET_IO_PORT_init();
     3d8:	4b05      	ldr	r3, [pc, #20]	; (3f0 <TARGET_IO_init+0x28>)
     3da:	4798      	blx	r3
}
     3dc:	bd10      	pop	{r4, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	000003a5 	.word	0x000003a5
     3e4:	42001400 	.word	0x42001400
     3e8:	20000100 	.word	0x20000100
     3ec:	00000985 	.word	0x00000985
     3f0:	00000361 	.word	0x00000361

000003f4 <system_init>:

void system_init(void)
{
     3f4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3f6:	4b0e      	ldr	r3, [pc, #56]	; (430 <system_init+0x3c>)
     3f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3fa:	23c0      	movs	r3, #192	; 0xc0
     3fc:	05db      	lsls	r3, r3, #23
     3fe:	2280      	movs	r2, #128	; 0x80
     400:	0212      	lsls	r2, r2, #8
     402:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     404:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     406:	2382      	movs	r3, #130	; 0x82
     408:	05db      	lsls	r3, r3, #23
     40a:	4a0a      	ldr	r2, [pc, #40]	; (434 <system_init+0x40>)
     40c:	629a      	str	r2, [r3, #40]	; 0x28
     40e:	22c0      	movs	r2, #192	; 0xc0
     410:	0612      	lsls	r2, r2, #24
     412:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     414:	214f      	movs	r1, #79	; 0x4f
     416:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     418:	2001      	movs	r0, #1
     41a:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41c:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     41e:	4b06      	ldr	r3, [pc, #24]	; (438 <system_init+0x44>)
     420:	4798      	blx	r3
	ADC_1_init();
     422:	4b06      	ldr	r3, [pc, #24]	; (43c <system_init+0x48>)
     424:	4798      	blx	r3

	TIMER_0_init();
     426:	4b06      	ldr	r3, [pc, #24]	; (440 <system_init+0x4c>)
     428:	4798      	blx	r3

	TARGET_IO_init();
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <system_init+0x50>)
     42c:	4798      	blx	r3
}
     42e:	bd10      	pop	{r4, pc}
     430:	00000e39 	.word	0x00000e39
     434:	40008000 	.word	0x40008000
     438:	000001d1 	.word	0x000001d1
     43c:	000002b9 	.word	0x000002b9
     440:	0000019d 	.word	0x0000019d
     444:	000003c9 	.word	0x000003c9

00000448 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     448:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     44a:	6983      	ldr	r3, [r0, #24]
     44c:	2b00      	cmp	r3, #0
     44e:	d000      	beq.n	452 <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
     450:	4798      	blx	r3
	}
}
     452:	bd10      	pop	{r4, pc}

00000454 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     454:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     456:	69c3      	ldr	r3, [r0, #28]
     458:	2b00      	cmp	r3, #0
     45a:	d000      	beq.n	45e <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
     45c:	4798      	blx	r3
	}
}
     45e:	bd10      	pop	{r4, pc}

00000460 <adc_async_channel_conversion_done>:
{
     460:	b5f0      	push	{r4, r5, r6, r7, lr}
     462:	b083      	sub	sp, #12
     464:	0005      	movs	r5, r0
     466:	000e      	movs	r6, r1
     468:	0011      	movs	r1, r2
	uint8_t                              index    = descr->channel_map[channel];
     46a:	6a03      	ldr	r3, [r0, #32]
     46c:	5d9a      	ldrb	r2, [r3, r6]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     46e:	0053      	lsls	r3, r2, #1
     470:	189b      	adds	r3, r3, r2
     472:	00dc      	lsls	r4, r3, #3
     474:	6a83      	ldr	r3, [r0, #40]	; 0x28
     476:	469c      	mov	ip, r3
     478:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
     47a:	1d27      	adds	r7, r4, #4
     47c:	9101      	str	r1, [sp, #4]
     47e:	466b      	mov	r3, sp
     480:	7919      	ldrb	r1, [r3, #4]
     482:	0038      	movs	r0, r7
     484:	4b0c      	ldr	r3, [pc, #48]	; (4b8 <adc_async_channel_conversion_done+0x58>)
     486:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     488:	0028      	movs	r0, r5
     48a:	4b0c      	ldr	r3, [pc, #48]	; (4bc <adc_async_channel_conversion_done+0x5c>)
     48c:	4798      	blx	r3
     48e:	2801      	cmp	r0, #1
     490:	d907      	bls.n	4a2 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     492:	9b01      	ldr	r3, [sp, #4]
     494:	0a19      	lsrs	r1, r3, #8
     496:	0038      	movs	r0, r7
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <adc_async_channel_conversion_done+0x58>)
     49a:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     49c:	8aa3      	ldrh	r3, [r4, #20]
     49e:	3301      	adds	r3, #1
     4a0:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
     4a2:	8aa3      	ldrh	r3, [r4, #20]
     4a4:	3301      	adds	r3, #1
     4a6:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     4a8:	6823      	ldr	r3, [r4, #0]
     4aa:	2b00      	cmp	r3, #0
     4ac:	d002      	beq.n	4b4 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     4ae:	0031      	movs	r1, r6
     4b0:	0028      	movs	r0, r5
     4b2:	4798      	blx	r3
}
     4b4:	b003      	add	sp, #12
     4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4b8:	00000ab1 	.word	0x00000ab1
     4bc:	00000df5 	.word	0x00000df5

000004c0 <adc_async_init>:
{
     4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c2:	46d6      	mov	lr, sl
     4c4:	b500      	push	{lr}
     4c6:	b082      	sub	sp, #8
     4c8:	0005      	movs	r5, r0
     4ca:	9101      	str	r1, [sp, #4]
     4cc:	0016      	movs	r6, r2
     4ce:	001c      	movs	r4, r3
     4d0:	ab08      	add	r3, sp, #32
     4d2:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     4d4:	2800      	cmp	r0, #0
     4d6:	d00c      	beq.n	4f2 <adc_async_init+0x32>
     4d8:	2900      	cmp	r1, #0
     4da:	d00c      	beq.n	4f6 <adc_async_init+0x36>
     4dc:	2a00      	cmp	r2, #0
     4de:	d00c      	beq.n	4fa <adc_async_init+0x3a>
     4e0:	2f00      	cmp	r7, #0
     4e2:	d00c      	beq.n	4fe <adc_async_init+0x3e>
     4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4e6:	2b00      	cmp	r3, #0
     4e8:	d001      	beq.n	4ee <adc_async_init+0x2e>
     4ea:	2001      	movs	r0, #1
     4ec:	e008      	b.n	500 <adc_async_init+0x40>
     4ee:	2000      	movs	r0, #0
     4f0:	e006      	b.n	500 <adc_async_init+0x40>
     4f2:	2000      	movs	r0, #0
     4f4:	e004      	b.n	500 <adc_async_init+0x40>
     4f6:	2000      	movs	r0, #0
     4f8:	e002      	b.n	500 <adc_async_init+0x40>
     4fa:	2000      	movs	r0, #0
     4fc:	e000      	b.n	500 <adc_async_init+0x40>
     4fe:	2000      	movs	r0, #0
     500:	223f      	movs	r2, #63	; 0x3f
     502:	4916      	ldr	r1, [pc, #88]	; (55c <adc_async_init+0x9c>)
     504:	4b16      	ldr	r3, [pc, #88]	; (560 <adc_async_init+0xa0>)
     506:	469a      	mov	sl, r3
     508:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
     50a:	1c62      	adds	r2, r4, #1
     50c:	0ffb      	lsrs	r3, r7, #31
     50e:	17d0      	asrs	r0, r2, #31
     510:	42ba      	cmp	r2, r7
     512:	4158      	adcs	r0, r3
     514:	b2c0      	uxtb	r0, r0
     516:	2240      	movs	r2, #64	; 0x40
     518:	4910      	ldr	r1, [pc, #64]	; (55c <adc_async_init+0x9c>)
     51a:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
     51c:	2300      	movs	r3, #0
     51e:	e003      	b.n	528 <adc_async_init+0x68>
		channel_map[i] = 0xFF;
     520:	22ff      	movs	r2, #255	; 0xff
     522:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
     524:	3301      	adds	r3, #1
     526:	b2db      	uxtb	r3, r3
     528:	42a3      	cmp	r3, r4
     52a:	d9f9      	bls.n	520 <adc_async_init+0x60>
	descr->channel_map    = channel_map;
     52c:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
     52e:	2324      	movs	r3, #36	; 0x24
     530:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
     532:	3301      	adds	r3, #1
     534:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
     536:	9b09      	ldr	r3, [sp, #36]	; 0x24
     538:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     53a:	9901      	ldr	r1, [sp, #4]
     53c:	0028      	movs	r0, r5
     53e:	4b09      	ldr	r3, [pc, #36]	; (564 <adc_async_init+0xa4>)
     540:	4798      	blx	r3
	if (init_status) {
     542:	2800      	cmp	r0, #0
     544:	d105      	bne.n	552 <adc_async_init+0x92>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     546:	4b08      	ldr	r3, [pc, #32]	; (568 <adc_async_init+0xa8>)
     548:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     54a:	4b08      	ldr	r3, [pc, #32]	; (56c <adc_async_init+0xac>)
     54c:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     54e:	4b08      	ldr	r3, [pc, #32]	; (570 <adc_async_init+0xb0>)
     550:	606b      	str	r3, [r5, #4]
}
     552:	b002      	add	sp, #8
     554:	bc04      	pop	{r2}
     556:	4692      	mov	sl, r2
     558:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	00001b60 	.word	0x00001b60
     560:	000009fd 	.word	0x000009fd
     564:	00000d51 	.word	0x00000d51
     568:	00000461 	.word	0x00000461
     56c:	00000449 	.word	0x00000449
     570:	00000455 	.word	0x00000455

00000574 <adc_async_register_channel_buffer>:
{
     574:	b5f0      	push	{r4, r5, r6, r7, lr}
     576:	b083      	sub	sp, #12
     578:	0007      	movs	r7, r0
     57a:	000c      	movs	r4, r1
     57c:	9200      	str	r2, [sp, #0]
     57e:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
     580:	2800      	cmp	r0, #0
     582:	d019      	beq.n	5b8 <adc_async_register_channel_buffer+0x44>
     584:	2a00      	cmp	r2, #0
     586:	d019      	beq.n	5bc <adc_async_register_channel_buffer+0x48>
     588:	2b00      	cmp	r3, #0
     58a:	d119      	bne.n	5c0 <adc_async_register_channel_buffer+0x4c>
     58c:	2000      	movs	r0, #0
     58e:	4e24      	ldr	r6, [pc, #144]	; (620 <adc_async_register_channel_buffer+0xac>)
     590:	2266      	movs	r2, #102	; 0x66
     592:	0031      	movs	r1, r6
     594:	4d23      	ldr	r5, [pc, #140]	; (624 <adc_async_register_channel_buffer+0xb0>)
     596:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
     598:	2324      	movs	r3, #36	; 0x24
     59a:	5cfb      	ldrb	r3, [r7, r3]
     59c:	2000      	movs	r0, #0
     59e:	42a3      	cmp	r3, r4
     5a0:	4140      	adcs	r0, r0
     5a2:	b2c0      	uxtb	r0, r0
     5a4:	2267      	movs	r2, #103	; 0x67
     5a6:	0031      	movs	r1, r6
     5a8:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
     5aa:	6a39      	ldr	r1, [r7, #32]
     5ac:	5d0b      	ldrb	r3, [r1, r4]
     5ae:	2bff      	cmp	r3, #255	; 0xff
     5b0:	d12c      	bne.n	60c <adc_async_register_channel_buffer+0x98>
     5b2:	2600      	movs	r6, #0
     5b4:	2300      	movs	r3, #0
     5b6:	e007      	b.n	5c8 <adc_async_register_channel_buffer+0x54>
	ASSERT(descr && convert_buffer && convert_buffer_length);
     5b8:	2000      	movs	r0, #0
     5ba:	e7e8      	b.n	58e <adc_async_register_channel_buffer+0x1a>
     5bc:	2000      	movs	r0, #0
     5be:	e7e6      	b.n	58e <adc_async_register_channel_buffer+0x1a>
     5c0:	2001      	movs	r0, #1
     5c2:	e7e4      	b.n	58e <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
     5c4:	3301      	adds	r3, #1
     5c6:	b2db      	uxtb	r3, r3
     5c8:	2224      	movs	r2, #36	; 0x24
     5ca:	5cba      	ldrb	r2, [r7, r2]
     5cc:	4293      	cmp	r3, r2
     5ce:	d805      	bhi.n	5dc <adc_async_register_channel_buffer+0x68>
		if (descr->channel_map[i] != 0xFF) {
     5d0:	5cca      	ldrb	r2, [r1, r3]
     5d2:	2aff      	cmp	r2, #255	; 0xff
     5d4:	d0f6      	beq.n	5c4 <adc_async_register_channel_buffer+0x50>
			index++;
     5d6:	3601      	adds	r6, #1
     5d8:	b2f6      	uxtb	r6, r6
     5da:	e7f3      	b.n	5c4 <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
     5dc:	2325      	movs	r3, #37	; 0x25
     5de:	5cfb      	ldrb	r3, [r7, r3]
     5e0:	429e      	cmp	r6, r3
     5e2:	d816      	bhi.n	612 <adc_async_register_channel_buffer+0x9e>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     5e4:	0073      	lsls	r3, r6, #1
     5e6:	199b      	adds	r3, r3, r6
     5e8:	00dd      	lsls	r5, r3, #3
     5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
     5ec:	1958      	adds	r0, r3, r5
     5ee:	3004      	adds	r0, #4
     5f0:	9a01      	ldr	r2, [sp, #4]
     5f2:	9900      	ldr	r1, [sp, #0]
     5f4:	4b0c      	ldr	r3, [pc, #48]	; (628 <adc_async_register_channel_buffer+0xb4>)
     5f6:	4798      	blx	r3
     5f8:	2800      	cmp	r0, #0
     5fa:	d10d      	bne.n	618 <adc_async_register_channel_buffer+0xa4>
	descr->channel_map[channel]            = index;
     5fc:	6a3b      	ldr	r3, [r7, #32]
     5fe:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
     600:	6abb      	ldr	r3, [r7, #40]	; 0x28
     602:	195b      	adds	r3, r3, r5
     604:	2200      	movs	r2, #0
     606:	829a      	strh	r2, [r3, #20]
}
     608:	b003      	add	sp, #12
     60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
     60c:	200d      	movs	r0, #13
     60e:	4240      	negs	r0, r0
     610:	e7fa      	b.n	608 <adc_async_register_channel_buffer+0x94>
		return ERR_NO_RESOURCE;
     612:	201c      	movs	r0, #28
     614:	4240      	negs	r0, r0
     616:	e7f7      	b.n	608 <adc_async_register_channel_buffer+0x94>
		return ERR_INVALID_ARG;
     618:	200d      	movs	r0, #13
     61a:	4240      	negs	r0, r0
     61c:	e7f4      	b.n	608 <adc_async_register_channel_buffer+0x94>
     61e:	46c0      	nop			; (mov r8, r8)
     620:	00001b60 	.word	0x00001b60
     624:	000009fd 	.word	0x000009fd
     628:	00000a65 	.word	0x00000a65

0000062c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     62c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     630:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     632:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     634:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     638:	4770      	bx	lr

0000063a <atomic_leave_critical>:
     63a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     63e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     640:	f383 8810 	msr	PRIMASK, r3
}
     644:	4770      	bx	lr
	...

00000648 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     648:	b570      	push	{r4, r5, r6, lr}
     64a:	0004      	movs	r4, r0
     64c:	000d      	movs	r5, r1
     64e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     650:	2800      	cmp	r0, #0
     652:	d00e      	beq.n	672 <io_write+0x2a>
     654:	2900      	cmp	r1, #0
     656:	d00a      	beq.n	66e <io_write+0x26>
     658:	2001      	movs	r0, #1
     65a:	2234      	movs	r2, #52	; 0x34
     65c:	4906      	ldr	r1, [pc, #24]	; (678 <io_write+0x30>)
     65e:	4b07      	ldr	r3, [pc, #28]	; (67c <io_write+0x34>)
     660:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     662:	6823      	ldr	r3, [r4, #0]
     664:	0032      	movs	r2, r6
     666:	0029      	movs	r1, r5
     668:	0020      	movs	r0, r4
     66a:	4798      	blx	r3
}
     66c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     66e:	2000      	movs	r0, #0
     670:	e7f3      	b.n	65a <io_write+0x12>
     672:	2000      	movs	r0, #0
     674:	e7f1      	b.n	65a <io_write+0x12>
     676:	46c0      	nop			; (mov r8, r8)
     678:	00001b7c 	.word	0x00001b7c
     67c:	000009fd 	.word	0x000009fd

00000680 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     680:	b570      	push	{r4, r5, r6, lr}
     682:	0004      	movs	r4, r0
     684:	000d      	movs	r5, r1
     686:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     688:	2800      	cmp	r0, #0
     68a:	d00e      	beq.n	6aa <io_read+0x2a>
     68c:	2900      	cmp	r1, #0
     68e:	d00a      	beq.n	6a6 <io_read+0x26>
     690:	2001      	movs	r0, #1
     692:	223d      	movs	r2, #61	; 0x3d
     694:	4906      	ldr	r1, [pc, #24]	; (6b0 <io_read+0x30>)
     696:	4b07      	ldr	r3, [pc, #28]	; (6b4 <io_read+0x34>)
     698:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     69a:	6863      	ldr	r3, [r4, #4]
     69c:	0032      	movs	r2, r6
     69e:	0029      	movs	r1, r5
     6a0:	0020      	movs	r0, r4
     6a2:	4798      	blx	r3
}
     6a4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     6a6:	2000      	movs	r0, #0
     6a8:	e7f3      	b.n	692 <io_read+0x12>
     6aa:	2000      	movs	r0, #0
     6ac:	e7f1      	b.n	692 <io_read+0x12>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	00001b7c 	.word	0x00001b7c
     6b4:	000009fd 	.word	0x000009fd

000006b8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     6ba:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     6bc:	2e00      	cmp	r6, #0
     6be:	d002      	beq.n	6c6 <timer_add_timer_task+0xe>
     6c0:	0033      	movs	r3, r6
     6c2:	2500      	movs	r5, #0
     6c4:	e00c      	b.n	6e0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     6c6:	4b10      	ldr	r3, [pc, #64]	; (708 <timer_add_timer_task+0x50>)
     6c8:	4798      	blx	r3
		return;
     6ca:	e018      	b.n	6fe <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     6cc:	689f      	ldr	r7, [r3, #8]
     6ce:	46bc      	mov	ip, r7
     6d0:	4464      	add	r4, ip
     6d2:	1aa4      	subs	r4, r4, r2
     6d4:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     6d6:	688f      	ldr	r7, [r1, #8]
     6d8:	42bc      	cmp	r4, r7
     6da:	d20b      	bcs.n	6f4 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     6dc:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     6de:	681b      	ldr	r3, [r3, #0]
     6e0:	2b00      	cmp	r3, #0
     6e2:	d007      	beq.n	6f4 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     6e4:	685c      	ldr	r4, [r3, #4]
     6e6:	4294      	cmp	r4, r2
     6e8:	d8f0      	bhi.n	6cc <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     6ea:	1aa4      	subs	r4, r4, r2
     6ec:	689f      	ldr	r7, [r3, #8]
     6ee:	46bc      	mov	ip, r7
     6f0:	4464      	add	r4, ip
     6f2:	e7f0      	b.n	6d6 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     6f4:	42b3      	cmp	r3, r6
     6f6:	d003      	beq.n	700 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     6f8:	0028      	movs	r0, r5
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <timer_add_timer_task+0x54>)
     6fc:	4798      	blx	r3
	}
}
     6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     700:	4b01      	ldr	r3, [pc, #4]	; (708 <timer_add_timer_task+0x50>)
     702:	4798      	blx	r3
     704:	e7fb      	b.n	6fe <timer_add_timer_task+0x46>
     706:	46c0      	nop			; (mov r8, r8)
     708:	00000a1d 	.word	0x00000a1d
     70c:	00000a49 	.word	0x00000a49

00000710 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     712:	0005      	movs	r5, r0
     714:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     716:	6903      	ldr	r3, [r0, #16]
     718:	1c5e      	adds	r6, r3, #1
     71a:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     71c:	7e03      	ldrb	r3, [r0, #24]
     71e:	07db      	lsls	r3, r3, #31
     720:	d402      	bmi.n	728 <timer_process_counted+0x18>
     722:	7e03      	ldrb	r3, [r0, #24]
     724:	079b      	lsls	r3, r3, #30
     726:	d50a      	bpl.n	73e <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     728:	7e2b      	ldrb	r3, [r5, #24]
     72a:	2202      	movs	r2, #2
     72c:	4313      	orrs	r3, r2
     72e:	b2db      	uxtb	r3, r3
     730:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     734:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     736:	68e3      	ldr	r3, [r4, #12]
     738:	0020      	movs	r0, r4
     73a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     73c:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     73e:	2c00      	cmp	r4, #0
     740:	d0f7      	beq.n	732 <timer_process_counted+0x22>
     742:	6863      	ldr	r3, [r4, #4]
     744:	1af3      	subs	r3, r6, r3
     746:	68a2      	ldr	r2, [r4, #8]
     748:	4293      	cmp	r3, r2
     74a:	d3f2      	bcc.n	732 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     74c:	002f      	movs	r7, r5
     74e:	3714      	adds	r7, #20
     750:	0038      	movs	r0, r7
     752:	4b06      	ldr	r3, [pc, #24]	; (76c <timer_process_counted+0x5c>)
     754:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     756:	7c23      	ldrb	r3, [r4, #16]
     758:	2b01      	cmp	r3, #1
     75a:	d1eb      	bne.n	734 <timer_process_counted+0x24>
			tmp->time_label = time;
     75c:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     75e:	0032      	movs	r2, r6
     760:	0021      	movs	r1, r4
     762:	0038      	movs	r0, r7
     764:	4b02      	ldr	r3, [pc, #8]	; (770 <timer_process_counted+0x60>)
     766:	4798      	blx	r3
     768:	e7e4      	b.n	734 <timer_process_counted+0x24>
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00000a51 	.word	0x00000a51
     770:	000006b9 	.word	0x000006b9

00000774 <timer_init>:
{
     774:	b570      	push	{r4, r5, r6, lr}
     776:	0004      	movs	r4, r0
     778:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     77a:	2800      	cmp	r0, #0
     77c:	d012      	beq.n	7a4 <timer_init+0x30>
     77e:	2900      	cmp	r1, #0
     780:	d00e      	beq.n	7a0 <timer_init+0x2c>
     782:	2001      	movs	r0, #1
     784:	223b      	movs	r2, #59	; 0x3b
     786:	4908      	ldr	r1, [pc, #32]	; (7a8 <timer_init+0x34>)
     788:	4b08      	ldr	r3, [pc, #32]	; (7ac <timer_init+0x38>)
     78a:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     78c:	0029      	movs	r1, r5
     78e:	0020      	movs	r0, r4
     790:	4b07      	ldr	r3, [pc, #28]	; (7b0 <timer_init+0x3c>)
     792:	4798      	blx	r3
	descr->time                           = 0;
     794:	2300      	movs	r3, #0
     796:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     798:	4b06      	ldr	r3, [pc, #24]	; (7b4 <timer_init+0x40>)
     79a:	6023      	str	r3, [r4, #0]
}
     79c:	2000      	movs	r0, #0
     79e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     7a0:	2000      	movs	r0, #0
     7a2:	e7ef      	b.n	784 <timer_init+0x10>
     7a4:	2000      	movs	r0, #0
     7a6:	e7ed      	b.n	784 <timer_init+0x10>
     7a8:	00001b90 	.word	0x00001b90
     7ac:	000009fd 	.word	0x000009fd
     7b0:	00000f31 	.word	0x00000f31
     7b4:	00000711 	.word	0x00000711

000007b8 <timer_start>:
{
     7b8:	b510      	push	{r4, lr}
     7ba:	0004      	movs	r4, r0
	ASSERT(descr);
     7bc:	1e43      	subs	r3, r0, #1
     7be:	4198      	sbcs	r0, r3
     7c0:	b2c0      	uxtb	r0, r0
     7c2:	2253      	movs	r2, #83	; 0x53
     7c4:	4907      	ldr	r1, [pc, #28]	; (7e4 <timer_start+0x2c>)
     7c6:	4b08      	ldr	r3, [pc, #32]	; (7e8 <timer_start+0x30>)
     7c8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     7ca:	0020      	movs	r0, r4
     7cc:	4b07      	ldr	r3, [pc, #28]	; (7ec <timer_start+0x34>)
     7ce:	4798      	blx	r3
     7d0:	2800      	cmp	r0, #0
     7d2:	d104      	bne.n	7de <timer_start+0x26>
	_timer_start(&descr->device);
     7d4:	0020      	movs	r0, r4
     7d6:	4b06      	ldr	r3, [pc, #24]	; (7f0 <timer_start+0x38>)
     7d8:	4798      	blx	r3
	return ERR_NONE;
     7da:	2000      	movs	r0, #0
}
     7dc:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     7de:	2011      	movs	r0, #17
     7e0:	4240      	negs	r0, r0
     7e2:	e7fb      	b.n	7dc <timer_start+0x24>
     7e4:	00001b90 	.word	0x00001b90
     7e8:	000009fd 	.word	0x000009fd
     7ec:	00000ff5 	.word	0x00000ff5
     7f0:	00000f99 	.word	0x00000f99

000007f4 <timer_add_task>:
{
     7f4:	b570      	push	{r4, r5, r6, lr}
     7f6:	b082      	sub	sp, #8
     7f8:	0004      	movs	r4, r0
     7fa:	000d      	movs	r5, r1
	ASSERT(descr && task);
     7fc:	2800      	cmp	r0, #0
     7fe:	d026      	beq.n	84e <timer_add_task+0x5a>
     800:	2900      	cmp	r1, #0
     802:	d022      	beq.n	84a <timer_add_task+0x56>
     804:	2001      	movs	r0, #1
     806:	227a      	movs	r2, #122	; 0x7a
     808:	491f      	ldr	r1, [pc, #124]	; (888 <timer_add_task+0x94>)
     80a:	4b20      	ldr	r3, [pc, #128]	; (88c <timer_add_task+0x98>)
     80c:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     80e:	7e23      	ldrb	r3, [r4, #24]
     810:	2201      	movs	r2, #1
     812:	4313      	orrs	r3, r2
     814:	b2db      	uxtb	r3, r3
     816:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     818:	0026      	movs	r6, r4
     81a:	3614      	adds	r6, #20
     81c:	0029      	movs	r1, r5
     81e:	0030      	movs	r0, r6
     820:	4b1b      	ldr	r3, [pc, #108]	; (890 <timer_add_task+0x9c>)
     822:	4798      	blx	r3
     824:	2800      	cmp	r0, #0
     826:	d114      	bne.n	852 <timer_add_task+0x5e>
	task->time_label = descr->time;
     828:	6923      	ldr	r3, [r4, #16]
     82a:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     82c:	6922      	ldr	r2, [r4, #16]
     82e:	0029      	movs	r1, r5
     830:	0030      	movs	r0, r6
     832:	4b18      	ldr	r3, [pc, #96]	; (894 <timer_add_task+0xa0>)
     834:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     836:	7e23      	ldrb	r3, [r4, #24]
     838:	2201      	movs	r2, #1
     83a:	4393      	bics	r3, r2
     83c:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     83e:	7e23      	ldrb	r3, [r4, #24]
     840:	079b      	lsls	r3, r3, #30
     842:	d412      	bmi.n	86a <timer_add_task+0x76>
	return ERR_NONE;
     844:	2000      	movs	r0, #0
}
     846:	b002      	add	sp, #8
     848:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     84a:	2000      	movs	r0, #0
     84c:	e7db      	b.n	806 <timer_add_task+0x12>
     84e:	2000      	movs	r0, #0
     850:	e7d9      	b.n	806 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     852:	7e23      	ldrb	r3, [r4, #24]
     854:	2201      	movs	r2, #1
     856:	4393      	bics	r3, r2
     858:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     85a:	327e      	adds	r2, #126	; 0x7e
     85c:	490a      	ldr	r1, [pc, #40]	; (888 <timer_add_task+0x94>)
     85e:	2000      	movs	r0, #0
     860:	4b0a      	ldr	r3, [pc, #40]	; (88c <timer_add_task+0x98>)
     862:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     864:	2012      	movs	r0, #18
     866:	4240      	negs	r0, r0
     868:	e7ed      	b.n	846 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     86a:	a801      	add	r0, sp, #4
     86c:	4b0a      	ldr	r3, [pc, #40]	; (898 <timer_add_task+0xa4>)
     86e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     870:	7e23      	ldrb	r3, [r4, #24]
     872:	2202      	movs	r2, #2
     874:	4393      	bics	r3, r2
     876:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     878:	0020      	movs	r0, r4
     87a:	4b08      	ldr	r3, [pc, #32]	; (89c <timer_add_task+0xa8>)
     87c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     87e:	a801      	add	r0, sp, #4
     880:	4b07      	ldr	r3, [pc, #28]	; (8a0 <timer_add_task+0xac>)
     882:	4798      	blx	r3
	return ERR_NONE;
     884:	2000      	movs	r0, #0
     886:	e7de      	b.n	846 <timer_add_task+0x52>
     888:	00001b90 	.word	0x00001b90
     88c:	000009fd 	.word	0x000009fd
     890:	00000a05 	.word	0x00000a05
     894:	000006b9 	.word	0x000006b9
     898:	0000062d 	.word	0x0000062d
     89c:	0000100d 	.word	0x0000100d
     8a0:	0000063b 	.word	0x0000063b

000008a4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8a6:	0005      	movs	r5, r0
     8a8:	000e      	movs	r6, r1
     8aa:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     8ac:	2800      	cmp	r0, #0
     8ae:	d023      	beq.n	8f8 <usart_sync_write+0x54>
     8b0:	2900      	cmp	r1, #0
     8b2:	d023      	beq.n	8fc <usart_sync_write+0x58>
     8b4:	2a00      	cmp	r2, #0
     8b6:	d123      	bne.n	900 <usart_sync_write+0x5c>
     8b8:	2000      	movs	r0, #0
     8ba:	22f1      	movs	r2, #241	; 0xf1
     8bc:	4911      	ldr	r1, [pc, #68]	; (904 <usart_sync_write+0x60>)
     8be:	4b12      	ldr	r3, [pc, #72]	; (908 <usart_sync_write+0x64>)
     8c0:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     8c2:	002c      	movs	r4, r5
     8c4:	3408      	adds	r4, #8
     8c6:	0020      	movs	r0, r4
     8c8:	4b10      	ldr	r3, [pc, #64]	; (90c <usart_sync_write+0x68>)
     8ca:	4798      	blx	r3
     8cc:	2800      	cmp	r0, #0
     8ce:	d0f8      	beq.n	8c2 <usart_sync_write+0x1e>
     8d0:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     8d2:	5d71      	ldrb	r1, [r6, r5]
     8d4:	0020      	movs	r0, r4
     8d6:	4b0e      	ldr	r3, [pc, #56]	; (910 <usart_sync_write+0x6c>)
     8d8:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     8da:	0020      	movs	r0, r4
     8dc:	4b0b      	ldr	r3, [pc, #44]	; (90c <usart_sync_write+0x68>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	d0fa      	beq.n	8da <usart_sync_write+0x36>
			;
	} while (++offset < length);
     8e4:	3501      	adds	r5, #1
     8e6:	42bd      	cmp	r5, r7
     8e8:	d3f3      	bcc.n	8d2 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     8ea:	0020      	movs	r0, r4
     8ec:	4b09      	ldr	r3, [pc, #36]	; (914 <usart_sync_write+0x70>)
     8ee:	4798      	blx	r3
     8f0:	2800      	cmp	r0, #0
     8f2:	d0fa      	beq.n	8ea <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     8f4:	0028      	movs	r0, r5
     8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     8f8:	2000      	movs	r0, #0
     8fa:	e7de      	b.n	8ba <usart_sync_write+0x16>
     8fc:	2000      	movs	r0, #0
     8fe:	e7dc      	b.n	8ba <usart_sync_write+0x16>
     900:	2001      	movs	r0, #1
     902:	e7da      	b.n	8ba <usart_sync_write+0x16>
     904:	00001ba8 	.word	0x00001ba8
     908:	000009fd 	.word	0x000009fd
     90c:	000011bb 	.word	0x000011bb
     910:	000011ab 	.word	0x000011ab
     914:	000011c5 	.word	0x000011c5

00000918 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     91a:	46ce      	mov	lr, r9
     91c:	4647      	mov	r7, r8
     91e:	b580      	push	{r7, lr}
     920:	1e05      	subs	r5, r0, #0
     922:	4688      	mov	r8, r1
     924:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     926:	d01f      	beq.n	968 <usart_sync_read+0x50>
     928:	2900      	cmp	r1, #0
     92a:	d01f      	beq.n	96c <usart_sync_read+0x54>
     92c:	2a00      	cmp	r2, #0
     92e:	d11f      	bne.n	970 <usart_sync_read+0x58>
     930:	2000      	movs	r0, #0
     932:	2286      	movs	r2, #134	; 0x86
     934:	0052      	lsls	r2, r2, #1
     936:	490f      	ldr	r1, [pc, #60]	; (974 <usart_sync_read+0x5c>)
     938:	4b0f      	ldr	r3, [pc, #60]	; (978 <usart_sync_read+0x60>)
     93a:	4798      	blx	r3
	uint32_t                      offset = 0;
     93c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     93e:	002c      	movs	r4, r5
     940:	3408      	adds	r4, #8
     942:	0020      	movs	r0, r4
     944:	4b0d      	ldr	r3, [pc, #52]	; (97c <usart_sync_read+0x64>)
     946:	4798      	blx	r3
     948:	2800      	cmp	r0, #0
     94a:	d0f8      	beq.n	93e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     94c:	4643      	mov	r3, r8
     94e:	199f      	adds	r7, r3, r6
     950:	0020      	movs	r0, r4
     952:	4b0b      	ldr	r3, [pc, #44]	; (980 <usart_sync_read+0x68>)
     954:	4798      	blx	r3
     956:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     958:	3601      	adds	r6, #1
     95a:	454e      	cmp	r6, r9
     95c:	d3ef      	bcc.n	93e <usart_sync_read+0x26>

	return (int32_t)offset;
}
     95e:	0030      	movs	r0, r6
     960:	bc0c      	pop	{r2, r3}
     962:	4690      	mov	r8, r2
     964:	4699      	mov	r9, r3
     966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     968:	2000      	movs	r0, #0
     96a:	e7e2      	b.n	932 <usart_sync_read+0x1a>
     96c:	2000      	movs	r0, #0
     96e:	e7e0      	b.n	932 <usart_sync_read+0x1a>
     970:	2001      	movs	r0, #1
     972:	e7de      	b.n	932 <usart_sync_read+0x1a>
     974:	00001ba8 	.word	0x00001ba8
     978:	000009fd 	.word	0x000009fd
     97c:	000011d1 	.word	0x000011d1
     980:	000011b3 	.word	0x000011b3

00000984 <usart_sync_init>:
{
     984:	b570      	push	{r4, r5, r6, lr}
     986:	0004      	movs	r4, r0
     988:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     98a:	2800      	cmp	r0, #0
     98c:	d014      	beq.n	9b8 <usart_sync_init+0x34>
     98e:	2900      	cmp	r1, #0
     990:	d010      	beq.n	9b4 <usart_sync_init+0x30>
     992:	2001      	movs	r0, #1
     994:	2234      	movs	r2, #52	; 0x34
     996:	4909      	ldr	r1, [pc, #36]	; (9bc <usart_sync_init+0x38>)
     998:	4b09      	ldr	r3, [pc, #36]	; (9c0 <usart_sync_init+0x3c>)
     99a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     99c:	0020      	movs	r0, r4
     99e:	3008      	adds	r0, #8
     9a0:	0029      	movs	r1, r5
     9a2:	4b08      	ldr	r3, [pc, #32]	; (9c4 <usart_sync_init+0x40>)
     9a4:	4798      	blx	r3
	if (init_status) {
     9a6:	2800      	cmp	r0, #0
     9a8:	d103      	bne.n	9b2 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     9aa:	4b07      	ldr	r3, [pc, #28]	; (9c8 <usart_sync_init+0x44>)
     9ac:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     9ae:	4b07      	ldr	r3, [pc, #28]	; (9cc <usart_sync_init+0x48>)
     9b0:	6023      	str	r3, [r4, #0]
}
     9b2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     9b4:	2000      	movs	r0, #0
     9b6:	e7ed      	b.n	994 <usart_sync_init+0x10>
     9b8:	2000      	movs	r0, #0
     9ba:	e7eb      	b.n	994 <usart_sync_init+0x10>
     9bc:	00001ba8 	.word	0x00001ba8
     9c0:	000009fd 	.word	0x000009fd
     9c4:	0000116d 	.word	0x0000116d
     9c8:	00000919 	.word	0x00000919
     9cc:	000008a5 	.word	0x000008a5

000009d0 <usart_sync_enable>:
{
     9d0:	b510      	push	{r4, lr}
     9d2:	0004      	movs	r4, r0
	ASSERT(descr);
     9d4:	1e43      	subs	r3, r0, #1
     9d6:	4198      	sbcs	r0, r3
     9d8:	b2c0      	uxtb	r0, r0
     9da:	2253      	movs	r2, #83	; 0x53
     9dc:	4904      	ldr	r1, [pc, #16]	; (9f0 <usart_sync_enable+0x20>)
     9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <usart_sync_enable+0x24>)
     9e0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     9e2:	0020      	movs	r0, r4
     9e4:	3008      	adds	r0, #8
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <usart_sync_enable+0x28>)
     9e8:	4798      	blx	r3
}
     9ea:	2000      	movs	r0, #0
     9ec:	bd10      	pop	{r4, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	00001ba8 	.word	0x00001ba8
     9f4:	000009fd 	.word	0x000009fd
     9f8:	00001199 	.word	0x00001199

000009fc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     9fc:	2800      	cmp	r0, #0
     9fe:	d100      	bne.n	a02 <assert+0x6>
		__asm("BKPT #0");
     a00:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a02:	4770      	bx	lr

00000a04 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a04:	6803      	ldr	r3, [r0, #0]
     a06:	2b00      	cmp	r3, #0
     a08:	d003      	beq.n	a12 <is_list_element+0xe>
		if (it == element) {
     a0a:	428b      	cmp	r3, r1
     a0c:	d003      	beq.n	a16 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	e7f9      	b.n	a06 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     a12:	2000      	movs	r0, #0
}
     a14:	4770      	bx	lr
			return true;
     a16:	2001      	movs	r0, #1
     a18:	e7fc      	b.n	a14 <is_list_element+0x10>
	...

00000a1c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     a1c:	b570      	push	{r4, r5, r6, lr}
     a1e:	0004      	movs	r4, r0
     a20:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     a22:	4b06      	ldr	r3, [pc, #24]	; (a3c <list_insert_as_head+0x20>)
     a24:	4798      	blx	r3
     a26:	2301      	movs	r3, #1
     a28:	4058      	eors	r0, r3
     a2a:	b2c0      	uxtb	r0, r0
     a2c:	2239      	movs	r2, #57	; 0x39
     a2e:	4904      	ldr	r1, [pc, #16]	; (a40 <list_insert_as_head+0x24>)
     a30:	4b04      	ldr	r3, [pc, #16]	; (a44 <list_insert_as_head+0x28>)
     a32:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     a34:	6823      	ldr	r3, [r4, #0]
     a36:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     a38:	6025      	str	r5, [r4, #0]
}
     a3a:	bd70      	pop	{r4, r5, r6, pc}
     a3c:	00000a05 	.word	0x00000a05
     a40:	00001bc4 	.word	0x00001bc4
     a44:	000009fd 	.word	0x000009fd

00000a48 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     a48:	6803      	ldr	r3, [r0, #0]
     a4a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     a4c:	6001      	str	r1, [r0, #0]
}
     a4e:	4770      	bx	lr

00000a50 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     a50:	6803      	ldr	r3, [r0, #0]
     a52:	2b00      	cmp	r3, #0
     a54:	d003      	beq.n	a5e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     a56:	681a      	ldr	r2, [r3, #0]
     a58:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     a5a:	0018      	movs	r0, r3
	}

	return NULL;
}
     a5c:	4770      	bx	lr
	return NULL;
     a5e:	2000      	movs	r0, #0
     a60:	e7fc      	b.n	a5c <list_remove_head+0xc>
	...

00000a64 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     a64:	b570      	push	{r4, r5, r6, lr}
     a66:	0004      	movs	r4, r0
     a68:	000e      	movs	r6, r1
     a6a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     a6c:	2800      	cmp	r0, #0
     a6e:	d012      	beq.n	a96 <ringbuffer_init+0x32>
     a70:	2900      	cmp	r1, #0
     a72:	d012      	beq.n	a9a <ringbuffer_init+0x36>
     a74:	2a00      	cmp	r2, #0
     a76:	d112      	bne.n	a9e <ringbuffer_init+0x3a>
     a78:	2000      	movs	r0, #0
     a7a:	2228      	movs	r2, #40	; 0x28
     a7c:	490a      	ldr	r1, [pc, #40]	; (aa8 <ringbuffer_init+0x44>)
     a7e:	4b0b      	ldr	r3, [pc, #44]	; (aac <ringbuffer_init+0x48>)
     a80:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     a82:	1e6b      	subs	r3, r5, #1
     a84:	422b      	tst	r3, r5
     a86:	d10c      	bne.n	aa2 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     a88:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     a8a:	2300      	movs	r3, #0
     a8c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     a8e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     a90:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     a92:	2000      	movs	r0, #0
}
     a94:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     a96:	2000      	movs	r0, #0
     a98:	e7ef      	b.n	a7a <ringbuffer_init+0x16>
     a9a:	2000      	movs	r0, #0
     a9c:	e7ed      	b.n	a7a <ringbuffer_init+0x16>
     a9e:	2001      	movs	r0, #1
     aa0:	e7eb      	b.n	a7a <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     aa2:	200d      	movs	r0, #13
     aa4:	4240      	negs	r0, r0
     aa6:	e7f5      	b.n	a94 <ringbuffer_init+0x30>
     aa8:	00001be4 	.word	0x00001be4
     aac:	000009fd 	.word	0x000009fd

00000ab0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     ab0:	b570      	push	{r4, r5, r6, lr}
     ab2:	0004      	movs	r4, r0
     ab4:	000d      	movs	r5, r1
	ASSERT(rb);
     ab6:	1e43      	subs	r3, r0, #1
     ab8:	4198      	sbcs	r0, r3
     aba:	b2c0      	uxtb	r0, r0
     abc:	2251      	movs	r2, #81	; 0x51
     abe:	490a      	ldr	r1, [pc, #40]	; (ae8 <ringbuffer_put+0x38>)
     ac0:	4b0a      	ldr	r3, [pc, #40]	; (aec <ringbuffer_put+0x3c>)
     ac2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     ac4:	6863      	ldr	r3, [r4, #4]
     ac6:	68e2      	ldr	r2, [r4, #12]
     ac8:	4013      	ands	r3, r2
     aca:	6822      	ldr	r2, [r4, #0]
     acc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     ace:	68e3      	ldr	r3, [r4, #12]
     ad0:	68a2      	ldr	r2, [r4, #8]
     ad2:	1a9a      	subs	r2, r3, r2
     ad4:	6861      	ldr	r1, [r4, #4]
     ad6:	428a      	cmp	r2, r1
     ad8:	d901      	bls.n	ade <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     ada:	1a59      	subs	r1, r3, r1
     adc:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     ade:	3301      	adds	r3, #1
     ae0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     ae2:	2000      	movs	r0, #0
     ae4:	bd70      	pop	{r4, r5, r6, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00001be4 	.word	0x00001be4
     aec:	000009fd 	.word	0x000009fd

00000af0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     af0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     af2:	4a06      	ldr	r2, [pc, #24]	; (b0c <_sbrk+0x1c>)
     af4:	6812      	ldr	r2, [r2, #0]
     af6:	2a00      	cmp	r2, #0
     af8:	d004      	beq.n	b04 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     afa:	4a04      	ldr	r2, [pc, #16]	; (b0c <_sbrk+0x1c>)
     afc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     afe:	18c3      	adds	r3, r0, r3
     b00:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     b02:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     b04:	4902      	ldr	r1, [pc, #8]	; (b10 <_sbrk+0x20>)
     b06:	4a01      	ldr	r2, [pc, #4]	; (b0c <_sbrk+0x1c>)
     b08:	6011      	str	r1, [r2, #0]
     b0a:	e7f6      	b.n	afa <_sbrk+0xa>
     b0c:	200000a8 	.word	0x200000a8
     b10:	200021b8 	.word	0x200021b8

00000b14 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     b14:	2001      	movs	r0, #1
     b16:	4240      	negs	r0, r0
     b18:	4770      	bx	lr

00000b1a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     b1a:	2380      	movs	r3, #128	; 0x80
     b1c:	019b      	lsls	r3, r3, #6
     b1e:	604b      	str	r3, [r1, #4]

	return 0;
}
     b20:	2000      	movs	r0, #0
     b22:	4770      	bx	lr

00000b24 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     b24:	2000      	movs	r0, #0
     b26:	4770      	bx	lr

00000b28 <_adc_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
     b28:	4b02      	ldr	r3, [pc, #8]	; (b34 <_adc_get_hardware_index+0xc>)
     b2a:	469c      	mov	ip, r3
     b2c:	4460      	add	r0, ip
     b2e:	0a80      	lsrs	r0, r0, #10
     b30:	b2c0      	uxtb	r0, r0
}
     b32:	4770      	bx	lr
     b34:	bdffbc00 	.word	0xbdffbc00

00000b38 <_adc_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{
     b38:	b510      	push	{r4, lr}
	return ADC0_IRQn + _adc_get_hardware_index(device->hw);
     b3a:	6940      	ldr	r0, [r0, #20]
     b3c:	4b02      	ldr	r3, [pc, #8]	; (b48 <_adc_get_irq_num+0x10>)
     b3e:	4798      	blx	r3
     b40:	3019      	adds	r0, #25
     b42:	b2c0      	uxtb	r0, r0
}
     b44:	bd10      	pop	{r4, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	00000b29 	.word	0x00000b29

00000b4c <_adc_init_irq_param>:
/**
 * \brief Init irq param with the given afec hardware instance
 */
static void _adc_init_irq_param(const void *const hw, struct _adc_async_device *dev)
{
	if (hw == ADC0) {
     b4c:	4b06      	ldr	r3, [pc, #24]	; (b68 <_adc_init_irq_param+0x1c>)
     b4e:	4298      	cmp	r0, r3
     b50:	d003      	beq.n	b5a <_adc_init_irq_param+0xe>
		_adc0_dev = dev;
	}
	if (hw == ADC1) {
     b52:	4b06      	ldr	r3, [pc, #24]	; (b6c <_adc_init_irq_param+0x20>)
     b54:	4298      	cmp	r0, r3
     b56:	d003      	beq.n	b60 <_adc_init_irq_param+0x14>
		_adc1_dev = dev;
	}
}
     b58:	4770      	bx	lr
		_adc0_dev = dev;
     b5a:	4b05      	ldr	r3, [pc, #20]	; (b70 <_adc_init_irq_param+0x24>)
     b5c:	6019      	str	r1, [r3, #0]
     b5e:	e7f8      	b.n	b52 <_adc_init_irq_param+0x6>
		_adc1_dev = dev;
     b60:	4b03      	ldr	r3, [pc, #12]	; (b70 <_adc_init_irq_param+0x24>)
     b62:	6059      	str	r1, [r3, #4]
}
     b64:	e7f8      	b.n	b58 <_adc_init_irq_param+0xc>
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	42004400 	.word	0x42004400
     b6c:	42004800 	.word	0x42004800
     b70:	200000ac 	.word	0x200000ac

00000b74 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     b74:	b530      	push	{r4, r5, lr}
	uint16_t calib_reg = 0;
	if (hw == ADC0) {
     b76:	4b52      	ldr	r3, [pc, #328]	; (cc0 <_adc_init+0x14c>)
     b78:	4298      	cmp	r0, r3
     b7a:	d100      	bne.n	b7e <_adc_init+0xa>
     b7c:	e089      	b.n	c92 <_adc_init+0x11e>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
	} else if (hw == ADC1) {
     b7e:	4b51      	ldr	r3, [pc, #324]	; (cc4 <_adc_init+0x150>)
     b80:	4298      	cmp	r0, r3
     b82:	d100      	bne.n	b86 <_adc_init+0x12>
     b84:	e090      	b.n	ca8 <_adc_init+0x134>
	uint16_t calib_reg = 0;
     b86:	2200      	movs	r2, #0
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     b88:	8c03      	ldrh	r3, [r0, #32]
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
	}

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     b8a:	07db      	lsls	r3, r3, #31
     b8c:	d414      	bmi.n	bb8 <_adc_init+0x44>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b8e:	8c03      	ldrh	r3, [r0, #32]
     b90:	079b      	lsls	r3, r3, #30
     b92:	d1fc      	bne.n	b8e <_adc_init+0x1a>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     b94:	7803      	ldrb	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     b96:	079b      	lsls	r3, r3, #30
     b98:	d509      	bpl.n	bae <_adc_init+0x3a>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     b9a:	7803      	ldrb	r3, [r0, #0]
     b9c:	2402      	movs	r4, #2
     b9e:	43a3      	bics	r3, r4
     ba0:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ba2:	8c03      	ldrh	r3, [r0, #32]
     ba4:	079b      	lsls	r3, r3, #30
     ba6:	d1fc      	bne.n	ba2 <_adc_init+0x2e>
     ba8:	8c03      	ldrh	r3, [r0, #32]
     baa:	079b      	lsls	r3, r3, #30
     bac:	d4fc      	bmi.n	ba8 <_adc_init+0x34>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     bae:	2301      	movs	r3, #1
     bb0:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bb2:	8c03      	ldrh	r3, [r0, #32]
     bb4:	079b      	lsls	r3, r3, #30
     bb6:	d1fc      	bne.n	bb2 <_adc_init+0x3e>
     bb8:	8c03      	ldrh	r3, [r0, #32]
     bba:	07db      	lsls	r3, r3, #31
     bbc:	d4fc      	bmi.n	bb8 <_adc_init+0x44>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     bbe:	8582      	strh	r2, [r0, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     bc0:	00ca      	lsls	r2, r1, #3
     bc2:	1a52      	subs	r2, r2, r1
     bc4:	0094      	lsls	r4, r2, #2
     bc6:	4b40      	ldr	r3, [pc, #256]	; (cc8 <_adc_init+0x154>)
     bc8:	191b      	adds	r3, r3, r4
     bca:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
     bcc:	7042      	strb	r2, [r0, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     bce:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
     bd0:	7082      	strb	r2, [r0, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     bd2:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
     bd4:	70c2      	strb	r2, [r0, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     bd6:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
     bd8:	8103      	strh	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bda:	8c03      	ldrh	r3, [r0, #32]
     bdc:	055b      	lsls	r3, r3, #21
     bde:	d1fc      	bne.n	bda <_adc_init+0x66>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     be0:	00cb      	lsls	r3, r1, #3
     be2:	1a5b      	subs	r3, r3, r1
     be4:	009a      	lsls	r2, r3, #2
     be6:	4b38      	ldr	r3, [pc, #224]	; (cc8 <_adc_init+0x154>)
     be8:	189b      	adds	r3, r3, r2
     bea:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
     bec:	8143      	strh	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bee:	8c03      	ldrh	r3, [r0, #32]
     bf0:	055b      	lsls	r3, r3, #21
     bf2:	d1fc      	bne.n	bee <_adc_init+0x7a>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     bf4:	00cb      	lsls	r3, r1, #3
     bf6:	1a5b      	subs	r3, r3, r1
     bf8:	009a      	lsls	r2, r3, #2
     bfa:	4b33      	ldr	r3, [pc, #204]	; (cc8 <_adc_init+0x154>)
     bfc:	189b      	adds	r3, r3, r2
     bfe:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
     c00:	7303      	strb	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c02:	8c03      	ldrh	r3, [r0, #32]
     c04:	055b      	lsls	r3, r3, #21
     c06:	d1fc      	bne.n	c02 <_adc_init+0x8e>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     c08:	00cb      	lsls	r3, r1, #3
     c0a:	1a5b      	subs	r3, r3, r1
     c0c:	009a      	lsls	r2, r3, #2
     c0e:	4b2e      	ldr	r3, [pc, #184]	; (cc8 <_adc_init+0x154>)
     c10:	189b      	adds	r3, r3, r2
     c12:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
     c14:	7343      	strb	r3, [r0, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c16:	8c03      	ldrh	r3, [r0, #32]
     c18:	055b      	lsls	r3, r3, #21
     c1a:	d1fc      	bne.n	c16 <_adc_init+0xa2>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     c1c:	00cb      	lsls	r3, r1, #3
     c1e:	1a5b      	subs	r3, r3, r1
     c20:	009a      	lsls	r2, r3, #2
     c22:	4b29      	ldr	r3, [pc, #164]	; (cc8 <_adc_init+0x154>)
     c24:	189b      	adds	r3, r3, r2
     c26:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
     c28:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c2a:	8c03      	ldrh	r3, [r0, #32]
     c2c:	065b      	lsls	r3, r3, #25
     c2e:	d4fc      	bmi.n	c2a <_adc_init+0xb6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     c30:	00cb      	lsls	r3, r1, #3
     c32:	1a5b      	subs	r3, r3, r1
     c34:	009a      	lsls	r2, r3, #2
     c36:	4b24      	ldr	r3, [pc, #144]	; (cc8 <_adc_init+0x154>)
     c38:	189b      	adds	r3, r3, r2
     c3a:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
     c3c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c3e:	8c03      	ldrh	r3, [r0, #32]
     c40:	061b      	lsls	r3, r3, #24
     c42:	d4fc      	bmi.n	c3e <_adc_init+0xca>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     c44:	00cb      	lsls	r3, r1, #3
     c46:	1a5b      	subs	r3, r3, r1
     c48:	009a      	lsls	r2, r3, #2
     c4a:	4b1f      	ldr	r3, [pc, #124]	; (cc8 <_adc_init+0x154>)
     c4c:	189b      	adds	r3, r3, r2
     c4e:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
     c50:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c52:	8c03      	ldrh	r3, [r0, #32]
     c54:	05db      	lsls	r3, r3, #23
     c56:	d4fc      	bmi.n	c52 <_adc_init+0xde>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     c58:	00cb      	lsls	r3, r1, #3
     c5a:	1a5b      	subs	r3, r3, r1
     c5c:	009a      	lsls	r2, r3, #2
     c5e:	4b1a      	ldr	r3, [pc, #104]	; (cc8 <_adc_init+0x154>)
     c60:	189b      	adds	r3, r3, r2
     c62:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
     c64:	8283      	strh	r3, [r0, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c66:	8c03      	ldrh	r3, [r0, #32]
     c68:	059b      	lsls	r3, r3, #22
     c6a:	d4fc      	bmi.n	c66 <_adc_init+0xf2>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     c6c:	4c16      	ldr	r4, [pc, #88]	; (cc8 <_adc_init+0x154>)
     c6e:	00cb      	lsls	r3, r1, #3
     c70:	1a5d      	subs	r5, r3, r1
     c72:	00aa      	lsls	r2, r5, #2
     c74:	18a2      	adds	r2, r4, r2
     c76:	7d15      	ldrb	r5, [r2, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
     c78:	7705      	strb	r5, [r0, #28]
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
     c7a:	6992      	ldr	r2, [r2, #24]
	((Adc *)hw)->SEQCTRL.reg = data;
     c7c:	6282      	str	r2, [r0, #40]	; 0x28
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     c7e:	1a59      	subs	r1, r3, r1
     c80:	008b      	lsls	r3, r1, #2
     c82:	18e4      	adds	r4, r4, r3
     c84:	7863      	ldrb	r3, [r4, #1]
	((Adc *)hw)->CTRLA.reg = data;
     c86:	7003      	strb	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c88:	8c03      	ldrh	r3, [r0, #32]
     c8a:	079b      	lsls	r3, r3, #30
     c8c:	d1fc      	bne.n	c88 <_adc_init+0x114>

	return ERR_NONE;
}
     c8e:	2000      	movs	r0, #0
     c90:	bd30      	pop	{r4, r5, pc}
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     c92:	4b0e      	ldr	r3, [pc, #56]	; (ccc <_adc_init+0x158>)
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	021a      	lsls	r2, r3, #8
     c98:	24e0      	movs	r4, #224	; 0xe0
     c9a:	00e4      	lsls	r4, r4, #3
     c9c:	4014      	ands	r4, r2
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
     c9e:	08db      	lsrs	r3, r3, #3
     ca0:	2207      	movs	r2, #7
     ca2:	401a      	ands	r2, r3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
     ca4:	4322      	orrs	r2, r4
     ca6:	e76f      	b.n	b88 <_adc_init+0x14>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     ca8:	4b08      	ldr	r3, [pc, #32]	; (ccc <_adc_init+0x158>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	099a      	lsrs	r2, r3, #6
     cae:	0212      	lsls	r2, r2, #8
     cb0:	24e0      	movs	r4, #224	; 0xe0
     cb2:	00e4      	lsls	r4, r4, #3
     cb4:	4022      	ands	r2, r4
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
     cb6:	0a5b      	lsrs	r3, r3, #9
     cb8:	2407      	movs	r4, #7
     cba:	4023      	ands	r3, r4
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
     cbc:	431a      	orrs	r2, r3
     cbe:	e763      	b.n	b88 <_adc_init+0x14>
     cc0:	42004400 	.word	0x42004400
     cc4:	42004800 	.word	0x42004800
     cc8:	00001c08 	.word	0x00001c08
     ccc:	00806020 	.word	0x00806020

00000cd0 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
     cd0:	b510      	push	{r4, lr}
	void *const hw      = device->hw;
     cd2:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
     cd4:	7991      	ldrb	r1, [r2, #6]
	return ((Adc *)hw)->INTENSET.reg;
     cd6:	7953      	ldrb	r3, [r2, #5]
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
     cd8:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
     cda:	07d9      	lsls	r1, r3, #31
     cdc:	d404      	bmi.n	ce8 <_adc_interrupt_handler+0x18>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
     cde:	0799      	lsls	r1, r3, #30
     ce0:	d40a      	bmi.n	cf8 <_adc_interrupt_handler+0x28>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
     ce2:	075b      	lsls	r3, r3, #29
     ce4:	d40e      	bmi.n	d04 <_adc_interrupt_handler+0x34>
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
     ce6:	bd10      	pop	{r4, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     ce8:	2301      	movs	r3, #1
     cea:	7193      	strb	r3, [r2, #6]
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
     cec:	6883      	ldr	r3, [r0, #8]
	return ((Adc *)hw)->RESULT.reg;
     cee:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     cf0:	b292      	uxth	r2, r2
     cf2:	2100      	movs	r1, #0
     cf4:	4798      	blx	r3
     cf6:	e7f6      	b.n	ce6 <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     cf8:	2302      	movs	r3, #2
     cfa:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.error_cb(device, 0);
     cfc:	6843      	ldr	r3, [r0, #4]
     cfe:	2100      	movs	r1, #0
     d00:	4798      	blx	r3
     d02:	e7f0      	b.n	ce6 <_adc_interrupt_handler+0x16>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
     d04:	2304      	movs	r3, #4
     d06:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.window_cb(device, 0);
     d08:	6803      	ldr	r3, [r0, #0]
     d0a:	2100      	movs	r1, #0
     d0c:	4798      	blx	r3
}
     d0e:	e7ea      	b.n	ce6 <_adc_interrupt_handler+0x16>

00000d10 <_adc_get_regs>:
{
     d10:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     d12:	4b0b      	ldr	r3, [pc, #44]	; (d40 <_adc_get_regs+0x30>)
     d14:	4798      	blx	r3
     d16:	0001      	movs	r1, r0
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     d18:	2000      	movs	r0, #0
     d1a:	2801      	cmp	r0, #1
     d1c:	d809      	bhi.n	d32 <_adc_get_regs+0x22>
		if (_adcs[i].number == n) {
     d1e:	00c3      	lsls	r3, r0, #3
     d20:	1a1b      	subs	r3, r3, r0
     d22:	009a      	lsls	r2, r3, #2
     d24:	4b07      	ldr	r3, [pc, #28]	; (d44 <_adc_get_regs+0x34>)
     d26:	5cd3      	ldrb	r3, [r2, r3]
     d28:	4299      	cmp	r1, r3
     d2a:	d008      	beq.n	d3e <_adc_get_regs+0x2e>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     d2c:	3001      	adds	r0, #1
     d2e:	b2c0      	uxtb	r0, r0
     d30:	e7f3      	b.n	d1a <_adc_get_regs+0xa>
	ASSERT(false);
     d32:	2291      	movs	r2, #145	; 0x91
     d34:	4904      	ldr	r1, [pc, #16]	; (d48 <_adc_get_regs+0x38>)
     d36:	2000      	movs	r0, #0
     d38:	4b04      	ldr	r3, [pc, #16]	; (d4c <_adc_get_regs+0x3c>)
     d3a:	4798      	blx	r3
	return 0;
     d3c:	2000      	movs	r0, #0
}
     d3e:	bd10      	pop	{r4, pc}
     d40:	00000b29 	.word	0x00000b29
     d44:	00001c08 	.word	0x00001c08
     d48:	00001c40 	.word	0x00001c40
     d4c:	000009fd 	.word	0x000009fd

00000d50 <_adc_async_init>:
{
     d50:	b570      	push	{r4, r5, r6, lr}
     d52:	0004      	movs	r4, r0
     d54:	000d      	movs	r5, r1
	ASSERT(device);
     d56:	1e43      	subs	r3, r0, #1
     d58:	4198      	sbcs	r0, r3
     d5a:	b2c0      	uxtb	r0, r0
     d5c:	22f5      	movs	r2, #245	; 0xf5
     d5e:	491e      	ldr	r1, [pc, #120]	; (dd8 <_adc_async_init+0x88>)
     d60:	4b1e      	ldr	r3, [pc, #120]	; (ddc <_adc_async_init+0x8c>)
     d62:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
     d64:	0028      	movs	r0, r5
     d66:	4b1e      	ldr	r3, [pc, #120]	; (de0 <_adc_async_init+0x90>)
     d68:	4798      	blx	r3
     d6a:	0001      	movs	r1, r0
     d6c:	0028      	movs	r0, r5
     d6e:	4b1d      	ldr	r3, [pc, #116]	; (de4 <_adc_async_init+0x94>)
     d70:	4798      	blx	r3
     d72:	1e06      	subs	r6, r0, #0
	if (init_status) {
     d74:	d001      	beq.n	d7a <_adc_async_init+0x2a>
}
     d76:	0030      	movs	r0, r6
     d78:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     d7a:	6165      	str	r5, [r4, #20]
	_adc_init_irq_param(hw, device);
     d7c:	0021      	movs	r1, r4
     d7e:	0028      	movs	r0, r5
     d80:	4b19      	ldr	r3, [pc, #100]	; (de8 <_adc_async_init+0x98>)
     d82:	4798      	blx	r3
	NVIC_DisableIRQ(_adc_get_irq_num(device));
     d84:	0020      	movs	r0, r4
     d86:	4b19      	ldr	r3, [pc, #100]	; (dec <_adc_async_init+0x9c>)
     d88:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     d8a:	0603      	lsls	r3, r0, #24
     d8c:	d40a      	bmi.n	da4 <_adc_async_init+0x54>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d8e:	231f      	movs	r3, #31
     d90:	4018      	ands	r0, r3
     d92:	3b1e      	subs	r3, #30
     d94:	4083      	lsls	r3, r0
     d96:	2280      	movs	r2, #128	; 0x80
     d98:	4915      	ldr	r1, [pc, #84]	; (df0 <_adc_async_init+0xa0>)
     d9a:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
     d9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     da0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device));
     da4:	0020      	movs	r0, r4
     da6:	4b11      	ldr	r3, [pc, #68]	; (dec <_adc_async_init+0x9c>)
     da8:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     daa:	0603      	lsls	r3, r0, #24
     dac:	d407      	bmi.n	dbe <_adc_async_init+0x6e>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dae:	231f      	movs	r3, #31
     db0:	4018      	ands	r0, r3
     db2:	3b1e      	subs	r3, #30
     db4:	4083      	lsls	r3, r0
     db6:	22c0      	movs	r2, #192	; 0xc0
     db8:	0052      	lsls	r2, r2, #1
     dba:	490d      	ldr	r1, [pc, #52]	; (df0 <_adc_async_init+0xa0>)
     dbc:	508b      	str	r3, [r1, r2]
	NVIC_EnableIRQ(_adc_get_irq_num(device));
     dbe:	0020      	movs	r0, r4
     dc0:	4b0a      	ldr	r3, [pc, #40]	; (dec <_adc_async_init+0x9c>)
     dc2:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
     dc4:	0603      	lsls	r3, r0, #24
     dc6:	d4d6      	bmi.n	d76 <_adc_async_init+0x26>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dc8:	231f      	movs	r3, #31
     dca:	4018      	ands	r0, r3
     dcc:	3b1e      	subs	r3, #30
     dce:	4083      	lsls	r3, r0
     dd0:	4a07      	ldr	r2, [pc, #28]	; (df0 <_adc_async_init+0xa0>)
     dd2:	6013      	str	r3, [r2, #0]
     dd4:	e7cf      	b.n	d76 <_adc_async_init+0x26>
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	00001c40 	.word	0x00001c40
     ddc:	000009fd 	.word	0x000009fd
     de0:	00000d11 	.word	0x00000d11
     de4:	00000b75 	.word	0x00000b75
     de8:	00000b4d 	.word	0x00000b4d
     dec:	00000b39 	.word	0x00000b39
     df0:	e000e100 	.word	0xe000e100

00000df4 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     df4:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLC.reg;
     df6:	895a      	ldrh	r2, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     df8:	0912      	lsrs	r2, r2, #4
     dfa:	2303      	movs	r3, #3
     dfc:	4013      	ands	r3, r2
     dfe:	2b03      	cmp	r3, #3
     e00:	d001      	beq.n	e06 <_adc_async_get_data_size+0x12>
     e02:	2002      	movs	r0, #2
}
     e04:	4770      	bx	lr
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     e06:	2001      	movs	r0, #1
     e08:	e7fc      	b.n	e04 <_adc_async_get_data_size+0x10>
	...

00000e0c <ADC0_Handler>:

void ADC0_Handler(void)
{
     e0c:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <ADC0_Handler+0xc>)
     e10:	6818      	ldr	r0, [r3, #0]
     e12:	4b02      	ldr	r3, [pc, #8]	; (e1c <ADC0_Handler+0x10>)
     e14:	4798      	blx	r3
}
     e16:	bd10      	pop	{r4, pc}
     e18:	200000ac 	.word	0x200000ac
     e1c:	00000cd1 	.word	0x00000cd1

00000e20 <ADC1_Handler>:

void ADC1_Handler(void)
{
     e20:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc1_dev);
     e22:	4b02      	ldr	r3, [pc, #8]	; (e2c <ADC1_Handler+0xc>)
     e24:	6858      	ldr	r0, [r3, #4]
     e26:	4b02      	ldr	r3, [pc, #8]	; (e30 <ADC1_Handler+0x10>)
     e28:	4798      	blx	r3
}
     e2a:	bd10      	pop	{r4, pc}
     e2c:	200000ac 	.word	0x200000ac
     e30:	00000cd1 	.word	0x00000cd1

00000e34 <_adc_get_adc_async>:
 * \brief Retrieve ADC async helper functions
 */
void *_adc_get_adc_async(void)
{
	return (void *)NULL;
}
     e34:	2000      	movs	r0, #0
     e36:	4770      	bx	lr

00000e38 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     e38:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     e3a:	4b08      	ldr	r3, [pc, #32]	; (e5c <_init_chip+0x24>)
     e3c:	685a      	ldr	r2, [r3, #4]
     e3e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     e40:	4b07      	ldr	r3, [pc, #28]	; (e60 <_init_chip+0x28>)
     e42:	4798      	blx	r3
	_oscctrl_init_sources();
     e44:	4b07      	ldr	r3, [pc, #28]	; (e64 <_init_chip+0x2c>)
     e46:	4798      	blx	r3
	_mclk_init();
     e48:	4b07      	ldr	r3, [pc, #28]	; (e68 <_init_chip+0x30>)
     e4a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     e4c:	4b07      	ldr	r3, [pc, #28]	; (e6c <_init_chip+0x34>)
     e4e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     e50:	20ff      	movs	r0, #255	; 0xff
     e52:	4b07      	ldr	r3, [pc, #28]	; (e70 <_init_chip+0x38>)
     e54:	4798      	blx	r3

	_div_init();
     e56:	4b07      	ldr	r3, [pc, #28]	; (e74 <_init_chip+0x3c>)
     e58:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     e5a:	bd10      	pop	{r4, pc}
     e5c:	41004000 	.word	0x41004000
     e60:	00000eb9 	.word	0x00000eb9
     e64:	00000ed5 	.word	0x00000ed5
     e68:	00000ead 	.word	0x00000ead
     e6c:	00000f11 	.word	0x00000f11
     e70:	00000e89 	.word	0x00000e89
     e74:	00000e79 	.word	0x00000e79

00000e78 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     e78:	2290      	movs	r2, #144	; 0x90
     e7a:	05d2      	lsls	r2, r2, #23
     e7c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     e7e:	2102      	movs	r1, #2
     e80:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     e82:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     e84:	4770      	bx	lr
	...

00000e88 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e88:	07c3      	lsls	r3, r0, #31
     e8a:	d507      	bpl.n	e9c <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e8c:	4a04      	ldr	r2, [pc, #16]	; (ea0 <_gclk_init_generators_by_fref+0x18>)
     e8e:	4b05      	ldr	r3, [pc, #20]	; (ea4 <_gclk_init_generators_by_fref+0x1c>)
     e90:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e92:	4b04      	ldr	r3, [pc, #16]	; (ea4 <_gclk_init_generators_by_fref+0x1c>)
     e94:	685a      	ldr	r2, [r3, #4]
     e96:	4b04      	ldr	r3, [pc, #16]	; (ea8 <_gclk_init_generators_by_fref+0x20>)
     e98:	421a      	tst	r2, r3
     e9a:	d1fa      	bne.n	e92 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     e9c:	4770      	bx	lr
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	00010106 	.word	0x00010106
     ea4:	40001c00 	.word	0x40001c00
     ea8:	000007fd 	.word	0x000007fd

00000eac <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     eac:	2201      	movs	r2, #1
     eae:	4b01      	ldr	r3, [pc, #4]	; (eb4 <_mclk_init+0x8>)
     eb0:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     eb2:	4770      	bx	lr
     eb4:	40000800 	.word	0x40000800

00000eb8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     eb8:	4a05      	ldr	r2, [pc, #20]	; (ed0 <_osc32kctrl_init_sources+0x18>)
     eba:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     ebc:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     ebe:	021b      	lsls	r3, r3, #8
     ec0:	21f8      	movs	r1, #248	; 0xf8
     ec2:	0149      	lsls	r1, r1, #5
     ec4:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     ec6:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     ec8:	2300      	movs	r3, #0
     eca:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     ecc:	4770      	bx	lr
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	40001400 	.word	0x40001400

00000ed4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
     ed4:	4b0d      	ldr	r3, [pc, #52]	; (f0c <_oscctrl_init_sources+0x38>)
     ed6:	2202      	movs	r2, #2
     ed8:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
     eda:	3209      	adds	r2, #9
     edc:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
     ede:	4b0b      	ldr	r3, [pc, #44]	; (f0c <_oscctrl_init_sources+0x38>)
     ee0:	699b      	ldr	r3, [r3, #24]
     ee2:	075b      	lsls	r3, r3, #29
     ee4:	d4fb      	bmi.n	ede <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
     ee6:	4b09      	ldr	r3, [pc, #36]	; (f0c <_oscctrl_init_sources+0x38>)
     ee8:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
     eea:	075b      	lsls	r3, r3, #29
     eec:	d4fb      	bmi.n	ee6 <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
     eee:	2207      	movs	r2, #7
     ef0:	4b06      	ldr	r3, [pc, #24]	; (f0c <_oscctrl_init_sources+0x38>)
     ef2:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
     ef4:	4b05      	ldr	r3, [pc, #20]	; (f0c <_oscctrl_init_sources+0x38>)
     ef6:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
     ef8:	06db      	lsls	r3, r3, #27
     efa:	d5fb      	bpl.n	ef4 <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
     efc:	4a03      	ldr	r2, [pc, #12]	; (f0c <_oscctrl_init_sources+0x38>)
     efe:	7d13      	ldrb	r3, [r2, #20]
     f00:	2180      	movs	r1, #128	; 0x80
     f02:	4249      	negs	r1, r1
     f04:	430b      	orrs	r3, r1
     f06:	b2db      	uxtb	r3, r3
     f08:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f0a:	4770      	bx	lr
     f0c:	40001000 	.word	0x40001000

00000f10 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f10:	4770      	bx	lr

00000f12 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     f12:	b510      	push	{r4, lr}
     f14:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     f16:	68c3      	ldr	r3, [r0, #12]
     f18:	899b      	ldrh	r3, [r3, #12]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     f1a:	05db      	lsls	r3, r3, #23
     f1c:	d507      	bpl.n	f2e <_rtc_timer_interrupt_handler+0x1c>
		if (dev->timer_cb.period_expired) {
     f1e:	6803      	ldr	r3, [r0, #0]
     f20:	2b00      	cmp	r3, #0
     f22:	d000      	beq.n	f26 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     f24:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     f26:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     f28:	2280      	movs	r2, #128	; 0x80
     f2a:	0052      	lsls	r2, r2, #1
     f2c:	819a      	strh	r2, [r3, #12]
	}
}
     f2e:	bd10      	pop	{r4, pc}

00000f30 <_timer_init>:
{
     f30:	b570      	push	{r4, r5, r6, lr}
     f32:	0004      	movs	r4, r0
     f34:	000d      	movs	r5, r1
	ASSERT(dev);
     f36:	1e43      	subs	r3, r0, #1
     f38:	4198      	sbcs	r0, r3
     f3a:	b2c0      	uxtb	r0, r0
     f3c:	2230      	movs	r2, #48	; 0x30
     f3e:	4911      	ldr	r1, [pc, #68]	; (f84 <_timer_init+0x54>)
     f40:	4b11      	ldr	r3, [pc, #68]	; (f88 <_timer_init+0x58>)
     f42:	4798      	blx	r3
	dev->hw = hw;
     f44:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     f46:	2301      	movs	r3, #1
     f48:	802b      	strh	r3, [r5, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     f4a:	692a      	ldr	r2, [r5, #16]
     f4c:	4b0f      	ldr	r3, [pc, #60]	; (f8c <_timer_init+0x5c>)
     f4e:	421a      	tst	r2, r3
     f50:	d1fb      	bne.n	f4a <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     f52:	68e3      	ldr	r3, [r4, #12]
     f54:	691a      	ldr	r2, [r3, #16]
     f56:	07d2      	lsls	r2, r2, #31
     f58:	d4fc      	bmi.n	f54 <_timer_init+0x24>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     f5a:	4a0d      	ldr	r2, [pc, #52]	; (f90 <_timer_init+0x60>)
     f5c:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     f5e:	6919      	ldr	r1, [r3, #16]
     f60:	4a0a      	ldr	r2, [pc, #40]	; (f8c <_timer_init+0x5c>)
     f62:	4211      	tst	r1, r2
     f64:	d1fb      	bne.n	f5e <_timer_init+0x2e>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     f66:	68e2      	ldr	r2, [r4, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     f68:	2320      	movs	r3, #32
     f6a:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     f6c:	6913      	ldr	r3, [r2, #16]
     f6e:	069b      	lsls	r3, r3, #26
     f70:	d4fc      	bmi.n	f6c <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     f72:	2380      	movs	r3, #128	; 0x80
     f74:	005b      	lsls	r3, r3, #1
     f76:	68e2      	ldr	r2, [r4, #12]
     f78:	8153      	strh	r3, [r2, #10]
	_rtc_dev = dev;
     f7a:	4b06      	ldr	r3, [pc, #24]	; (f94 <_timer_init+0x64>)
     f7c:	601c      	str	r4, [r3, #0]
}
     f7e:	2000      	movs	r0, #0
     f80:	bd70      	pop	{r4, r5, r6, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	00001c58 	.word	0x00001c58
     f88:	000009fd 	.word	0x000009fd
     f8c:	00008003 	.word	0x00008003
     f90:	ffff8080 	.word	0xffff8080
     f94:	200000b4 	.word	0x200000b4

00000f98 <_timer_start>:
{
     f98:	b510      	push	{r4, lr}
     f9a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     f9c:	d020      	beq.n	fe0 <_timer_start+0x48>
     f9e:	68c3      	ldr	r3, [r0, #12]
     fa0:	2b00      	cmp	r3, #0
     fa2:	d01b      	beq.n	fdc <_timer_start+0x44>
     fa4:	2001      	movs	r0, #1
     fa6:	225c      	movs	r2, #92	; 0x5c
     fa8:	490e      	ldr	r1, [pc, #56]	; (fe4 <_timer_start+0x4c>)
     faa:	4b0f      	ldr	r3, [pc, #60]	; (fe8 <_timer_start+0x50>)
     fac:	4798      	blx	r3
     fae:	2204      	movs	r2, #4
     fb0:	4b0e      	ldr	r3, [pc, #56]	; (fec <_timer_start+0x54>)
     fb2:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
     fb4:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
     fb6:	2300      	movs	r3, #0
     fb8:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fba:	6913      	ldr	r3, [r2, #16]
     fbc:	071b      	lsls	r3, r3, #28
     fbe:	d4fc      	bmi.n	fba <_timer_start+0x22>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
     fc0:	68e3      	ldr	r3, [r4, #12]
     fc2:	691a      	ldr	r2, [r3, #16]
     fc4:	0712      	lsls	r2, r2, #28
     fc6:	d4fc      	bmi.n	fc2 <_timer_start+0x2a>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
     fc8:	881a      	ldrh	r2, [r3, #0]
     fca:	2102      	movs	r1, #2
     fcc:	430a      	orrs	r2, r1
     fce:	b292      	uxth	r2, r2
     fd0:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     fd2:	6919      	ldr	r1, [r3, #16]
     fd4:	4a06      	ldr	r2, [pc, #24]	; (ff0 <_timer_start+0x58>)
     fd6:	4211      	tst	r1, r2
     fd8:	d1fb      	bne.n	fd2 <_timer_start+0x3a>
}
     fda:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     fdc:	2000      	movs	r0, #0
     fde:	e7e2      	b.n	fa6 <_timer_start+0xe>
     fe0:	2000      	movs	r0, #0
     fe2:	e7e0      	b.n	fa6 <_timer_start+0xe>
     fe4:	00001c58 	.word	0x00001c58
     fe8:	000009fd 	.word	0x000009fd
     fec:	e000e100 	.word	0xe000e100
     ff0:	00008003 	.word	0x00008003

00000ff4 <_timer_is_started>:
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
     ff4:	68c1      	ldr	r1, [r0, #12]
     ff6:	690a      	ldr	r2, [r1, #16]
     ff8:	4b03      	ldr	r3, [pc, #12]	; (1008 <_timer_is_started+0x14>)
     ffa:	421a      	tst	r2, r3
     ffc:	d1fb      	bne.n	ff6 <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
     ffe:	880b      	ldrh	r3, [r1, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    1000:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1002:	2001      	movs	r0, #1
    1004:	4018      	ands	r0, r3
}
    1006:	4770      	bx	lr
    1008:	00008003 	.word	0x00008003

0000100c <_timer_set_irq>:
}
    100c:	4770      	bx	lr

0000100e <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    100e:	2000      	movs	r0, #0
    1010:	4770      	bx	lr
	...

00001014 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1014:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <RTC_Handler+0xc>)
    1018:	6818      	ldr	r0, [r3, #0]
    101a:	4b02      	ldr	r3, [pc, #8]	; (1024 <RTC_Handler+0x10>)
    101c:	4798      	blx	r3
}
    101e:	bd10      	pop	{r4, pc}
    1020:	200000b4 	.word	0x200000b4
    1024:	00000f13 	.word	0x00000f13

00001028 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1028:	4b02      	ldr	r3, [pc, #8]	; (1034 <_sercom_get_hardware_index+0xc>)
    102a:	469c      	mov	ip, r3
    102c:	4460      	add	r0, ip
    102e:	0a80      	lsrs	r0, r0, #10
    1030:	b2c0      	uxtb	r0, r0
}
    1032:	4770      	bx	lr
    1034:	bdfffc00 	.word	0xbdfffc00

00001038 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1038:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    103a:	4b0b      	ldr	r3, [pc, #44]	; (1068 <_get_sercom_index+0x30>)
    103c:	4798      	blx	r3
    103e:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1040:	2000      	movs	r0, #0
    1042:	2800      	cmp	r0, #0
    1044:	d006      	beq.n	1054 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1046:	4a09      	ldr	r2, [pc, #36]	; (106c <_get_sercom_index+0x34>)
    1048:	4909      	ldr	r1, [pc, #36]	; (1070 <_get_sercom_index+0x38>)
    104a:	2000      	movs	r0, #0
    104c:	4b09      	ldr	r3, [pc, #36]	; (1074 <_get_sercom_index+0x3c>)
    104e:	4798      	blx	r3
	return 0;
    1050:	2000      	movs	r0, #0
}
    1052:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1054:	0083      	lsls	r3, r0, #2
    1056:	181b      	adds	r3, r3, r0
    1058:	0099      	lsls	r1, r3, #2
    105a:	4b07      	ldr	r3, [pc, #28]	; (1078 <_get_sercom_index+0x40>)
    105c:	5ccb      	ldrb	r3, [r1, r3]
    105e:	429a      	cmp	r2, r3
    1060:	d0f7      	beq.n	1052 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1062:	3001      	adds	r0, #1
    1064:	b2c0      	uxtb	r0, r0
    1066:	e7ec      	b.n	1042 <_get_sercom_index+0xa>
    1068:	00001029 	.word	0x00001029
    106c:	0000023a 	.word	0x0000023a
    1070:	00001cc0 	.word	0x00001cc0
    1074:	000009fd 	.word	0x000009fd
    1078:	00001c70 	.word	0x00001c70

0000107c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    107c:	b570      	push	{r4, r5, r6, lr}
    107e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1080:	4b38      	ldr	r3, [pc, #224]	; (1164 <_usart_init+0xe8>)
    1082:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1084:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1086:	07db      	lsls	r3, r3, #31
    1088:	d41d      	bmi.n	10c6 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    108a:	0083      	lsls	r3, r0, #2
    108c:	181b      	adds	r3, r3, r0
    108e:	009a      	lsls	r2, r3, #2
    1090:	4b35      	ldr	r3, [pc, #212]	; (1168 <_usart_init+0xec>)
    1092:	189b      	adds	r3, r3, r2
    1094:	685a      	ldr	r2, [r3, #4]
    1096:	231c      	movs	r3, #28
    1098:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    109a:	69e3      	ldr	r3, [r4, #28]
    109c:	079b      	lsls	r3, r3, #30
    109e:	d1fc      	bne.n	109a <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    10a0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    10a2:	079b      	lsls	r3, r3, #30
    10a4:	d509      	bpl.n	10ba <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    10a6:	6823      	ldr	r3, [r4, #0]
    10a8:	2102      	movs	r1, #2
    10aa:	438b      	bics	r3, r1
    10ac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ae:	69e3      	ldr	r3, [r4, #28]
    10b0:	079b      	lsls	r3, r3, #30
    10b2:	d1fc      	bne.n	10ae <_usart_init+0x32>
    10b4:	69e3      	ldr	r3, [r4, #28]
    10b6:	079b      	lsls	r3, r3, #30
    10b8:	d4fc      	bmi.n	10b4 <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    10ba:	2301      	movs	r3, #1
    10bc:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10be:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10c0:	69e3      	ldr	r3, [r4, #28]
    10c2:	079b      	lsls	r3, r3, #30
    10c4:	d1fc      	bne.n	10c0 <_usart_init+0x44>
    10c6:	69e3      	ldr	r3, [r4, #28]
    10c8:	07db      	lsls	r3, r3, #31
    10ca:	d4fc      	bmi.n	10c6 <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    10cc:	0083      	lsls	r3, r0, #2
    10ce:	181b      	adds	r3, r3, r0
    10d0:	009a      	lsls	r2, r3, #2
    10d2:	4b25      	ldr	r3, [pc, #148]	; (1168 <_usart_init+0xec>)
    10d4:	189b      	adds	r3, r3, r2
    10d6:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10d8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10da:	69e3      	ldr	r3, [r4, #28]
    10dc:	079b      	lsls	r3, r3, #30
    10de:	d1fc      	bne.n	10da <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    10e0:	0083      	lsls	r3, r0, #2
    10e2:	181b      	adds	r3, r3, r0
    10e4:	009a      	lsls	r2, r3, #2
    10e6:	4b20      	ldr	r3, [pc, #128]	; (1168 <_usart_init+0xec>)
    10e8:	189b      	adds	r3, r3, r2
    10ea:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    10ec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ee:	69e3      	ldr	r3, [r4, #28]
    10f0:	075b      	lsls	r3, r3, #29
    10f2:	d1fc      	bne.n	10ee <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    10f4:	0083      	lsls	r3, r0, #2
    10f6:	181b      	adds	r3, r3, r0
    10f8:	009a      	lsls	r2, r3, #2
    10fa:	4b1b      	ldr	r3, [pc, #108]	; (1168 <_usart_init+0xec>)
    10fc:	189b      	adds	r3, r3, r2
    10fe:	685b      	ldr	r3, [r3, #4]
    1100:	049a      	lsls	r2, r3, #18
    1102:	d40b      	bmi.n	111c <_usart_init+0xa0>
    1104:	22c0      	movs	r2, #192	; 0xc0
    1106:	01d2      	lsls	r2, r2, #7
    1108:	4213      	tst	r3, r2
    110a:	d107      	bne.n	111c <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    110c:	0083      	lsls	r3, r0, #2
    110e:	181b      	adds	r3, r3, r0
    1110:	009a      	lsls	r2, r3, #2
    1112:	4b15      	ldr	r3, [pc, #84]	; (1168 <_usart_init+0xec>)
    1114:	189b      	adds	r3, r3, r2
    1116:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1118:	81a3      	strh	r3, [r4, #12]
    111a:	e015      	b.n	1148 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    111c:	0083      	lsls	r3, r0, #2
    111e:	181b      	adds	r3, r3, r0
    1120:	009a      	lsls	r2, r3, #2
    1122:	4911      	ldr	r1, [pc, #68]	; (1168 <_usart_init+0xec>)
    1124:	1889      	adds	r1, r1, r2
    1126:	898a      	ldrh	r2, [r1, #12]
    1128:	89a3      	ldrh	r3, [r4, #12]
    112a:	04d2      	lsls	r2, r2, #19
    112c:	0cd2      	lsrs	r2, r2, #19
    112e:	0b5b      	lsrs	r3, r3, #13
    1130:	035b      	lsls	r3, r3, #13
    1132:	4313      	orrs	r3, r2
    1134:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1136:	7b8b      	ldrb	r3, [r1, #14]
    1138:	2207      	movs	r2, #7
    113a:	401a      	ands	r2, r3
    113c:	89a3      	ldrh	r3, [r4, #12]
    113e:	0352      	lsls	r2, r2, #13
    1140:	04db      	lsls	r3, r3, #19
    1142:	0cdb      	lsrs	r3, r3, #19
    1144:	4313      	orrs	r3, r2
    1146:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1148:	4a07      	ldr	r2, [pc, #28]	; (1168 <_usart_init+0xec>)
    114a:	0083      	lsls	r3, r0, #2
    114c:	181d      	adds	r5, r3, r0
    114e:	00a9      	lsls	r1, r5, #2
    1150:	000d      	movs	r5, r1
    1152:	1851      	adds	r1, r2, r1
    1154:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1156:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1158:	1952      	adds	r2, r2, r5
    115a:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    115c:	2330      	movs	r3, #48	; 0x30
    115e:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
    1160:	2000      	movs	r0, #0
    1162:	bd70      	pop	{r4, r5, r6, pc}
    1164:	00001039 	.word	0x00001039
    1168:	00001c70 	.word	0x00001c70

0000116c <_usart_sync_init>:
{
    116c:	b570      	push	{r4, r5, r6, lr}
    116e:	0005      	movs	r5, r0
    1170:	000c      	movs	r4, r1
	ASSERT(device);
    1172:	1e43      	subs	r3, r0, #1
    1174:	4198      	sbcs	r0, r3
    1176:	b2c0      	uxtb	r0, r0
    1178:	22b4      	movs	r2, #180	; 0xb4
    117a:	4904      	ldr	r1, [pc, #16]	; (118c <_usart_sync_init+0x20>)
    117c:	4b04      	ldr	r3, [pc, #16]	; (1190 <_usart_sync_init+0x24>)
    117e:	4798      	blx	r3
	device->hw = hw;
    1180:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1182:	0020      	movs	r0, r4
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <_usart_sync_init+0x28>)
    1186:	4798      	blx	r3
}
    1188:	bd70      	pop	{r4, r5, r6, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00001cc0 	.word	0x00001cc0
    1190:	000009fd 	.word	0x000009fd
    1194:	0000107d 	.word	0x0000107d

00001198 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1198:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    119a:	6813      	ldr	r3, [r2, #0]
    119c:	2102      	movs	r1, #2
    119e:	430b      	orrs	r3, r1
    11a0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11a2:	69d3      	ldr	r3, [r2, #28]
    11a4:	079b      	lsls	r3, r3, #30
    11a6:	d1fc      	bne.n	11a2 <_usart_sync_enable+0xa>
}
    11a8:	4770      	bx	lr

000011aa <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    11aa:	6803      	ldr	r3, [r0, #0]
    11ac:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    11ae:	8519      	strh	r1, [r3, #40]	; 0x28
}
    11b0:	4770      	bx	lr

000011b2 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    11b2:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    11b4:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    11b6:	b2c0      	uxtb	r0, r0
}
    11b8:	4770      	bx	lr

000011ba <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    11ba:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    11bc:	7e18      	ldrb	r0, [r3, #24]
    11be:	2301      	movs	r3, #1
    11c0:	4018      	ands	r0, r3
}
    11c2:	4770      	bx	lr

000011c4 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    11c4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    11c6:	7e1b      	ldrb	r3, [r3, #24]
    11c8:	085b      	lsrs	r3, r3, #1
    11ca:	2001      	movs	r0, #1
    11cc:	4018      	ands	r0, r3
}
    11ce:	4770      	bx	lr

000011d0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    11d0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    11d2:	7e1b      	ldrb	r3, [r3, #24]
    11d4:	089b      	lsrs	r3, r3, #2
    11d6:	2001      	movs	r0, #1
    11d8:	4018      	ands	r0, r3
}
    11da:	4770      	bx	lr

000011dc <TIMER_0_task1_cb>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    11dc:	2280      	movs	r2, #128	; 0x80
    11de:	0212      	lsls	r2, r2, #8
    11e0:	23c0      	movs	r3, #192	; 0xc0
    11e2:	05db      	lsls	r3, r3, #23
    11e4:	619a      	str	r2, [r3, #24]
static struct timer_task TIMER_0_task2;
static struct timer_task TIMER_0_task3;
static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(LED0,true);
};
    11e6:	4770      	bx	lr

000011e8 <TIMER_0_task2_cb>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    11e8:	2280      	movs	r2, #128	; 0x80
    11ea:	0212      	lsls	r2, r2, #8
    11ec:	23c0      	movs	r3, #192	; 0xc0
    11ee:	05db      	lsls	r3, r3, #23
    11f0:	615a      	str	r2, [r3, #20]

static void TIMER_0_task2_cb(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(LED0,false);
};
    11f2:	4770      	bx	lr

000011f4 <TIMER_0_task3_cb>:

static void TIMER_0_task3_cb(const struct timer_task *const timer_task)
{
};
    11f4:	4770      	bx	lr
	...

000011f8 <main>:
int main(void)
{
    11f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    11fa:	4b13      	ldr	r3, [pc, #76]	; (1248 <main+0x50>)
    11fc:	4798      	blx	r3
	TIMER_0_task1.interval = 4;
    11fe:	4c13      	ldr	r4, [pc, #76]	; (124c <main+0x54>)
    1200:	2304      	movs	r3, #4
    1202:	60a3      	str	r3, [r4, #8]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    1204:	4b12      	ldr	r3, [pc, #72]	; (1250 <main+0x58>)
    1206:	60e3      	str	r3, [r4, #12]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    1208:	2301      	movs	r3, #1
    120a:	7423      	strb	r3, [r4, #16]
	
	TIMER_0_task2.interval = 9;
    120c:	2209      	movs	r2, #9
    120e:	61e2      	str	r2, [r4, #28]
	TIMER_0_task2.cb       = TIMER_0_task2_cb;
    1210:	4a10      	ldr	r2, [pc, #64]	; (1254 <main+0x5c>)
    1212:	6222      	str	r2, [r4, #32]
	TIMER_0_task2.mode     = TIMER_TASK_REPEAT;
    1214:	2224      	movs	r2, #36	; 0x24
    1216:	54a3      	strb	r3, [r4, r2]
	
	TIMER_0_task3.interval = 25;
    1218:	3a0b      	subs	r2, #11
    121a:	6322      	str	r2, [r4, #48]	; 0x30
	TIMER_0_task3.cb       = TIMER_0_task3_cb;
    121c:	4a0e      	ldr	r2, [pc, #56]	; (1258 <main+0x60>)
    121e:	6362      	str	r2, [r4, #52]	; 0x34
	TIMER_0_task3.mode     = TIMER_TASK_REPEAT;
    1220:	0027      	movs	r7, r4
    1222:	3728      	adds	r7, #40	; 0x28
    1224:	743b      	strb	r3, [r7, #16]
	
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    1226:	4d0d      	ldr	r5, [pc, #52]	; (125c <main+0x64>)
    1228:	0021      	movs	r1, r4
    122a:	0028      	movs	r0, r5
    122c:	4e0c      	ldr	r6, [pc, #48]	; (1260 <main+0x68>)
    122e:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task2);
    1230:	0021      	movs	r1, r4
    1232:	3114      	adds	r1, #20
    1234:	0028      	movs	r0, r5
    1236:	47b0      	blx	r6
	timer_add_task(&TIMER_0, &TIMER_0_task3);
    1238:	0039      	movs	r1, r7
    123a:	0028      	movs	r0, r5
    123c:	47b0      	blx	r6
	timer_start(&TIMER_0);
    123e:	0028      	movs	r0, r5
    1240:	4b08      	ldr	r3, [pc, #32]	; (1264 <main+0x6c>)
    1242:	4798      	blx	r3
    1244:	e7fe      	b.n	1244 <main+0x4c>
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	0000011d 	.word	0x0000011d
    124c:	200000b8 	.word	0x200000b8
    1250:	000011dd 	.word	0x000011dd
    1254:	000011e9 	.word	0x000011e9
    1258:	000011f5 	.word	0x000011f5
    125c:	20000194 	.word	0x20000194
    1260:	000007f5 	.word	0x000007f5
    1264:	000007b9 	.word	0x000007b9

00001268 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1268:	b510      	push	{r4, lr}
    126a:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    126c:	2800      	cmp	r0, #0
    126e:	d109      	bne.n	1284 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1270:	0011      	movs	r1, r2
    1272:	0018      	movs	r0, r3
    1274:	4b05      	ldr	r3, [pc, #20]	; (128c <_read+0x24>)
    1276:	4798      	blx	r3
	if (n < 0) {
    1278:	2800      	cmp	r0, #0
    127a:	db00      	blt.n	127e <_read+0x16>
		return -1;
	}

	return n;
}
    127c:	bd10      	pop	{r4, pc}
		return -1;
    127e:	2001      	movs	r0, #1
    1280:	4240      	negs	r0, r0
    1282:	e7fb      	b.n	127c <_read+0x14>
		return -1;
    1284:	2001      	movs	r0, #1
    1286:	4240      	negs	r0, r0
    1288:	e7f8      	b.n	127c <_read+0x14>
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	000012e5 	.word	0x000012e5

00001290 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1290:	b510      	push	{r4, lr}
    1292:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1294:	3801      	subs	r0, #1
    1296:	2802      	cmp	r0, #2
    1298:	d809      	bhi.n	12ae <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    129a:	0011      	movs	r1, r2
    129c:	0018      	movs	r0, r3
    129e:	4b05      	ldr	r3, [pc, #20]	; (12b4 <_write+0x24>)
    12a0:	4798      	blx	r3
	if (n < 0) {
    12a2:	2800      	cmp	r0, #0
    12a4:	db00      	blt.n	12a8 <_write+0x18>
		return -1;
	}

	return n;
}
    12a6:	bd10      	pop	{r4, pc}
		return -1;
    12a8:	2001      	movs	r0, #1
    12aa:	4240      	negs	r0, r0
    12ac:	e7fb      	b.n	12a6 <_write+0x16>
		return -1;
    12ae:	2001      	movs	r0, #1
    12b0:	4240      	negs	r0, r0
    12b2:	e7f8      	b.n	12a6 <_write+0x16>
    12b4:	00001309 	.word	0x00001309

000012b8 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    12b8:	b570      	push	{r4, r5, r6, lr}
    12ba:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    12bc:	4d06      	ldr	r5, [pc, #24]	; (12d8 <stdio_io_init+0x20>)
    12be:	682b      	ldr	r3, [r5, #0]
    12c0:	6898      	ldr	r0, [r3, #8]
    12c2:	2100      	movs	r1, #0
    12c4:	4c05      	ldr	r4, [pc, #20]	; (12dc <stdio_io_init+0x24>)
    12c6:	47a0      	blx	r4
	setbuf(stdin, NULL);
    12c8:	682b      	ldr	r3, [r5, #0]
    12ca:	6858      	ldr	r0, [r3, #4]
    12cc:	2100      	movs	r1, #0
    12ce:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    12d0:	4b03      	ldr	r3, [pc, #12]	; (12e0 <stdio_io_init+0x28>)
    12d2:	601e      	str	r6, [r3, #0]
}
    12d4:	bd70      	pop	{r4, r5, r6, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	20000000 	.word	0x20000000
    12dc:	000013a5 	.word	0x000013a5
    12e0:	200000f4 	.word	0x200000f4

000012e4 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    12e4:	b510      	push	{r4, lr}
    12e6:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    12e8:	4b05      	ldr	r3, [pc, #20]	; (1300 <stdio_io_read+0x1c>)
    12ea:	6818      	ldr	r0, [r3, #0]
    12ec:	2800      	cmp	r0, #0
    12ee:	d004      	beq.n	12fa <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    12f0:	b28a      	uxth	r2, r1
    12f2:	0021      	movs	r1, r4
    12f4:	4b03      	ldr	r3, [pc, #12]	; (1304 <stdio_io_read+0x20>)
    12f6:	4798      	blx	r3
}
    12f8:	bd10      	pop	{r4, pc}
		return 0;
    12fa:	2000      	movs	r0, #0
    12fc:	e7fc      	b.n	12f8 <stdio_io_read+0x14>
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	200000f4 	.word	0x200000f4
    1304:	00000681 	.word	0x00000681

00001308 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1308:	b510      	push	{r4, lr}
    130a:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    130c:	4b05      	ldr	r3, [pc, #20]	; (1324 <stdio_io_write+0x1c>)
    130e:	6818      	ldr	r0, [r3, #0]
    1310:	2800      	cmp	r0, #0
    1312:	d004      	beq.n	131e <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1314:	b28a      	uxth	r2, r1
    1316:	0021      	movs	r1, r4
    1318:	4b03      	ldr	r3, [pc, #12]	; (1328 <stdio_io_write+0x20>)
    131a:	4798      	blx	r3
}
    131c:	bd10      	pop	{r4, pc}
		return 0;
    131e:	2000      	movs	r0, #0
    1320:	e7fc      	b.n	131c <stdio_io_write+0x14>
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	200000f4 	.word	0x200000f4
    1328:	00000649 	.word	0x00000649

0000132c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    132c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    132e:	4c04      	ldr	r4, [pc, #16]	; (1340 <stdio_redirect_init+0x14>)
    1330:	0020      	movs	r0, r4
    1332:	4b04      	ldr	r3, [pc, #16]	; (1344 <stdio_redirect_init+0x18>)
    1334:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1336:	0020      	movs	r0, r4
    1338:	4b03      	ldr	r3, [pc, #12]	; (1348 <stdio_redirect_init+0x1c>)
    133a:	4798      	blx	r3
}
    133c:	bd10      	pop	{r4, pc}
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	20000100 	.word	0x20000100
    1344:	000009d1 	.word	0x000009d1
    1348:	000012b9 	.word	0x000012b9

0000134c <__libc_init_array>:
    134c:	b570      	push	{r4, r5, r6, lr}
    134e:	2600      	movs	r6, #0
    1350:	4d0c      	ldr	r5, [pc, #48]	; (1384 <__libc_init_array+0x38>)
    1352:	4c0d      	ldr	r4, [pc, #52]	; (1388 <__libc_init_array+0x3c>)
    1354:	1b64      	subs	r4, r4, r5
    1356:	10a4      	asrs	r4, r4, #2
    1358:	42a6      	cmp	r6, r4
    135a:	d109      	bne.n	1370 <__libc_init_array+0x24>
    135c:	2600      	movs	r6, #0
    135e:	f000 fcef 	bl	1d40 <_init>
    1362:	4d0a      	ldr	r5, [pc, #40]	; (138c <__libc_init_array+0x40>)
    1364:	4c0a      	ldr	r4, [pc, #40]	; (1390 <__libc_init_array+0x44>)
    1366:	1b64      	subs	r4, r4, r5
    1368:	10a4      	asrs	r4, r4, #2
    136a:	42a6      	cmp	r6, r4
    136c:	d105      	bne.n	137a <__libc_init_array+0x2e>
    136e:	bd70      	pop	{r4, r5, r6, pc}
    1370:	00b3      	lsls	r3, r6, #2
    1372:	58eb      	ldr	r3, [r5, r3]
    1374:	4798      	blx	r3
    1376:	3601      	adds	r6, #1
    1378:	e7ee      	b.n	1358 <__libc_init_array+0xc>
    137a:	00b3      	lsls	r3, r6, #2
    137c:	58eb      	ldr	r3, [r5, r3]
    137e:	4798      	blx	r3
    1380:	3601      	adds	r6, #1
    1382:	e7f2      	b.n	136a <__libc_init_array+0x1e>
    1384:	00001d4c 	.word	0x00001d4c
    1388:	00001d4c 	.word	0x00001d4c
    138c:	00001d4c 	.word	0x00001d4c
    1390:	00001d50 	.word	0x00001d50

00001394 <memset>:
    1394:	0003      	movs	r3, r0
    1396:	1882      	adds	r2, r0, r2
    1398:	4293      	cmp	r3, r2
    139a:	d100      	bne.n	139e <memset+0xa>
    139c:	4770      	bx	lr
    139e:	7019      	strb	r1, [r3, #0]
    13a0:	3301      	adds	r3, #1
    13a2:	e7f9      	b.n	1398 <memset+0x4>

000013a4 <setbuf>:
    13a4:	424a      	negs	r2, r1
    13a6:	414a      	adcs	r2, r1
    13a8:	2380      	movs	r3, #128	; 0x80
    13aa:	b510      	push	{r4, lr}
    13ac:	0052      	lsls	r2, r2, #1
    13ae:	00db      	lsls	r3, r3, #3
    13b0:	f000 f802 	bl	13b8 <setvbuf>
    13b4:	bd10      	pop	{r4, pc}
	...

000013b8 <setvbuf>:
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	001d      	movs	r5, r3
    13bc:	4b4f      	ldr	r3, [pc, #316]	; (14fc <setvbuf+0x144>)
    13be:	b085      	sub	sp, #20
    13c0:	681e      	ldr	r6, [r3, #0]
    13c2:	0004      	movs	r4, r0
    13c4:	000f      	movs	r7, r1
    13c6:	9200      	str	r2, [sp, #0]
    13c8:	2e00      	cmp	r6, #0
    13ca:	d005      	beq.n	13d8 <setvbuf+0x20>
    13cc:	69b3      	ldr	r3, [r6, #24]
    13ce:	2b00      	cmp	r3, #0
    13d0:	d102      	bne.n	13d8 <setvbuf+0x20>
    13d2:	0030      	movs	r0, r6
    13d4:	f000 f994 	bl	1700 <__sinit>
    13d8:	4b49      	ldr	r3, [pc, #292]	; (1500 <setvbuf+0x148>)
    13da:	429c      	cmp	r4, r3
    13dc:	d150      	bne.n	1480 <setvbuf+0xc8>
    13de:	6874      	ldr	r4, [r6, #4]
    13e0:	9b00      	ldr	r3, [sp, #0]
    13e2:	2b02      	cmp	r3, #2
    13e4:	d005      	beq.n	13f2 <setvbuf+0x3a>
    13e6:	2b01      	cmp	r3, #1
    13e8:	d900      	bls.n	13ec <setvbuf+0x34>
    13ea:	e084      	b.n	14f6 <setvbuf+0x13e>
    13ec:	2d00      	cmp	r5, #0
    13ee:	da00      	bge.n	13f2 <setvbuf+0x3a>
    13f0:	e081      	b.n	14f6 <setvbuf+0x13e>
    13f2:	0021      	movs	r1, r4
    13f4:	0030      	movs	r0, r6
    13f6:	f000 f915 	bl	1624 <_fflush_r>
    13fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    13fc:	2900      	cmp	r1, #0
    13fe:	d008      	beq.n	1412 <setvbuf+0x5a>
    1400:	0023      	movs	r3, r4
    1402:	3344      	adds	r3, #68	; 0x44
    1404:	4299      	cmp	r1, r3
    1406:	d002      	beq.n	140e <setvbuf+0x56>
    1408:	0030      	movs	r0, r6
    140a:	f000 fa41 	bl	1890 <_free_r>
    140e:	2300      	movs	r3, #0
    1410:	6363      	str	r3, [r4, #52]	; 0x34
    1412:	2300      	movs	r3, #0
    1414:	61a3      	str	r3, [r4, #24]
    1416:	6063      	str	r3, [r4, #4]
    1418:	89a3      	ldrh	r3, [r4, #12]
    141a:	061b      	lsls	r3, r3, #24
    141c:	d503      	bpl.n	1426 <setvbuf+0x6e>
    141e:	6921      	ldr	r1, [r4, #16]
    1420:	0030      	movs	r0, r6
    1422:	f000 fa35 	bl	1890 <_free_r>
    1426:	89a3      	ldrh	r3, [r4, #12]
    1428:	4a36      	ldr	r2, [pc, #216]	; (1504 <setvbuf+0x14c>)
    142a:	4013      	ands	r3, r2
    142c:	81a3      	strh	r3, [r4, #12]
    142e:	9b00      	ldr	r3, [sp, #0]
    1430:	2b02      	cmp	r3, #2
    1432:	d05a      	beq.n	14ea <setvbuf+0x132>
    1434:	ab03      	add	r3, sp, #12
    1436:	aa02      	add	r2, sp, #8
    1438:	0021      	movs	r1, r4
    143a:	0030      	movs	r0, r6
    143c:	f000 f9f6 	bl	182c <__swhatbuf_r>
    1440:	89a3      	ldrh	r3, [r4, #12]
    1442:	4318      	orrs	r0, r3
    1444:	81a0      	strh	r0, [r4, #12]
    1446:	2d00      	cmp	r5, #0
    1448:	d124      	bne.n	1494 <setvbuf+0xdc>
    144a:	9d02      	ldr	r5, [sp, #8]
    144c:	0028      	movs	r0, r5
    144e:	f000 fa15 	bl	187c <malloc>
    1452:	9501      	str	r5, [sp, #4]
    1454:	1e07      	subs	r7, r0, #0
    1456:	d142      	bne.n	14de <setvbuf+0x126>
    1458:	9b02      	ldr	r3, [sp, #8]
    145a:	9301      	str	r3, [sp, #4]
    145c:	42ab      	cmp	r3, r5
    145e:	d139      	bne.n	14d4 <setvbuf+0x11c>
    1460:	2001      	movs	r0, #1
    1462:	4240      	negs	r0, r0
    1464:	2302      	movs	r3, #2
    1466:	89a2      	ldrh	r2, [r4, #12]
    1468:	4313      	orrs	r3, r2
    146a:	81a3      	strh	r3, [r4, #12]
    146c:	2300      	movs	r3, #0
    146e:	60a3      	str	r3, [r4, #8]
    1470:	0023      	movs	r3, r4
    1472:	3347      	adds	r3, #71	; 0x47
    1474:	6023      	str	r3, [r4, #0]
    1476:	6123      	str	r3, [r4, #16]
    1478:	2301      	movs	r3, #1
    147a:	6163      	str	r3, [r4, #20]
    147c:	b005      	add	sp, #20
    147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1480:	4b21      	ldr	r3, [pc, #132]	; (1508 <setvbuf+0x150>)
    1482:	429c      	cmp	r4, r3
    1484:	d101      	bne.n	148a <setvbuf+0xd2>
    1486:	68b4      	ldr	r4, [r6, #8]
    1488:	e7aa      	b.n	13e0 <setvbuf+0x28>
    148a:	4b20      	ldr	r3, [pc, #128]	; (150c <setvbuf+0x154>)
    148c:	429c      	cmp	r4, r3
    148e:	d1a7      	bne.n	13e0 <setvbuf+0x28>
    1490:	68f4      	ldr	r4, [r6, #12]
    1492:	e7a5      	b.n	13e0 <setvbuf+0x28>
    1494:	2f00      	cmp	r7, #0
    1496:	d0d9      	beq.n	144c <setvbuf+0x94>
    1498:	69b3      	ldr	r3, [r6, #24]
    149a:	2b00      	cmp	r3, #0
    149c:	d102      	bne.n	14a4 <setvbuf+0xec>
    149e:	0030      	movs	r0, r6
    14a0:	f000 f92e 	bl	1700 <__sinit>
    14a4:	9b00      	ldr	r3, [sp, #0]
    14a6:	2b01      	cmp	r3, #1
    14a8:	d103      	bne.n	14b2 <setvbuf+0xfa>
    14aa:	89a3      	ldrh	r3, [r4, #12]
    14ac:	9a00      	ldr	r2, [sp, #0]
    14ae:	431a      	orrs	r2, r3
    14b0:	81a2      	strh	r2, [r4, #12]
    14b2:	2008      	movs	r0, #8
    14b4:	89a3      	ldrh	r3, [r4, #12]
    14b6:	6027      	str	r7, [r4, #0]
    14b8:	6127      	str	r7, [r4, #16]
    14ba:	6165      	str	r5, [r4, #20]
    14bc:	4018      	ands	r0, r3
    14be:	d018      	beq.n	14f2 <setvbuf+0x13a>
    14c0:	2001      	movs	r0, #1
    14c2:	4018      	ands	r0, r3
    14c4:	2300      	movs	r3, #0
    14c6:	4298      	cmp	r0, r3
    14c8:	d011      	beq.n	14ee <setvbuf+0x136>
    14ca:	426d      	negs	r5, r5
    14cc:	60a3      	str	r3, [r4, #8]
    14ce:	61a5      	str	r5, [r4, #24]
    14d0:	0018      	movs	r0, r3
    14d2:	e7d3      	b.n	147c <setvbuf+0xc4>
    14d4:	9801      	ldr	r0, [sp, #4]
    14d6:	f000 f9d1 	bl	187c <malloc>
    14da:	1e07      	subs	r7, r0, #0
    14dc:	d0c0      	beq.n	1460 <setvbuf+0xa8>
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	89a2      	ldrh	r2, [r4, #12]
    14e2:	9d01      	ldr	r5, [sp, #4]
    14e4:	4313      	orrs	r3, r2
    14e6:	81a3      	strh	r3, [r4, #12]
    14e8:	e7d6      	b.n	1498 <setvbuf+0xe0>
    14ea:	2000      	movs	r0, #0
    14ec:	e7ba      	b.n	1464 <setvbuf+0xac>
    14ee:	60a5      	str	r5, [r4, #8]
    14f0:	e7c4      	b.n	147c <setvbuf+0xc4>
    14f2:	60a0      	str	r0, [r4, #8]
    14f4:	e7c2      	b.n	147c <setvbuf+0xc4>
    14f6:	2001      	movs	r0, #1
    14f8:	4240      	negs	r0, r0
    14fa:	e7bf      	b.n	147c <setvbuf+0xc4>
    14fc:	20000000 	.word	0x20000000
    1500:	00001d00 	.word	0x00001d00
    1504:	fffff35c 	.word	0xfffff35c
    1508:	00001d20 	.word	0x00001d20
    150c:	00001ce0 	.word	0x00001ce0

00001510 <__sflush_r>:
    1510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1512:	898a      	ldrh	r2, [r1, #12]
    1514:	0005      	movs	r5, r0
    1516:	000c      	movs	r4, r1
    1518:	0713      	lsls	r3, r2, #28
    151a:	d460      	bmi.n	15de <__sflush_r+0xce>
    151c:	684b      	ldr	r3, [r1, #4]
    151e:	2b00      	cmp	r3, #0
    1520:	dc04      	bgt.n	152c <__sflush_r+0x1c>
    1522:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1524:	2b00      	cmp	r3, #0
    1526:	dc01      	bgt.n	152c <__sflush_r+0x1c>
    1528:	2000      	movs	r0, #0
    152a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    152c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    152e:	2f00      	cmp	r7, #0
    1530:	d0fa      	beq.n	1528 <__sflush_r+0x18>
    1532:	2300      	movs	r3, #0
    1534:	682e      	ldr	r6, [r5, #0]
    1536:	602b      	str	r3, [r5, #0]
    1538:	2380      	movs	r3, #128	; 0x80
    153a:	015b      	lsls	r3, r3, #5
    153c:	401a      	ands	r2, r3
    153e:	d034      	beq.n	15aa <__sflush_r+0x9a>
    1540:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1542:	89a3      	ldrh	r3, [r4, #12]
    1544:	075b      	lsls	r3, r3, #29
    1546:	d506      	bpl.n	1556 <__sflush_r+0x46>
    1548:	6863      	ldr	r3, [r4, #4]
    154a:	1ac0      	subs	r0, r0, r3
    154c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    154e:	2b00      	cmp	r3, #0
    1550:	d001      	beq.n	1556 <__sflush_r+0x46>
    1552:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1554:	1ac0      	subs	r0, r0, r3
    1556:	0002      	movs	r2, r0
    1558:	6a21      	ldr	r1, [r4, #32]
    155a:	2300      	movs	r3, #0
    155c:	0028      	movs	r0, r5
    155e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1560:	47b8      	blx	r7
    1562:	89a1      	ldrh	r1, [r4, #12]
    1564:	1c43      	adds	r3, r0, #1
    1566:	d106      	bne.n	1576 <__sflush_r+0x66>
    1568:	682b      	ldr	r3, [r5, #0]
    156a:	2b1d      	cmp	r3, #29
    156c:	d831      	bhi.n	15d2 <__sflush_r+0xc2>
    156e:	4a2c      	ldr	r2, [pc, #176]	; (1620 <__sflush_r+0x110>)
    1570:	40da      	lsrs	r2, r3
    1572:	07d3      	lsls	r3, r2, #31
    1574:	d52d      	bpl.n	15d2 <__sflush_r+0xc2>
    1576:	2300      	movs	r3, #0
    1578:	6063      	str	r3, [r4, #4]
    157a:	6923      	ldr	r3, [r4, #16]
    157c:	6023      	str	r3, [r4, #0]
    157e:	04cb      	lsls	r3, r1, #19
    1580:	d505      	bpl.n	158e <__sflush_r+0x7e>
    1582:	1c43      	adds	r3, r0, #1
    1584:	d102      	bne.n	158c <__sflush_r+0x7c>
    1586:	682b      	ldr	r3, [r5, #0]
    1588:	2b00      	cmp	r3, #0
    158a:	d100      	bne.n	158e <__sflush_r+0x7e>
    158c:	6560      	str	r0, [r4, #84]	; 0x54
    158e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1590:	602e      	str	r6, [r5, #0]
    1592:	2900      	cmp	r1, #0
    1594:	d0c8      	beq.n	1528 <__sflush_r+0x18>
    1596:	0023      	movs	r3, r4
    1598:	3344      	adds	r3, #68	; 0x44
    159a:	4299      	cmp	r1, r3
    159c:	d002      	beq.n	15a4 <__sflush_r+0x94>
    159e:	0028      	movs	r0, r5
    15a0:	f000 f976 	bl	1890 <_free_r>
    15a4:	2000      	movs	r0, #0
    15a6:	6360      	str	r0, [r4, #52]	; 0x34
    15a8:	e7bf      	b.n	152a <__sflush_r+0x1a>
    15aa:	2301      	movs	r3, #1
    15ac:	6a21      	ldr	r1, [r4, #32]
    15ae:	0028      	movs	r0, r5
    15b0:	47b8      	blx	r7
    15b2:	1c43      	adds	r3, r0, #1
    15b4:	d1c5      	bne.n	1542 <__sflush_r+0x32>
    15b6:	682b      	ldr	r3, [r5, #0]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d0c2      	beq.n	1542 <__sflush_r+0x32>
    15bc:	2b1d      	cmp	r3, #29
    15be:	d001      	beq.n	15c4 <__sflush_r+0xb4>
    15c0:	2b16      	cmp	r3, #22
    15c2:	d101      	bne.n	15c8 <__sflush_r+0xb8>
    15c4:	602e      	str	r6, [r5, #0]
    15c6:	e7af      	b.n	1528 <__sflush_r+0x18>
    15c8:	2340      	movs	r3, #64	; 0x40
    15ca:	89a2      	ldrh	r2, [r4, #12]
    15cc:	4313      	orrs	r3, r2
    15ce:	81a3      	strh	r3, [r4, #12]
    15d0:	e7ab      	b.n	152a <__sflush_r+0x1a>
    15d2:	2340      	movs	r3, #64	; 0x40
    15d4:	430b      	orrs	r3, r1
    15d6:	2001      	movs	r0, #1
    15d8:	81a3      	strh	r3, [r4, #12]
    15da:	4240      	negs	r0, r0
    15dc:	e7a5      	b.n	152a <__sflush_r+0x1a>
    15de:	690f      	ldr	r7, [r1, #16]
    15e0:	2f00      	cmp	r7, #0
    15e2:	d0a1      	beq.n	1528 <__sflush_r+0x18>
    15e4:	680b      	ldr	r3, [r1, #0]
    15e6:	600f      	str	r7, [r1, #0]
    15e8:	1bdb      	subs	r3, r3, r7
    15ea:	9301      	str	r3, [sp, #4]
    15ec:	2300      	movs	r3, #0
    15ee:	0792      	lsls	r2, r2, #30
    15f0:	d100      	bne.n	15f4 <__sflush_r+0xe4>
    15f2:	694b      	ldr	r3, [r1, #20]
    15f4:	60a3      	str	r3, [r4, #8]
    15f6:	9b01      	ldr	r3, [sp, #4]
    15f8:	2b00      	cmp	r3, #0
    15fa:	dc00      	bgt.n	15fe <__sflush_r+0xee>
    15fc:	e794      	b.n	1528 <__sflush_r+0x18>
    15fe:	9b01      	ldr	r3, [sp, #4]
    1600:	003a      	movs	r2, r7
    1602:	6a21      	ldr	r1, [r4, #32]
    1604:	0028      	movs	r0, r5
    1606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1608:	47b0      	blx	r6
    160a:	2800      	cmp	r0, #0
    160c:	dc03      	bgt.n	1616 <__sflush_r+0x106>
    160e:	2340      	movs	r3, #64	; 0x40
    1610:	89a2      	ldrh	r2, [r4, #12]
    1612:	4313      	orrs	r3, r2
    1614:	e7df      	b.n	15d6 <__sflush_r+0xc6>
    1616:	9b01      	ldr	r3, [sp, #4]
    1618:	183f      	adds	r7, r7, r0
    161a:	1a1b      	subs	r3, r3, r0
    161c:	9301      	str	r3, [sp, #4]
    161e:	e7ea      	b.n	15f6 <__sflush_r+0xe6>
    1620:	20400001 	.word	0x20400001

00001624 <_fflush_r>:
    1624:	690b      	ldr	r3, [r1, #16]
    1626:	b570      	push	{r4, r5, r6, lr}
    1628:	0005      	movs	r5, r0
    162a:	000c      	movs	r4, r1
    162c:	2b00      	cmp	r3, #0
    162e:	d101      	bne.n	1634 <_fflush_r+0x10>
    1630:	2000      	movs	r0, #0
    1632:	bd70      	pop	{r4, r5, r6, pc}
    1634:	2800      	cmp	r0, #0
    1636:	d004      	beq.n	1642 <_fflush_r+0x1e>
    1638:	6983      	ldr	r3, [r0, #24]
    163a:	2b00      	cmp	r3, #0
    163c:	d101      	bne.n	1642 <_fflush_r+0x1e>
    163e:	f000 f85f 	bl	1700 <__sinit>
    1642:	4b0b      	ldr	r3, [pc, #44]	; (1670 <_fflush_r+0x4c>)
    1644:	429c      	cmp	r4, r3
    1646:	d109      	bne.n	165c <_fflush_r+0x38>
    1648:	686c      	ldr	r4, [r5, #4]
    164a:	220c      	movs	r2, #12
    164c:	5ea3      	ldrsh	r3, [r4, r2]
    164e:	2b00      	cmp	r3, #0
    1650:	d0ee      	beq.n	1630 <_fflush_r+0xc>
    1652:	0021      	movs	r1, r4
    1654:	0028      	movs	r0, r5
    1656:	f7ff ff5b 	bl	1510 <__sflush_r>
    165a:	e7ea      	b.n	1632 <_fflush_r+0xe>
    165c:	4b05      	ldr	r3, [pc, #20]	; (1674 <_fflush_r+0x50>)
    165e:	429c      	cmp	r4, r3
    1660:	d101      	bne.n	1666 <_fflush_r+0x42>
    1662:	68ac      	ldr	r4, [r5, #8]
    1664:	e7f1      	b.n	164a <_fflush_r+0x26>
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <_fflush_r+0x54>)
    1668:	429c      	cmp	r4, r3
    166a:	d1ee      	bne.n	164a <_fflush_r+0x26>
    166c:	68ec      	ldr	r4, [r5, #12]
    166e:	e7ec      	b.n	164a <_fflush_r+0x26>
    1670:	00001d00 	.word	0x00001d00
    1674:	00001d20 	.word	0x00001d20
    1678:	00001ce0 	.word	0x00001ce0

0000167c <_cleanup_r>:
    167c:	b510      	push	{r4, lr}
    167e:	4902      	ldr	r1, [pc, #8]	; (1688 <_cleanup_r+0xc>)
    1680:	f000 f8b2 	bl	17e8 <_fwalk_reent>
    1684:	bd10      	pop	{r4, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	00001625 	.word	0x00001625

0000168c <std.isra.0>:
    168c:	2300      	movs	r3, #0
    168e:	b510      	push	{r4, lr}
    1690:	0004      	movs	r4, r0
    1692:	6003      	str	r3, [r0, #0]
    1694:	6043      	str	r3, [r0, #4]
    1696:	6083      	str	r3, [r0, #8]
    1698:	8181      	strh	r1, [r0, #12]
    169a:	6643      	str	r3, [r0, #100]	; 0x64
    169c:	81c2      	strh	r2, [r0, #14]
    169e:	6103      	str	r3, [r0, #16]
    16a0:	6143      	str	r3, [r0, #20]
    16a2:	6183      	str	r3, [r0, #24]
    16a4:	0019      	movs	r1, r3
    16a6:	2208      	movs	r2, #8
    16a8:	305c      	adds	r0, #92	; 0x5c
    16aa:	f7ff fe73 	bl	1394 <memset>
    16ae:	4b05      	ldr	r3, [pc, #20]	; (16c4 <std.isra.0+0x38>)
    16b0:	6224      	str	r4, [r4, #32]
    16b2:	6263      	str	r3, [r4, #36]	; 0x24
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <std.isra.0+0x3c>)
    16b6:	62a3      	str	r3, [r4, #40]	; 0x28
    16b8:	4b04      	ldr	r3, [pc, #16]	; (16cc <std.isra.0+0x40>)
    16ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    16bc:	4b04      	ldr	r3, [pc, #16]	; (16d0 <std.isra.0+0x44>)
    16be:	6323      	str	r3, [r4, #48]	; 0x30
    16c0:	bd10      	pop	{r4, pc}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	00001a05 	.word	0x00001a05
    16c8:	00001a2d 	.word	0x00001a2d
    16cc:	00001a65 	.word	0x00001a65
    16d0:	00001a91 	.word	0x00001a91

000016d4 <__sfmoreglue>:
    16d4:	b570      	push	{r4, r5, r6, lr}
    16d6:	2568      	movs	r5, #104	; 0x68
    16d8:	1e4a      	subs	r2, r1, #1
    16da:	4355      	muls	r5, r2
    16dc:	000e      	movs	r6, r1
    16de:	0029      	movs	r1, r5
    16e0:	3174      	adds	r1, #116	; 0x74
    16e2:	f000 f91f 	bl	1924 <_malloc_r>
    16e6:	1e04      	subs	r4, r0, #0
    16e8:	d008      	beq.n	16fc <__sfmoreglue+0x28>
    16ea:	2100      	movs	r1, #0
    16ec:	002a      	movs	r2, r5
    16ee:	6001      	str	r1, [r0, #0]
    16f0:	6046      	str	r6, [r0, #4]
    16f2:	300c      	adds	r0, #12
    16f4:	60a0      	str	r0, [r4, #8]
    16f6:	3268      	adds	r2, #104	; 0x68
    16f8:	f7ff fe4c 	bl	1394 <memset>
    16fc:	0020      	movs	r0, r4
    16fe:	bd70      	pop	{r4, r5, r6, pc}

00001700 <__sinit>:
    1700:	6983      	ldr	r3, [r0, #24]
    1702:	b513      	push	{r0, r1, r4, lr}
    1704:	0004      	movs	r4, r0
    1706:	2b00      	cmp	r3, #0
    1708:	d128      	bne.n	175c <__sinit+0x5c>
    170a:	6483      	str	r3, [r0, #72]	; 0x48
    170c:	64c3      	str	r3, [r0, #76]	; 0x4c
    170e:	6503      	str	r3, [r0, #80]	; 0x50
    1710:	4b13      	ldr	r3, [pc, #76]	; (1760 <__sinit+0x60>)
    1712:	4a14      	ldr	r2, [pc, #80]	; (1764 <__sinit+0x64>)
    1714:	681b      	ldr	r3, [r3, #0]
    1716:	6282      	str	r2, [r0, #40]	; 0x28
    1718:	9301      	str	r3, [sp, #4]
    171a:	4298      	cmp	r0, r3
    171c:	d101      	bne.n	1722 <__sinit+0x22>
    171e:	2301      	movs	r3, #1
    1720:	6183      	str	r3, [r0, #24]
    1722:	0020      	movs	r0, r4
    1724:	f000 f820 	bl	1768 <__sfp>
    1728:	6060      	str	r0, [r4, #4]
    172a:	0020      	movs	r0, r4
    172c:	f000 f81c 	bl	1768 <__sfp>
    1730:	60a0      	str	r0, [r4, #8]
    1732:	0020      	movs	r0, r4
    1734:	f000 f818 	bl	1768 <__sfp>
    1738:	2200      	movs	r2, #0
    173a:	60e0      	str	r0, [r4, #12]
    173c:	2104      	movs	r1, #4
    173e:	6860      	ldr	r0, [r4, #4]
    1740:	f7ff ffa4 	bl	168c <std.isra.0>
    1744:	2201      	movs	r2, #1
    1746:	2109      	movs	r1, #9
    1748:	68a0      	ldr	r0, [r4, #8]
    174a:	f7ff ff9f 	bl	168c <std.isra.0>
    174e:	2202      	movs	r2, #2
    1750:	2112      	movs	r1, #18
    1752:	68e0      	ldr	r0, [r4, #12]
    1754:	f7ff ff9a 	bl	168c <std.isra.0>
    1758:	2301      	movs	r3, #1
    175a:	61a3      	str	r3, [r4, #24]
    175c:	bd13      	pop	{r0, r1, r4, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00001cdc 	.word	0x00001cdc
    1764:	0000167d 	.word	0x0000167d

00001768 <__sfp>:
    1768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    176a:	4b1e      	ldr	r3, [pc, #120]	; (17e4 <__sfp+0x7c>)
    176c:	0007      	movs	r7, r0
    176e:	681e      	ldr	r6, [r3, #0]
    1770:	69b3      	ldr	r3, [r6, #24]
    1772:	2b00      	cmp	r3, #0
    1774:	d102      	bne.n	177c <__sfp+0x14>
    1776:	0030      	movs	r0, r6
    1778:	f7ff ffc2 	bl	1700 <__sinit>
    177c:	3648      	adds	r6, #72	; 0x48
    177e:	68b4      	ldr	r4, [r6, #8]
    1780:	6873      	ldr	r3, [r6, #4]
    1782:	3b01      	subs	r3, #1
    1784:	d504      	bpl.n	1790 <__sfp+0x28>
    1786:	6833      	ldr	r3, [r6, #0]
    1788:	2b00      	cmp	r3, #0
    178a:	d007      	beq.n	179c <__sfp+0x34>
    178c:	6836      	ldr	r6, [r6, #0]
    178e:	e7f6      	b.n	177e <__sfp+0x16>
    1790:	220c      	movs	r2, #12
    1792:	5ea5      	ldrsh	r5, [r4, r2]
    1794:	2d00      	cmp	r5, #0
    1796:	d00d      	beq.n	17b4 <__sfp+0x4c>
    1798:	3468      	adds	r4, #104	; 0x68
    179a:	e7f2      	b.n	1782 <__sfp+0x1a>
    179c:	2104      	movs	r1, #4
    179e:	0038      	movs	r0, r7
    17a0:	f7ff ff98 	bl	16d4 <__sfmoreglue>
    17a4:	6030      	str	r0, [r6, #0]
    17a6:	2800      	cmp	r0, #0
    17a8:	d1f0      	bne.n	178c <__sfp+0x24>
    17aa:	230c      	movs	r3, #12
    17ac:	0004      	movs	r4, r0
    17ae:	603b      	str	r3, [r7, #0]
    17b0:	0020      	movs	r0, r4
    17b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17b4:	2301      	movs	r3, #1
    17b6:	0020      	movs	r0, r4
    17b8:	425b      	negs	r3, r3
    17ba:	81e3      	strh	r3, [r4, #14]
    17bc:	3302      	adds	r3, #2
    17be:	81a3      	strh	r3, [r4, #12]
    17c0:	6665      	str	r5, [r4, #100]	; 0x64
    17c2:	6025      	str	r5, [r4, #0]
    17c4:	60a5      	str	r5, [r4, #8]
    17c6:	6065      	str	r5, [r4, #4]
    17c8:	6125      	str	r5, [r4, #16]
    17ca:	6165      	str	r5, [r4, #20]
    17cc:	61a5      	str	r5, [r4, #24]
    17ce:	2208      	movs	r2, #8
    17d0:	0029      	movs	r1, r5
    17d2:	305c      	adds	r0, #92	; 0x5c
    17d4:	f7ff fdde 	bl	1394 <memset>
    17d8:	6365      	str	r5, [r4, #52]	; 0x34
    17da:	63a5      	str	r5, [r4, #56]	; 0x38
    17dc:	64a5      	str	r5, [r4, #72]	; 0x48
    17de:	64e5      	str	r5, [r4, #76]	; 0x4c
    17e0:	e7e6      	b.n	17b0 <__sfp+0x48>
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	00001cdc 	.word	0x00001cdc

000017e8 <_fwalk_reent>:
    17e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17ea:	0004      	movs	r4, r0
    17ec:	0007      	movs	r7, r0
    17ee:	2600      	movs	r6, #0
    17f0:	9101      	str	r1, [sp, #4]
    17f2:	3448      	adds	r4, #72	; 0x48
    17f4:	2c00      	cmp	r4, #0
    17f6:	d101      	bne.n	17fc <_fwalk_reent+0x14>
    17f8:	0030      	movs	r0, r6
    17fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    17fc:	6863      	ldr	r3, [r4, #4]
    17fe:	68a5      	ldr	r5, [r4, #8]
    1800:	9300      	str	r3, [sp, #0]
    1802:	9b00      	ldr	r3, [sp, #0]
    1804:	3b01      	subs	r3, #1
    1806:	9300      	str	r3, [sp, #0]
    1808:	d501      	bpl.n	180e <_fwalk_reent+0x26>
    180a:	6824      	ldr	r4, [r4, #0]
    180c:	e7f2      	b.n	17f4 <_fwalk_reent+0xc>
    180e:	89ab      	ldrh	r3, [r5, #12]
    1810:	2b01      	cmp	r3, #1
    1812:	d908      	bls.n	1826 <_fwalk_reent+0x3e>
    1814:	220e      	movs	r2, #14
    1816:	5eab      	ldrsh	r3, [r5, r2]
    1818:	3301      	adds	r3, #1
    181a:	d004      	beq.n	1826 <_fwalk_reent+0x3e>
    181c:	0029      	movs	r1, r5
    181e:	0038      	movs	r0, r7
    1820:	9b01      	ldr	r3, [sp, #4]
    1822:	4798      	blx	r3
    1824:	4306      	orrs	r6, r0
    1826:	3568      	adds	r5, #104	; 0x68
    1828:	e7eb      	b.n	1802 <_fwalk_reent+0x1a>
	...

0000182c <__swhatbuf_r>:
    182c:	b570      	push	{r4, r5, r6, lr}
    182e:	000e      	movs	r6, r1
    1830:	001d      	movs	r5, r3
    1832:	230e      	movs	r3, #14
    1834:	5ec9      	ldrsh	r1, [r1, r3]
    1836:	b090      	sub	sp, #64	; 0x40
    1838:	0014      	movs	r4, r2
    183a:	2900      	cmp	r1, #0
    183c:	da07      	bge.n	184e <__swhatbuf_r+0x22>
    183e:	2300      	movs	r3, #0
    1840:	602b      	str	r3, [r5, #0]
    1842:	89b3      	ldrh	r3, [r6, #12]
    1844:	061b      	lsls	r3, r3, #24
    1846:	d411      	bmi.n	186c <__swhatbuf_r+0x40>
    1848:	2380      	movs	r3, #128	; 0x80
    184a:	00db      	lsls	r3, r3, #3
    184c:	e00f      	b.n	186e <__swhatbuf_r+0x42>
    184e:	aa01      	add	r2, sp, #4
    1850:	f000 f94a 	bl	1ae8 <_fstat_r>
    1854:	2800      	cmp	r0, #0
    1856:	dbf2      	blt.n	183e <__swhatbuf_r+0x12>
    1858:	22f0      	movs	r2, #240	; 0xf0
    185a:	9b02      	ldr	r3, [sp, #8]
    185c:	0212      	lsls	r2, r2, #8
    185e:	4013      	ands	r3, r2
    1860:	4a05      	ldr	r2, [pc, #20]	; (1878 <__swhatbuf_r+0x4c>)
    1862:	189b      	adds	r3, r3, r2
    1864:	425a      	negs	r2, r3
    1866:	4153      	adcs	r3, r2
    1868:	602b      	str	r3, [r5, #0]
    186a:	e7ed      	b.n	1848 <__swhatbuf_r+0x1c>
    186c:	2340      	movs	r3, #64	; 0x40
    186e:	2000      	movs	r0, #0
    1870:	6023      	str	r3, [r4, #0]
    1872:	b010      	add	sp, #64	; 0x40
    1874:	bd70      	pop	{r4, r5, r6, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	ffffe000 	.word	0xffffe000

0000187c <malloc>:
    187c:	b510      	push	{r4, lr}
    187e:	4b03      	ldr	r3, [pc, #12]	; (188c <malloc+0x10>)
    1880:	0001      	movs	r1, r0
    1882:	6818      	ldr	r0, [r3, #0]
    1884:	f000 f84e 	bl	1924 <_malloc_r>
    1888:	bd10      	pop	{r4, pc}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	20000000 	.word	0x20000000

00001890 <_free_r>:
    1890:	b570      	push	{r4, r5, r6, lr}
    1892:	0005      	movs	r5, r0
    1894:	2900      	cmp	r1, #0
    1896:	d010      	beq.n	18ba <_free_r+0x2a>
    1898:	1f0c      	subs	r4, r1, #4
    189a:	6823      	ldr	r3, [r4, #0]
    189c:	2b00      	cmp	r3, #0
    189e:	da00      	bge.n	18a2 <_free_r+0x12>
    18a0:	18e4      	adds	r4, r4, r3
    18a2:	0028      	movs	r0, r5
    18a4:	f000 f946 	bl	1b34 <__malloc_lock>
    18a8:	4a1d      	ldr	r2, [pc, #116]	; (1920 <_free_r+0x90>)
    18aa:	6813      	ldr	r3, [r2, #0]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d105      	bne.n	18bc <_free_r+0x2c>
    18b0:	6063      	str	r3, [r4, #4]
    18b2:	6014      	str	r4, [r2, #0]
    18b4:	0028      	movs	r0, r5
    18b6:	f000 f93e 	bl	1b36 <__malloc_unlock>
    18ba:	bd70      	pop	{r4, r5, r6, pc}
    18bc:	42a3      	cmp	r3, r4
    18be:	d909      	bls.n	18d4 <_free_r+0x44>
    18c0:	6821      	ldr	r1, [r4, #0]
    18c2:	1860      	adds	r0, r4, r1
    18c4:	4283      	cmp	r3, r0
    18c6:	d1f3      	bne.n	18b0 <_free_r+0x20>
    18c8:	6818      	ldr	r0, [r3, #0]
    18ca:	685b      	ldr	r3, [r3, #4]
    18cc:	1841      	adds	r1, r0, r1
    18ce:	6021      	str	r1, [r4, #0]
    18d0:	e7ee      	b.n	18b0 <_free_r+0x20>
    18d2:	0013      	movs	r3, r2
    18d4:	685a      	ldr	r2, [r3, #4]
    18d6:	2a00      	cmp	r2, #0
    18d8:	d001      	beq.n	18de <_free_r+0x4e>
    18da:	42a2      	cmp	r2, r4
    18dc:	d9f9      	bls.n	18d2 <_free_r+0x42>
    18de:	6819      	ldr	r1, [r3, #0]
    18e0:	1858      	adds	r0, r3, r1
    18e2:	42a0      	cmp	r0, r4
    18e4:	d10b      	bne.n	18fe <_free_r+0x6e>
    18e6:	6820      	ldr	r0, [r4, #0]
    18e8:	1809      	adds	r1, r1, r0
    18ea:	1858      	adds	r0, r3, r1
    18ec:	6019      	str	r1, [r3, #0]
    18ee:	4282      	cmp	r2, r0
    18f0:	d1e0      	bne.n	18b4 <_free_r+0x24>
    18f2:	6810      	ldr	r0, [r2, #0]
    18f4:	6852      	ldr	r2, [r2, #4]
    18f6:	1841      	adds	r1, r0, r1
    18f8:	6019      	str	r1, [r3, #0]
    18fa:	605a      	str	r2, [r3, #4]
    18fc:	e7da      	b.n	18b4 <_free_r+0x24>
    18fe:	42a0      	cmp	r0, r4
    1900:	d902      	bls.n	1908 <_free_r+0x78>
    1902:	230c      	movs	r3, #12
    1904:	602b      	str	r3, [r5, #0]
    1906:	e7d5      	b.n	18b4 <_free_r+0x24>
    1908:	6821      	ldr	r1, [r4, #0]
    190a:	1860      	adds	r0, r4, r1
    190c:	4282      	cmp	r2, r0
    190e:	d103      	bne.n	1918 <_free_r+0x88>
    1910:	6810      	ldr	r0, [r2, #0]
    1912:	6852      	ldr	r2, [r2, #4]
    1914:	1841      	adds	r1, r0, r1
    1916:	6021      	str	r1, [r4, #0]
    1918:	6062      	str	r2, [r4, #4]
    191a:	605c      	str	r4, [r3, #4]
    191c:	e7ca      	b.n	18b4 <_free_r+0x24>
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	200000f8 	.word	0x200000f8

00001924 <_malloc_r>:
    1924:	2303      	movs	r3, #3
    1926:	b570      	push	{r4, r5, r6, lr}
    1928:	1ccd      	adds	r5, r1, #3
    192a:	439d      	bics	r5, r3
    192c:	3508      	adds	r5, #8
    192e:	0006      	movs	r6, r0
    1930:	2d0c      	cmp	r5, #12
    1932:	d21e      	bcs.n	1972 <_malloc_r+0x4e>
    1934:	250c      	movs	r5, #12
    1936:	42a9      	cmp	r1, r5
    1938:	d81d      	bhi.n	1976 <_malloc_r+0x52>
    193a:	0030      	movs	r0, r6
    193c:	f000 f8fa 	bl	1b34 <__malloc_lock>
    1940:	4a25      	ldr	r2, [pc, #148]	; (19d8 <_malloc_r+0xb4>)
    1942:	6814      	ldr	r4, [r2, #0]
    1944:	0021      	movs	r1, r4
    1946:	2900      	cmp	r1, #0
    1948:	d119      	bne.n	197e <_malloc_r+0x5a>
    194a:	4c24      	ldr	r4, [pc, #144]	; (19dc <_malloc_r+0xb8>)
    194c:	6823      	ldr	r3, [r4, #0]
    194e:	2b00      	cmp	r3, #0
    1950:	d103      	bne.n	195a <_malloc_r+0x36>
    1952:	0030      	movs	r0, r6
    1954:	f000 f844 	bl	19e0 <_sbrk_r>
    1958:	6020      	str	r0, [r4, #0]
    195a:	0029      	movs	r1, r5
    195c:	0030      	movs	r0, r6
    195e:	f000 f83f 	bl	19e0 <_sbrk_r>
    1962:	1c43      	adds	r3, r0, #1
    1964:	d12c      	bne.n	19c0 <_malloc_r+0x9c>
    1966:	230c      	movs	r3, #12
    1968:	0030      	movs	r0, r6
    196a:	6033      	str	r3, [r6, #0]
    196c:	f000 f8e3 	bl	1b36 <__malloc_unlock>
    1970:	e003      	b.n	197a <_malloc_r+0x56>
    1972:	2d00      	cmp	r5, #0
    1974:	dadf      	bge.n	1936 <_malloc_r+0x12>
    1976:	230c      	movs	r3, #12
    1978:	6033      	str	r3, [r6, #0]
    197a:	2000      	movs	r0, #0
    197c:	bd70      	pop	{r4, r5, r6, pc}
    197e:	680b      	ldr	r3, [r1, #0]
    1980:	1b5b      	subs	r3, r3, r5
    1982:	d41a      	bmi.n	19ba <_malloc_r+0x96>
    1984:	2b0b      	cmp	r3, #11
    1986:	d903      	bls.n	1990 <_malloc_r+0x6c>
    1988:	600b      	str	r3, [r1, #0]
    198a:	18cc      	adds	r4, r1, r3
    198c:	6025      	str	r5, [r4, #0]
    198e:	e003      	b.n	1998 <_malloc_r+0x74>
    1990:	428c      	cmp	r4, r1
    1992:	d10e      	bne.n	19b2 <_malloc_r+0x8e>
    1994:	6863      	ldr	r3, [r4, #4]
    1996:	6013      	str	r3, [r2, #0]
    1998:	0030      	movs	r0, r6
    199a:	f000 f8cc 	bl	1b36 <__malloc_unlock>
    199e:	0020      	movs	r0, r4
    19a0:	2207      	movs	r2, #7
    19a2:	300b      	adds	r0, #11
    19a4:	1d23      	adds	r3, r4, #4
    19a6:	4390      	bics	r0, r2
    19a8:	1ac3      	subs	r3, r0, r3
    19aa:	d0e7      	beq.n	197c <_malloc_r+0x58>
    19ac:	425a      	negs	r2, r3
    19ae:	50e2      	str	r2, [r4, r3]
    19b0:	e7e4      	b.n	197c <_malloc_r+0x58>
    19b2:	684b      	ldr	r3, [r1, #4]
    19b4:	6063      	str	r3, [r4, #4]
    19b6:	000c      	movs	r4, r1
    19b8:	e7ee      	b.n	1998 <_malloc_r+0x74>
    19ba:	000c      	movs	r4, r1
    19bc:	6849      	ldr	r1, [r1, #4]
    19be:	e7c2      	b.n	1946 <_malloc_r+0x22>
    19c0:	2303      	movs	r3, #3
    19c2:	1cc4      	adds	r4, r0, #3
    19c4:	439c      	bics	r4, r3
    19c6:	42a0      	cmp	r0, r4
    19c8:	d0e0      	beq.n	198c <_malloc_r+0x68>
    19ca:	1a21      	subs	r1, r4, r0
    19cc:	0030      	movs	r0, r6
    19ce:	f000 f807 	bl	19e0 <_sbrk_r>
    19d2:	1c43      	adds	r3, r0, #1
    19d4:	d1da      	bne.n	198c <_malloc_r+0x68>
    19d6:	e7c6      	b.n	1966 <_malloc_r+0x42>
    19d8:	200000f8 	.word	0x200000f8
    19dc:	200000fc 	.word	0x200000fc

000019e0 <_sbrk_r>:
    19e0:	2300      	movs	r3, #0
    19e2:	b570      	push	{r4, r5, r6, lr}
    19e4:	4c06      	ldr	r4, [pc, #24]	; (1a00 <_sbrk_r+0x20>)
    19e6:	0005      	movs	r5, r0
    19e8:	0008      	movs	r0, r1
    19ea:	6023      	str	r3, [r4, #0]
    19ec:	f7ff f880 	bl	af0 <_sbrk>
    19f0:	1c43      	adds	r3, r0, #1
    19f2:	d103      	bne.n	19fc <_sbrk_r+0x1c>
    19f4:	6823      	ldr	r3, [r4, #0]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d000      	beq.n	19fc <_sbrk_r+0x1c>
    19fa:	602b      	str	r3, [r5, #0]
    19fc:	bd70      	pop	{r4, r5, r6, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	200001b0 	.word	0x200001b0

00001a04 <__sread>:
    1a04:	b570      	push	{r4, r5, r6, lr}
    1a06:	000c      	movs	r4, r1
    1a08:	250e      	movs	r5, #14
    1a0a:	5f49      	ldrsh	r1, [r1, r5]
    1a0c:	f000 f894 	bl	1b38 <_read_r>
    1a10:	2800      	cmp	r0, #0
    1a12:	db03      	blt.n	1a1c <__sread+0x18>
    1a14:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1a16:	181b      	adds	r3, r3, r0
    1a18:	6563      	str	r3, [r4, #84]	; 0x54
    1a1a:	bd70      	pop	{r4, r5, r6, pc}
    1a1c:	89a3      	ldrh	r3, [r4, #12]
    1a1e:	4a02      	ldr	r2, [pc, #8]	; (1a28 <__sread+0x24>)
    1a20:	4013      	ands	r3, r2
    1a22:	81a3      	strh	r3, [r4, #12]
    1a24:	e7f9      	b.n	1a1a <__sread+0x16>
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	ffffefff 	.word	0xffffefff

00001a2c <__swrite>:
    1a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a2e:	001f      	movs	r7, r3
    1a30:	898b      	ldrh	r3, [r1, #12]
    1a32:	0005      	movs	r5, r0
    1a34:	000c      	movs	r4, r1
    1a36:	0016      	movs	r6, r2
    1a38:	05db      	lsls	r3, r3, #23
    1a3a:	d505      	bpl.n	1a48 <__swrite+0x1c>
    1a3c:	230e      	movs	r3, #14
    1a3e:	5ec9      	ldrsh	r1, [r1, r3]
    1a40:	2200      	movs	r2, #0
    1a42:	2302      	movs	r3, #2
    1a44:	f000 f862 	bl	1b0c <_lseek_r>
    1a48:	89a3      	ldrh	r3, [r4, #12]
    1a4a:	4a05      	ldr	r2, [pc, #20]	; (1a60 <__swrite+0x34>)
    1a4c:	0028      	movs	r0, r5
    1a4e:	4013      	ands	r3, r2
    1a50:	81a3      	strh	r3, [r4, #12]
    1a52:	0032      	movs	r2, r6
    1a54:	230e      	movs	r3, #14
    1a56:	5ee1      	ldrsh	r1, [r4, r3]
    1a58:	003b      	movs	r3, r7
    1a5a:	f000 f81f 	bl	1a9c <_write_r>
    1a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a60:	ffffefff 	.word	0xffffefff

00001a64 <__sseek>:
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	000c      	movs	r4, r1
    1a68:	250e      	movs	r5, #14
    1a6a:	5f49      	ldrsh	r1, [r1, r5]
    1a6c:	f000 f84e 	bl	1b0c <_lseek_r>
    1a70:	89a3      	ldrh	r3, [r4, #12]
    1a72:	1c42      	adds	r2, r0, #1
    1a74:	d103      	bne.n	1a7e <__sseek+0x1a>
    1a76:	4a05      	ldr	r2, [pc, #20]	; (1a8c <__sseek+0x28>)
    1a78:	4013      	ands	r3, r2
    1a7a:	81a3      	strh	r3, [r4, #12]
    1a7c:	bd70      	pop	{r4, r5, r6, pc}
    1a7e:	2280      	movs	r2, #128	; 0x80
    1a80:	0152      	lsls	r2, r2, #5
    1a82:	4313      	orrs	r3, r2
    1a84:	81a3      	strh	r3, [r4, #12]
    1a86:	6560      	str	r0, [r4, #84]	; 0x54
    1a88:	e7f8      	b.n	1a7c <__sseek+0x18>
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	ffffefff 	.word	0xffffefff

00001a90 <__sclose>:
    1a90:	b510      	push	{r4, lr}
    1a92:	230e      	movs	r3, #14
    1a94:	5ec9      	ldrsh	r1, [r1, r3]
    1a96:	f000 f815 	bl	1ac4 <_close_r>
    1a9a:	bd10      	pop	{r4, pc}

00001a9c <_write_r>:
    1a9c:	b570      	push	{r4, r5, r6, lr}
    1a9e:	0005      	movs	r5, r0
    1aa0:	0008      	movs	r0, r1
    1aa2:	0011      	movs	r1, r2
    1aa4:	2200      	movs	r2, #0
    1aa6:	4c06      	ldr	r4, [pc, #24]	; (1ac0 <_write_r+0x24>)
    1aa8:	6022      	str	r2, [r4, #0]
    1aaa:	001a      	movs	r2, r3
    1aac:	f7ff fbf0 	bl	1290 <_write>
    1ab0:	1c43      	adds	r3, r0, #1
    1ab2:	d103      	bne.n	1abc <_write_r+0x20>
    1ab4:	6823      	ldr	r3, [r4, #0]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d000      	beq.n	1abc <_write_r+0x20>
    1aba:	602b      	str	r3, [r5, #0]
    1abc:	bd70      	pop	{r4, r5, r6, pc}
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	200001b0 	.word	0x200001b0

00001ac4 <_close_r>:
    1ac4:	2300      	movs	r3, #0
    1ac6:	b570      	push	{r4, r5, r6, lr}
    1ac8:	4c06      	ldr	r4, [pc, #24]	; (1ae4 <_close_r+0x20>)
    1aca:	0005      	movs	r5, r0
    1acc:	0008      	movs	r0, r1
    1ace:	6023      	str	r3, [r4, #0]
    1ad0:	f7ff f820 	bl	b14 <_close>
    1ad4:	1c43      	adds	r3, r0, #1
    1ad6:	d103      	bne.n	1ae0 <_close_r+0x1c>
    1ad8:	6823      	ldr	r3, [r4, #0]
    1ada:	2b00      	cmp	r3, #0
    1adc:	d000      	beq.n	1ae0 <_close_r+0x1c>
    1ade:	602b      	str	r3, [r5, #0]
    1ae0:	bd70      	pop	{r4, r5, r6, pc}
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	200001b0 	.word	0x200001b0

00001ae8 <_fstat_r>:
    1ae8:	2300      	movs	r3, #0
    1aea:	b570      	push	{r4, r5, r6, lr}
    1aec:	4c06      	ldr	r4, [pc, #24]	; (1b08 <_fstat_r+0x20>)
    1aee:	0005      	movs	r5, r0
    1af0:	0008      	movs	r0, r1
    1af2:	0011      	movs	r1, r2
    1af4:	6023      	str	r3, [r4, #0]
    1af6:	f7ff f810 	bl	b1a <_fstat>
    1afa:	1c43      	adds	r3, r0, #1
    1afc:	d103      	bne.n	1b06 <_fstat_r+0x1e>
    1afe:	6823      	ldr	r3, [r4, #0]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d000      	beq.n	1b06 <_fstat_r+0x1e>
    1b04:	602b      	str	r3, [r5, #0]
    1b06:	bd70      	pop	{r4, r5, r6, pc}
    1b08:	200001b0 	.word	0x200001b0

00001b0c <_lseek_r>:
    1b0c:	b570      	push	{r4, r5, r6, lr}
    1b0e:	0005      	movs	r5, r0
    1b10:	0008      	movs	r0, r1
    1b12:	0011      	movs	r1, r2
    1b14:	2200      	movs	r2, #0
    1b16:	4c06      	ldr	r4, [pc, #24]	; (1b30 <_lseek_r+0x24>)
    1b18:	6022      	str	r2, [r4, #0]
    1b1a:	001a      	movs	r2, r3
    1b1c:	f7ff f802 	bl	b24 <_lseek>
    1b20:	1c43      	adds	r3, r0, #1
    1b22:	d103      	bne.n	1b2c <_lseek_r+0x20>
    1b24:	6823      	ldr	r3, [r4, #0]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d000      	beq.n	1b2c <_lseek_r+0x20>
    1b2a:	602b      	str	r3, [r5, #0]
    1b2c:	bd70      	pop	{r4, r5, r6, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	200001b0 	.word	0x200001b0

00001b34 <__malloc_lock>:
    1b34:	4770      	bx	lr

00001b36 <__malloc_unlock>:
    1b36:	4770      	bx	lr

00001b38 <_read_r>:
    1b38:	b570      	push	{r4, r5, r6, lr}
    1b3a:	0005      	movs	r5, r0
    1b3c:	0008      	movs	r0, r1
    1b3e:	0011      	movs	r1, r2
    1b40:	2200      	movs	r2, #0
    1b42:	4c06      	ldr	r4, [pc, #24]	; (1b5c <_read_r+0x24>)
    1b44:	6022      	str	r2, [r4, #0]
    1b46:	001a      	movs	r2, r3
    1b48:	f7ff fb8e 	bl	1268 <_read>
    1b4c:	1c43      	adds	r3, r0, #1
    1b4e:	d103      	bne.n	1b58 <_read_r+0x20>
    1b50:	6823      	ldr	r3, [r4, #0]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d000      	beq.n	1b58 <_read_r+0x20>
    1b56:	602b      	str	r3, [r5, #0]
    1b58:	bd70      	pop	{r4, r5, r6, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	200001b0 	.word	0x200001b0
    1b60:	682f2e2e 	.word	0x682f2e2e
    1b64:	732f6c61 	.word	0x732f6c61
    1b68:	682f6372 	.word	0x682f6372
    1b6c:	615f6c61 	.word	0x615f6c61
    1b70:	615f6364 	.word	0x615f6364
    1b74:	636e7973 	.word	0x636e7973
    1b78:	0000632e 	.word	0x0000632e
    1b7c:	682f2e2e 	.word	0x682f2e2e
    1b80:	732f6c61 	.word	0x732f6c61
    1b84:	682f6372 	.word	0x682f6372
    1b88:	695f6c61 	.word	0x695f6c61
    1b8c:	00632e6f 	.word	0x00632e6f
    1b90:	682f2e2e 	.word	0x682f2e2e
    1b94:	732f6c61 	.word	0x732f6c61
    1b98:	682f6372 	.word	0x682f6372
    1b9c:	745f6c61 	.word	0x745f6c61
    1ba0:	72656d69 	.word	0x72656d69
    1ba4:	0000632e 	.word	0x0000632e
    1ba8:	682f2e2e 	.word	0x682f2e2e
    1bac:	732f6c61 	.word	0x732f6c61
    1bb0:	682f6372 	.word	0x682f6372
    1bb4:	755f6c61 	.word	0x755f6c61
    1bb8:	74726173 	.word	0x74726173
    1bbc:	6e79735f 	.word	0x6e79735f
    1bc0:	00632e6