
EDBGUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000167c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000167c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d8  20000064  000016e0  00020064  2**2
                  ALLOC
  3 .stack        00002004  2000013c  000017b8  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000175de  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000260f  00000000  00000000  000376c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a2be  00000000  00000000  00039cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000980  00000000  00000000  00043f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a20  00000000  00000000  00044910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e2a1  00000000  00000000  00045330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f22b  00000000  00000000  000635d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097a6e  00000000  00000000  000727fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ba8  00000000  00000000  0010a26c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 21 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     @!. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 59 0c 00 00 29 01 00 00     )...)...Y...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000064 	.word	0x20000064
      dc:	00000000 	.word	0x00000000
      e0:	0000167c 	.word	0x0000167c

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000068 	.word	0x20000068
     110:	0000167c 	.word	0x0000167c
     114:	0000167c 	.word	0x0000167c
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	00000231 	.word	0x00000231

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a10      	ldr	r2, [pc, #64]	; (170 <Reset_Handler+0x44>)
     130:	4b10      	ldr	r3, [pc, #64]	; (174 <Reset_Handler+0x48>)
     132:	429a      	cmp	r2, r3
     134:	d009      	beq.n	14a <Reset_Handler+0x1e>
     136:	4b0f      	ldr	r3, [pc, #60]	; (174 <Reset_Handler+0x48>)
     138:	4a0d      	ldr	r2, [pc, #52]	; (170 <Reset_Handler+0x44>)
     13a:	e003      	b.n	144 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     13c:	6811      	ldr	r1, [r2, #0]
     13e:	6019      	str	r1, [r3, #0]
     140:	3304      	adds	r3, #4
     142:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     144:	490c      	ldr	r1, [pc, #48]	; (178 <Reset_Handler+0x4c>)
     146:	428b      	cmp	r3, r1
     148:	d3f8      	bcc.n	13c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     14a:	4b0c      	ldr	r3, [pc, #48]	; (17c <Reset_Handler+0x50>)
     14c:	e002      	b.n	154 <Reset_Handler+0x28>
                *pDest++ = 0;
     14e:	2200      	movs	r2, #0
     150:	601a      	str	r2, [r3, #0]
     152:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     154:	4a0a      	ldr	r2, [pc, #40]	; (180 <Reset_Handler+0x54>)
     156:	4293      	cmp	r3, r2
     158:	d3f9      	bcc.n	14e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     15a:	4a0a      	ldr	r2, [pc, #40]	; (184 <Reset_Handler+0x58>)
     15c:	21ff      	movs	r1, #255	; 0xff
     15e:	4b0a      	ldr	r3, [pc, #40]	; (188 <Reset_Handler+0x5c>)
     160:	438b      	bics	r3, r1
     162:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     164:	4b09      	ldr	r3, [pc, #36]	; (18c <Reset_Handler+0x60>)
     166:	4798      	blx	r3
        main();
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <Reset_Handler+0x64>)
     16a:	4798      	blx	r3
     16c:	e7fe      	b.n	16c <Reset_Handler+0x40>
     16e:	46c0      	nop			; (mov r8, r8)
     170:	0000167c 	.word	0x0000167c
     174:	20000000 	.word	0x20000000
     178:	20000064 	.word	0x20000064
     17c:	20000064 	.word	0x20000064
     180:	2000013c 	.word	0x2000013c
     184:	e000ed00 	.word	0xe000ed00
     188:	00000000 	.word	0x00000000
     18c:	00000c6d 	.word	0x00000c6d
     190:	000002a1 	.word	0x000002a1

00000194 <EDBG_COM_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     194:	4b05      	ldr	r3, [pc, #20]	; (1ac <EDBG_COM_CLOCK_init+0x18>)
     196:	2240      	movs	r2, #64	; 0x40
     198:	21dc      	movs	r1, #220	; 0xdc
     19a:	505a      	str	r2, [r3, r1]
     19c:	3914      	subs	r1, #20
     19e:	505a      	str	r2, [r3, r1]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
     1a0:	4a03      	ldr	r2, [pc, #12]	; (1b0 <EDBG_COM_CLOCK_init+0x1c>)
     1a2:	69d3      	ldr	r3, [r2, #28]
     1a4:	39a8      	subs	r1, #168	; 0xa8
     1a6:	430b      	orrs	r3, r1
     1a8:	61d3      	str	r3, [r2, #28]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
     1aa:	4770      	bx	lr
     1ac:	40001c00 	.word	0x40001c00
     1b0:	40000800 	.word	0x40000800

000001b4 <EDBG_COM_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void EDBG_COM_PORT_init()
{
     1b4:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1b6:	2382      	movs	r3, #130	; 0x82
     1b8:	05db      	lsls	r3, r3, #23
     1ba:	22ca      	movs	r2, #202	; 0xca
     1bc:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1be:	2501      	movs	r5, #1
     1c0:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1c2:	2401      	movs	r4, #1
     1c4:	4321      	orrs	r1, r4
     1c6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1c8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1ca:	20b5      	movs	r0, #181	; 0xb5
     1cc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1ce:	3abb      	subs	r2, #187	; 0xbb
     1d0:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     1d2:	2203      	movs	r2, #3
     1d4:	4311      	orrs	r1, r2
     1d6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1d8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1da:	21cb      	movs	r1, #203	; 0xcb
     1dc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1de:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1e0:	4322      	orrs	r2, r4
     1e2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1e4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1e6:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     1e8:	39bc      	subs	r1, #188	; 0xbc
     1ea:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     1ec:	2130      	movs	r1, #48	; 0x30
     1ee:	430a      	orrs	r2, r1
     1f0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1f2:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(EDBG_COM_TX, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(EDBG_COM_RX, PINMUX_PB11D_SERCOM4_PAD3);
}
     1f4:	bd30      	pop	{r4, r5, pc}
	...

000001f8 <EDBG_COM_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void EDBG_COM_init(void)
{
     1f8:	b510      	push	{r4, lr}
     1fa:	b082      	sub	sp, #8
	EDBG_COM_CLOCK_init();
     1fc:	4b06      	ldr	r3, [pc, #24]	; (218 <EDBG_COM_init+0x20>)
     1fe:	4798      	blx	r3
	usart_async_init(&EDBG_COM, SERCOM4, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, (void *)NULL);
     200:	2300      	movs	r3, #0
     202:	9300      	str	r3, [sp, #0]
     204:	3310      	adds	r3, #16
     206:	4a05      	ldr	r2, [pc, #20]	; (21c <EDBG_COM_init+0x24>)
     208:	4905      	ldr	r1, [pc, #20]	; (220 <EDBG_COM_init+0x28>)
     20a:	4806      	ldr	r0, [pc, #24]	; (224 <EDBG_COM_init+0x2c>)
     20c:	4c06      	ldr	r4, [pc, #24]	; (228 <EDBG_COM_init+0x30>)
     20e:	47a0      	blx	r4
	EDBG_COM_PORT_init();
     210:	4b06      	ldr	r3, [pc, #24]	; (22c <EDBG_COM_init+0x34>)
     212:	4798      	blx	r3
}
     214:	b002      	add	sp, #8
     216:	bd10      	pop	{r4, pc}
     218:	00000195 	.word	0x00000195
     21c:	20000080 	.word	0x20000080
     220:	42001400 	.word	0x42001400
     224:	200000e8 	.word	0x200000e8
     228:	0000057d 	.word	0x0000057d
     22c:	000001b5 	.word	0x000001b5

00000230 <system_init>:

void system_init(void)
{
     230:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     232:	4b0b      	ldr	r3, [pc, #44]	; (260 <system_init+0x30>)
     234:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     236:	23c0      	movs	r3, #192	; 0xc0
     238:	05db      	lsls	r3, r3, #23
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0212      	lsls	r2, r2, #8
     23e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     240:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     242:	2382      	movs	r3, #130	; 0x82
     244:	05db      	lsls	r3, r3, #23
     246:	4a07      	ldr	r2, [pc, #28]	; (264 <system_init+0x34>)
     248:	629a      	str	r2, [r3, #40]	; 0x28
     24a:	22c0      	movs	r2, #192	; 0xc0
     24c:	0612      	lsls	r2, r2, #24
     24e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     250:	214f      	movs	r1, #79	; 0x4f
     252:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     254:	2001      	movs	r0, #1
     256:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     258:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EDBG_COM_init();
     25a:	4b03      	ldr	r3, [pc, #12]	; (268 <system_init+0x38>)
     25c:	4798      	blx	r3
}
     25e:	bd10      	pop	{r4, pc}
     260:	0000080d 	.word	0x0000080d
     264:	40008000 	.word	0x40008000
     268:	000001f9 	.word	0x000001f9

0000026c <tx_cb_EDBG_COM>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	0212      	lsls	r2, r2, #8
     270:	23c0      	movs	r3, #192	; 0xc0
     272:	05db      	lsls	r3, r3, #23
     274:	61da      	str	r2, [r3, #28]

static void tx_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
	gpio_toggle_pin_level(LED0);
}
     276:	4770      	bx	lr

00000278 <rx_cb_EDBG_COM>:

static void rx_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
	/* Receive completed */
	data_arrived = 1;
     278:	2201      	movs	r2, #1
     27a:	4b01      	ldr	r3, [pc, #4]	; (280 <rx_cb_EDBG_COM+0x8>)
     27c:	601a      	str	r2, [r3, #0]
}
     27e:	4770      	bx	lr
     280:	20000090 	.word	0x20000090

00000284 <err_cb_EDBG_COM>:

static void err_cb_EDBG_COM(const struct usart_async_descriptor *const io_descr)
{
     284:	b510      	push	{r4, lr}
	/* error handle */
	io_write(&EDBG_COM.io, buffer, 14);
     286:	220e      	movs	r2, #14
     288:	4902      	ldr	r1, [pc, #8]	; (294 <err_cb_EDBG_COM+0x10>)
     28a:	3104      	adds	r1, #4
     28c:	4802      	ldr	r0, [pc, #8]	; (298 <err_cb_EDBG_COM+0x14>)
     28e:	4b03      	ldr	r3, [pc, #12]	; (29c <err_cb_EDBG_COM+0x18>)
     290:	4798      	blx	r3
}
     292:	bd10      	pop	{r4, pc}
     294:	20000090 	.word	0x20000090
     298:	200000e8 	.word	0x200000e8
     29c:	000003a1 	.word	0x000003a1

000002a0 <main>:

int main(void)
{
     2a0:	b570      	push	{r4, r5, r6, lr}
     2a2:	b082      	sub	sp, #8
	uint8_t recv_char;
	float test = 1.1;
	atmel_start_init();
     2a4:	4b21      	ldr	r3, [pc, #132]	; (32c <main+0x8c>)
     2a6:	4798      	blx	r3
	sprintf((char*) &buffer,"Float : %f\r\n",test);
     2a8:	4d21      	ldr	r5, [pc, #132]	; (330 <main+0x90>)
     2aa:	3504      	adds	r5, #4
     2ac:	22a0      	movs	r2, #160	; 0xa0
     2ae:	0612      	lsls	r2, r2, #24
     2b0:	4b20      	ldr	r3, [pc, #128]	; (334 <main+0x94>)
     2b2:	4921      	ldr	r1, [pc, #132]	; (338 <main+0x98>)
     2b4:	0028      	movs	r0, r5
     2b6:	4c21      	ldr	r4, [pc, #132]	; (33c <main+0x9c>)
     2b8:	47a0      	blx	r4
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_TXC_CB, tx_cb_EDBG_COM);
     2ba:	4c21      	ldr	r4, [pc, #132]	; (340 <main+0xa0>)
     2bc:	4a21      	ldr	r2, [pc, #132]	; (344 <main+0xa4>)
     2be:	2101      	movs	r1, #1
     2c0:	0020      	movs	r0, r4
     2c2:	4e21      	ldr	r6, [pc, #132]	; (348 <main+0xa8>)
     2c4:	47b0      	blx	r6
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_RXC_CB, rx_cb_EDBG_COM);
     2c6:	4a21      	ldr	r2, [pc, #132]	; (34c <main+0xac>)
     2c8:	2100      	movs	r1, #0
     2ca:	0020      	movs	r0, r4
     2cc:	47b0      	blx	r6
	usart_async_register_callback(&EDBG_COM, USART_ASYNC_ERROR_CB, err_cb_EDBG_COM);
     2ce:	4a20      	ldr	r2, [pc, #128]	; (350 <main+0xb0>)
     2d0:	2102      	movs	r1, #2
     2d2:	0020      	movs	r0, r4
     2d4:	47b0      	blx	r6
	usart_async_enable(&EDBG_COM);
     2d6:	0020      	movs	r0, r4
     2d8:	4b1e      	ldr	r3, [pc, #120]	; (354 <main+0xb4>)
     2da:	4798      	blx	r3

	io_write(&EDBG_COM.io, buffer, 16);
     2dc:	2210      	movs	r2, #16
     2de:	0029      	movs	r1, r5
     2e0:	0020      	movs	r0, r4
     2e2:	4b1d      	ldr	r3, [pc, #116]	; (358 <main+0xb8>)
     2e4:	4798      	blx	r3
     2e6:	e012      	b.n	30e <main+0x6e>
		if (data_arrived == 0) {
			continue;
		}

		while (io_read(&EDBG_COM.io, &recv_char, 1) == 1) {
			while (io_write(&EDBG_COM.io, &recv_char, 1) != 1) {
     2e8:	2201      	movs	r2, #1
     2ea:	466b      	mov	r3, sp
     2ec:	1dd9      	adds	r1, r3, #7
     2ee:	4814      	ldr	r0, [pc, #80]	; (340 <main+0xa0>)
     2f0:	4b19      	ldr	r3, [pc, #100]	; (358 <main+0xb8>)
     2f2:	4798      	blx	r3
     2f4:	2801      	cmp	r0, #1
     2f6:	d1f7      	bne.n	2e8 <main+0x48>
		while (io_read(&EDBG_COM.io, &recv_char, 1) == 1) {
     2f8:	2201      	movs	r2, #1
     2fa:	466b      	mov	r3, sp
     2fc:	1dd9      	adds	r1, r3, #7
     2fe:	4810      	ldr	r0, [pc, #64]	; (340 <main+0xa0>)
     300:	4b16      	ldr	r3, [pc, #88]	; (35c <main+0xbc>)
     302:	4798      	blx	r3
     304:	2801      	cmp	r0, #1
     306:	d0ef      	beq.n	2e8 <main+0x48>
			}
		}
		data_arrived = 0;
     308:	2200      	movs	r2, #0
     30a:	4b09      	ldr	r3, [pc, #36]	; (330 <main+0x90>)
     30c:	601a      	str	r2, [r3, #0]
		delay_ms(1000);
     30e:	20fa      	movs	r0, #250	; 0xfa
     310:	0080      	lsls	r0, r0, #2
     312:	4b13      	ldr	r3, [pc, #76]	; (360 <main+0xc0>)
     314:	4798      	blx	r3
		io_write(&EDBG_COM.io, buffer, 16);
     316:	4c06      	ldr	r4, [pc, #24]	; (330 <main+0x90>)
     318:	1d21      	adds	r1, r4, #4
     31a:	2210      	movs	r2, #16
     31c:	4808      	ldr	r0, [pc, #32]	; (340 <main+0xa0>)
     31e:	4b0e      	ldr	r3, [pc, #56]	; (358 <main+0xb8>)
     320:	4798      	blx	r3
		if (data_arrived == 0) {
     322:	6823      	ldr	r3, [r4, #0]
     324:	2b00      	cmp	r3, #0
     326:	d0f2      	beq.n	30e <main+0x6e>
     328:	e7e6      	b.n	2f8 <main+0x58>
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	0000011d 	.word	0x0000011d
     330:	20000090 	.word	0x20000090
     334:	3ff19999 	.word	0x3ff19999
     338:	000014f4 	.word	0x000014f4
     33c:	00000cb5 	.word	0x00000cb5
     340:	200000e8 	.word	0x200000e8
     344:	0000026d 	.word	0x0000026d
     348:	00000645 	.word	0x00000645
     34c:	00000279 	.word	0x00000279
     350:	00000285 	.word	0x00000285
     354:	00000619 	.word	0x00000619
     358:	000003a1 	.word	0x000003a1
     35c:	000003d9 	.word	0x000003d9
     360:	00000381 	.word	0x00000381

00000364 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     364:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     368:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     36a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     36c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     370:	4770      	bx	lr

00000372 <atomic_leave_critical>:
     372:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     376:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     378:	f383 8810 	msr	PRIMASK, r3
}
     37c:	4770      	bx	lr
	...

00000380 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     380:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     382:	4b04      	ldr	r3, [pc, #16]	; (394 <delay_ms+0x14>)
     384:	681c      	ldr	r4, [r3, #0]
     386:	4b04      	ldr	r3, [pc, #16]	; (398 <delay_ms+0x18>)
     388:	4798      	blx	r3
     38a:	0001      	movs	r1, r0
     38c:	0020      	movs	r0, r4
     38e:	4b03      	ldr	r3, [pc, #12]	; (39c <delay_ms+0x1c>)
     390:	4798      	blx	r3
}
     392:	bd10      	pop	{r4, pc}
     394:	200000d4 	.word	0x200000d4
     398:	000007e5 	.word	0x000007e5
     39c:	00000805 	.word	0x00000805

000003a0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     3a0:	b570      	push	{r4, r5, r6, lr}
     3a2:	0004      	movs	r4, r0
     3a4:	000d      	movs	r5, r1
     3a6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     3a8:	2800      	cmp	r0, #0
     3aa:	d00e      	beq.n	3ca <io_write+0x2a>
     3ac:	2900      	cmp	r1, #0
     3ae:	d00a      	beq.n	3c6 <io_write+0x26>
     3b0:	2001      	movs	r0, #1
     3b2:	2234      	movs	r2, #52	; 0x34
     3b4:	4906      	ldr	r1, [pc, #24]	; (3d0 <io_write+0x30>)
     3b6:	4b07      	ldr	r3, [pc, #28]	; (3d4 <io_write+0x34>)
     3b8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     3ba:	6823      	ldr	r3, [r4, #0]
     3bc:	0032      	movs	r2, r6
     3be:	0029      	movs	r1, r5
     3c0:	0020      	movs	r0, r4
     3c2:	4798      	blx	r3
}
     3c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     3c6:	2000      	movs	r0, #0
     3c8:	e7f3      	b.n	3b2 <io_write+0x12>
     3ca:	2000      	movs	r0, #0
     3cc:	e7f1      	b.n	3b2 <io_write+0x12>
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	00001504 	.word	0x00001504
     3d4:	000006bd 	.word	0x000006bd

000003d8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     3d8:	b570      	push	{r4, r5, r6, lr}
     3da:	0004      	movs	r4, r0
     3dc:	000d      	movs	r5, r1
     3de:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     3e0:	2800      	cmp	r0, #0
     3e2:	d00e      	beq.n	402 <io_read+0x2a>
     3e4:	2900      	cmp	r1, #0
     3e6:	d00a      	beq.n	3fe <io_read+0x26>
     3e8:	2001      	movs	r0, #1
     3ea:	223d      	movs	r2, #61	; 0x3d
     3ec:	4906      	ldr	r1, [pc, #24]	; (408 <io_read+0x30>)
     3ee:	4b07      	ldr	r3, [pc, #28]	; (40c <io_read+0x34>)
     3f0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     3f2:	6863      	ldr	r3, [r4, #4]
     3f4:	0032      	movs	r2, r6
     3f6:	0029      	movs	r1, r5
     3f8:	0020      	movs	r0, r4
     3fa:	4798      	blx	r3
}
     3fc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     3fe:	2000      	movs	r0, #0
     400:	e7f3      	b.n	3ea <io_read+0x12>
     402:	2000      	movs	r0, #0
     404:	e7f1      	b.n	3ea <io_read+0x12>
     406:	46c0      	nop			; (mov r8, r8)
     408:	00001504 	.word	0x00001504
     40c:	000006bd 	.word	0x000006bd

00000410 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     410:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     412:	3808      	subs	r0, #8

	descr->stat = 0;
     414:	2300      	movs	r3, #0
     416:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     418:	6a43      	ldr	r3, [r0, #36]	; 0x24
     41a:	2b00      	cmp	r3, #0
     41c:	d000      	beq.n	420 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     41e:	4798      	blx	r3
	}
}
     420:	bd10      	pop	{r4, pc}

00000422 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     422:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     424:	3808      	subs	r0, #8

	descr->stat = 0;
     426:	2300      	movs	r3, #0
     428:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     42a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     42c:	2b00      	cmp	r3, #0
     42e:	d000      	beq.n	432 <usart_error+0x10>
		descr->usart_cb.error(descr);
     430:	4798      	blx	r3
	}
}
     432:	bd10      	pop	{r4, pc}

00000434 <usart_fill_rx_buffer>:
{
     434:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     436:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     438:	302c      	adds	r0, #44	; 0x2c
     43a:	4b04      	ldr	r3, [pc, #16]	; (44c <usart_fill_rx_buffer+0x18>)
     43c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     43e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     440:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     442:	2b00      	cmp	r3, #0
     444:	d001      	beq.n	44a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     446:	0020      	movs	r0, r4
     448:	4798      	blx	r3
}
     44a:	bd10      	pop	{r4, pc}
     44c:	0000075d 	.word	0x0000075d

00000450 <usart_async_write>:
{
     450:	b570      	push	{r4, r5, r6, lr}
     452:	0004      	movs	r4, r0
     454:	000e      	movs	r6, r1
     456:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     458:	2800      	cmp	r0, #0
     45a:	d01d      	beq.n	498 <usart_async_write+0x48>
     45c:	2900      	cmp	r1, #0
     45e:	d01d      	beq.n	49c <usart_async_write+0x4c>
     460:	2a00      	cmp	r2, #0
     462:	d11d      	bne.n	4a0 <usart_async_write+0x50>
     464:	2000      	movs	r0, #0
     466:	223c      	movs	r2, #60	; 0x3c
     468:	32ff      	adds	r2, #255	; 0xff
     46a:	4910      	ldr	r1, [pc, #64]	; (4ac <usart_async_write+0x5c>)
     46c:	4b10      	ldr	r3, [pc, #64]	; (4b0 <usart_async_write+0x60>)
     46e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     470:	2344      	movs	r3, #68	; 0x44
     472:	5ae2      	ldrh	r2, [r4, r3]
     474:	3308      	adds	r3, #8
     476:	5ae3      	ldrh	r3, [r4, r3]
     478:	429a      	cmp	r2, r3
     47a:	d113      	bne.n	4a4 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     47c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     47e:	234c      	movs	r3, #76	; 0x4c
     480:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     482:	2200      	movs	r2, #0
     484:	3b08      	subs	r3, #8
     486:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     488:	3b43      	subs	r3, #67	; 0x43
     48a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     48c:	0020      	movs	r0, r4
     48e:	3008      	adds	r0, #8
     490:	4b08      	ldr	r3, [pc, #32]	; (4b4 <usart_async_write+0x64>)
     492:	4798      	blx	r3
	return (int32_t)length;
     494:	0028      	movs	r0, r5
}
     496:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     498:	2000      	movs	r0, #0
     49a:	e7e4      	b.n	466 <usart_async_write+0x16>
     49c:	2000      	movs	r0, #0
     49e:	e7e2      	b.n	466 <usart_async_write+0x16>
     4a0:	2001      	movs	r0, #1
     4a2:	e7e0      	b.n	466 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     4a4:	201c      	movs	r0, #28
     4a6:	4240      	negs	r0, r0
     4a8:	e7f5      	b.n	496 <usart_async_write+0x46>
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	00001518 	.word	0x00001518
     4b0:	000006bd 	.word	0x000006bd
     4b4:	00000bcf 	.word	0x00000bcf

000004b8 <usart_process_byte_sent>:
{
     4b8:	b570      	push	{r4, r5, r6, lr}
     4ba:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     4bc:	0002      	movs	r2, r0
     4be:	3a08      	subs	r2, #8
     4c0:	2344      	movs	r3, #68	; 0x44
     4c2:	5ad3      	ldrh	r3, [r2, r3]
     4c4:	214c      	movs	r1, #76	; 0x4c
     4c6:	5a52      	ldrh	r2, [r2, r1]
     4c8:	4293      	cmp	r3, r2
     4ca:	d00d      	beq.n	4e8 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     4cc:	0002      	movs	r2, r0
     4ce:	6c01      	ldr	r1, [r0, #64]	; 0x40
     4d0:	3a08      	subs	r2, #8
     4d2:	1c5d      	adds	r5, r3, #1
     4d4:	2044      	movs	r0, #68	; 0x44
     4d6:	5215      	strh	r5, [r2, r0]
     4d8:	5cc9      	ldrb	r1, [r1, r3]
     4da:	0020      	movs	r0, r4
     4dc:	4b04      	ldr	r3, [pc, #16]	; (4f0 <usart_process_byte_sent+0x38>)
     4de:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     4e0:	0020      	movs	r0, r4
     4e2:	4b04      	ldr	r3, [pc, #16]	; (4f4 <usart_process_byte_sent+0x3c>)
     4e4:	4798      	blx	r3
}
     4e6:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     4e8:	4b03      	ldr	r3, [pc, #12]	; (4f8 <usart_process_byte_sent+0x40>)
     4ea:	4798      	blx	r3
}
     4ec:	e7fb      	b.n	4e6 <usart_process_byte_sent+0x2e>
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	00000bc7 	.word	0x00000bc7
     4f4:	00000bcf 	.word	0x00000bcf
     4f8:	00000bd7 	.word	0x00000bd7

000004fc <usart_async_read>:
{
     4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fe:	b085      	sub	sp, #20
     500:	0004      	movs	r4, r0
     502:	000d      	movs	r5, r1
     504:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     506:	2800      	cmp	r0, #0
     508:	d017      	beq.n	53a <usart_async_read+0x3e>
     50a:	2900      	cmp	r1, #0
     50c:	d017      	beq.n	53e <usart_async_read+0x42>
     50e:	2a00      	cmp	r2, #0
     510:	d117      	bne.n	542 <usart_async_read+0x46>
     512:	2000      	movs	r0, #0
     514:	22ac      	movs	r2, #172	; 0xac
     516:	0052      	lsls	r2, r2, #1
     518:	4912      	ldr	r1, [pc, #72]	; (564 <usart_async_read+0x68>)
     51a:	4b13      	ldr	r3, [pc, #76]	; (568 <usart_async_read+0x6c>)
     51c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     51e:	a803      	add	r0, sp, #12
     520:	4b12      	ldr	r3, [pc, #72]	; (56c <usart_async_read+0x70>)
     522:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     524:	3434      	adds	r4, #52	; 0x34
     526:	0020      	movs	r0, r4
     528:	9401      	str	r4, [sp, #4]
     52a:	4b11      	ldr	r3, [pc, #68]	; (570 <usart_async_read+0x74>)
     52c:	4798      	blx	r3
     52e:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     530:	a803      	add	r0, sp, #12
     532:	4b10      	ldr	r3, [pc, #64]	; (574 <usart_async_read+0x78>)
     534:	4798      	blx	r3
	uint16_t                       was_read = 0;
     536:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     538:	e00b      	b.n	552 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     53a:	2000      	movs	r0, #0
     53c:	e7ea      	b.n	514 <usart_async_read+0x18>
     53e:	2000      	movs	r0, #0
     540:	e7e8      	b.n	514 <usart_async_read+0x18>
     542:	2001      	movs	r0, #1
     544:	e7e6      	b.n	514 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     546:	3401      	adds	r4, #1
     548:	b2a4      	uxth	r4, r4
     54a:	1869      	adds	r1, r5, r1
     54c:	9801      	ldr	r0, [sp, #4]
     54e:	4b0a      	ldr	r3, [pc, #40]	; (578 <usart_async_read+0x7c>)
     550:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     552:	0021      	movs	r1, r4
     554:	42a7      	cmp	r7, r4
     556:	d901      	bls.n	55c <usart_async_read+0x60>
     558:	42b4      	cmp	r4, r6
     55a:	d3f4      	bcc.n	546 <usart_async_read+0x4a>
}
     55c:	0020      	movs	r0, r4
     55e:	b005      	add	sp, #20
     560:	bdf0      	pop	{r4, r5, r6, r7, pc}
     562:	46c0      	nop			; (mov r8, r8)
     564:	00001518 	.word	0x00001518
     568:	000006bd 	.word	0x000006bd
     56c:	00000365 	.word	0x00000365
     570:	0000079d 	.word	0x0000079d
     574:	00000373 	.word	0x00000373
     578:	00000711 	.word	0x00000711

0000057c <usart_async_init>:
{
     57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     57e:	0004      	movs	r4, r0
     580:	000d      	movs	r5, r1
     582:	0016      	movs	r6, r2
     584:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     586:	2800      	cmp	r0, #0
     588:	d026      	beq.n	5d8 <usart_async_init+0x5c>
     58a:	2900      	cmp	r1, #0
     58c:	d026      	beq.n	5dc <usart_async_init+0x60>
     58e:	2a00      	cmp	r2, #0
     590:	d026      	beq.n	5e0 <usart_async_init+0x64>
     592:	2b00      	cmp	r3, #0
     594:	d126      	bne.n	5e4 <usart_async_init+0x68>
     596:	2000      	movs	r0, #0
     598:	223a      	movs	r2, #58	; 0x3a
     59a:	4915      	ldr	r1, [pc, #84]	; (5f0 <usart_async_init+0x74>)
     59c:	4b15      	ldr	r3, [pc, #84]	; (5f4 <usart_async_init+0x78>)
     59e:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     5a0:	0020      	movs	r0, r4
     5a2:	3034      	adds	r0, #52	; 0x34
     5a4:	003a      	movs	r2, r7
     5a6:	0031      	movs	r1, r6
     5a8:	4b13      	ldr	r3, [pc, #76]	; (5f8 <usart_async_init+0x7c>)
     5aa:	4798      	blx	r3
     5ac:	2800      	cmp	r0, #0
     5ae:	d11b      	bne.n	5e8 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     5b0:	0020      	movs	r0, r4
     5b2:	3008      	adds	r0, #8
     5b4:	0029      	movs	r1, r5
     5b6:	4b11      	ldr	r3, [pc, #68]	; (5fc <usart_async_init+0x80>)
     5b8:	4798      	blx	r3
	if (init_status) {
     5ba:	2800      	cmp	r0, #0
     5bc:	d10b      	bne.n	5d6 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     5be:	4b10      	ldr	r3, [pc, #64]	; (600 <usart_async_init+0x84>)
     5c0:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     5c2:	4b10      	ldr	r3, [pc, #64]	; (604 <usart_async_init+0x88>)
     5c4:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     5c6:	4b10      	ldr	r3, [pc, #64]	; (608 <usart_async_init+0x8c>)
     5c8:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     5ca:	4b10      	ldr	r3, [pc, #64]	; (60c <usart_async_init+0x90>)
     5cc:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     5ce:	4b10      	ldr	r3, [pc, #64]	; (610 <usart_async_init+0x94>)
     5d0:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     5d2:	4b10      	ldr	r3, [pc, #64]	; (614 <usart_async_init+0x98>)
     5d4:	6163      	str	r3, [r4, #20]
}
     5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     5d8:	2000      	movs	r0, #0
     5da:	e7dd      	b.n	598 <usart_async_init+0x1c>
     5dc:	2000      	movs	r0, #0
     5de:	e7db      	b.n	598 <usart_async_init+0x1c>
     5e0:	2000      	movs	r0, #0
     5e2:	e7d9      	b.n	598 <usart_async_init+0x1c>
     5e4:	2001      	movs	r0, #1
     5e6:	e7d7      	b.n	598 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     5e8:	200d      	movs	r0, #13
     5ea:	4240      	negs	r0, r0
     5ec:	e7f3      	b.n	5d6 <usart_async_init+0x5a>
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	00001518 	.word	0x00001518
     5f4:	000006bd 	.word	0x000006bd
     5f8:	000006c5 	.word	0x000006c5
     5fc:	00000b29 	.word	0x00000b29
     600:	000004fd 	.word	0x000004fd
     604:	00000451 	.word	0x00000451
     608:	000004b9 	.word	0x000004b9
     60c:	00000435 	.word	0x00000435
     610:	00000411 	.word	0x00000411
     614:	00000423 	.word	0x00000423

00000618 <usart_async_enable>:
{
     618:	b510      	push	{r4, lr}
     61a:	0004      	movs	r4, r0
	ASSERT(descr);
     61c:	1e43      	subs	r3, r0, #1
     61e:	4198      	sbcs	r0, r3
     620:	b2c0      	uxtb	r0, r0
     622:	2261      	movs	r2, #97	; 0x61
     624:	4904      	ldr	r1, [pc, #16]	; (638 <usart_async_enable+0x20>)
     626:	4b05      	ldr	r3, [pc, #20]	; (63c <usart_async_enable+0x24>)
     628:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     62a:	0020      	movs	r0, r4
     62c:	3008      	adds	r0, #8
     62e:	4b04      	ldr	r3, [pc, #16]	; (640 <usart_async_enable+0x28>)
     630:	4798      	blx	r3
}
     632:	2000      	movs	r0, #0
     634:	bd10      	pop	{r4, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	00001518 	.word	0x00001518
     63c:	000006bd 	.word	0x000006bd
     640:	00000bb5 	.word	0x00000bb5

00000644 <usart_async_register_callback>:
{
     644:	b570      	push	{r4, r5, r6, lr}
     646:	0005      	movs	r5, r0
     648:	000e      	movs	r6, r1
     64a:	0014      	movs	r4, r2
	ASSERT(descr);
     64c:	1e43      	subs	r3, r0, #1
     64e:	4198      	sbcs	r0, r3
     650:	b2c0      	uxtb	r0, r0
     652:	2283      	movs	r2, #131	; 0x83
     654:	4916      	ldr	r1, [pc, #88]	; (6b0 <usart_async_register_callback+0x6c>)
     656:	4b17      	ldr	r3, [pc, #92]	; (6b4 <usart_async_register_callback+0x70>)
     658:	4798      	blx	r3
	switch (type) {
     65a:	2e01      	cmp	r6, #1
     65c:	d011      	beq.n	682 <usart_async_register_callback+0x3e>
     65e:	2e00      	cmp	r6, #0
     660:	d004      	beq.n	66c <usart_async_register_callback+0x28>
     662:	2e02      	cmp	r6, #2
     664:	d018      	beq.n	698 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     666:	200d      	movs	r0, #13
     668:	4240      	negs	r0, r0
     66a:	e009      	b.n	680 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     66c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     66e:	1e62      	subs	r2, r4, #1
     670:	4194      	sbcs	r4, r2
     672:	b2e2      	uxtb	r2, r4
     674:	0028      	movs	r0, r5
     676:	3008      	adds	r0, #8
     678:	2101      	movs	r1, #1
     67a:	4b0f      	ldr	r3, [pc, #60]	; (6b8 <usart_async_register_callback+0x74>)
     67c:	4798      	blx	r3
	return ERR_NONE;
     67e:	2000      	movs	r0, #0
}
     680:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     682:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     684:	1e62      	subs	r2, r4, #1
     686:	4194      	sbcs	r4, r2
     688:	b2e2      	uxtb	r2, r4
     68a:	0028      	movs	r0, r5
     68c:	3008      	adds	r0, #8
     68e:	2102      	movs	r1, #2
     690:	4b09      	ldr	r3, [pc, #36]	; (6b8 <usart_async_register_callback+0x74>)
     692:	4798      	blx	r3
	return ERR_NONE;
     694:	2000      	movs	r0, #0
		break;
     696:	e7f3      	b.n	680 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     698:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     69a:	1e62      	subs	r2, r4, #1
     69c:	4194      	sbcs	r4, r2
     69e:	b2e2      	uxtb	r2, r4
     6a0:	0028      	movs	r0, r5
     6a2:	3008      	adds	r0, #8
     6a4:	2103      	movs	r1, #3
     6a6:	4b04      	ldr	r3, [pc, #16]	; (6b8 <usart_async_register_callback+0x74>)
     6a8:	4798      	blx	r3
	return ERR_NONE;
     6aa:	2000      	movs	r0, #0
		break;
     6ac:	e7e8      	b.n	680 <usart_async_register_callback+0x3c>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	00001518 	.word	0x00001518
     6b4:	000006bd 	.word	0x000006bd
     6b8:	00000be1 	.word	0x00000be1

000006bc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     6bc:	2800      	cmp	r0, #0
     6be:	d100      	bne.n	6c2 <assert+0x6>
		__asm("BKPT #0");
     6c0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     6c2:	4770      	bx	lr

000006c4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	0004      	movs	r4, r0
     6c8:	000e      	movs	r6, r1
     6ca:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     6cc:	2800      	cmp	r0, #0
     6ce:	d012      	beq.n	6f6 <ringbuffer_init+0x32>
     6d0:	2900      	cmp	r1, #0
     6d2:	d012      	beq.n	6fa <ringbuffer_init+0x36>
     6d4:	2a00      	cmp	r2, #0
     6d6:	d112      	bne.n	6fe <ringbuffer_init+0x3a>
     6d8:	2000      	movs	r0, #0
     6da:	2228      	movs	r2, #40	; 0x28
     6dc:	490a      	ldr	r1, [pc, #40]	; (708 <ringbuffer_init+0x44>)
     6de:	4b0b      	ldr	r3, [pc, #44]	; (70c <ringbuffer_init+0x48>)
     6e0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     6e2:	1e6b      	subs	r3, r5, #1
     6e4:	422b      	tst	r3, r5
     6e6:	d10c      	bne.n	702 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     6e8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     6ea:	2300      	movs	r3, #0
     6ec:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     6ee:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     6f0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     6f2:	2000      	movs	r0, #0
}
     6f4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     6f6:	2000      	movs	r0, #0
     6f8:	e7ef      	b.n	6da <ringbuffer_init+0x16>
     6fa:	2000      	movs	r0, #0
     6fc:	e7ed      	b.n	6da <ringbuffer_init+0x16>
     6fe:	2001      	movs	r0, #1
     700:	e7eb      	b.n	6da <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     702:	200d      	movs	r0, #13
     704:	4240      	negs	r0, r0
     706:	e7f5      	b.n	6f4 <ringbuffer_init+0x30>
     708:	00001538 	.word	0x00001538
     70c:	000006bd 	.word	0x000006bd

00000710 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     710:	b570      	push	{r4, r5, r6, lr}
     712:	0004      	movs	r4, r0
     714:	000d      	movs	r5, r1
	ASSERT(rb && data);
     716:	2800      	cmp	r0, #0
     718:	d016      	beq.n	748 <ringbuffer_get+0x38>
     71a:	2900      	cmp	r1, #0
     71c:	d012      	beq.n	744 <ringbuffer_get+0x34>
     71e:	2001      	movs	r0, #1
     720:	2240      	movs	r2, #64	; 0x40
     722:	490c      	ldr	r1, [pc, #48]	; (754 <ringbuffer_get+0x44>)
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <ringbuffer_get+0x48>)
     726:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     728:	68a3      	ldr	r3, [r4, #8]
     72a:	68e2      	ldr	r2, [r4, #12]
     72c:	429a      	cmp	r2, r3
     72e:	d00d      	beq.n	74c <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     730:	6862      	ldr	r2, [r4, #4]
     732:	4013      	ands	r3, r2
     734:	6822      	ldr	r2, [r4, #0]
     736:	5cd3      	ldrb	r3, [r2, r3]
     738:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     73a:	68a3      	ldr	r3, [r4, #8]
     73c:	3301      	adds	r3, #1
     73e:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     740:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     742:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     744:	2000      	movs	r0, #0
     746:	e7eb      	b.n	720 <ringbuffer_get+0x10>
     748:	2000      	movs	r0, #0
     74a:	e7e9      	b.n	720 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     74c:	200a      	movs	r0, #10
     74e:	4240      	negs	r0, r0
     750:	e7f7      	b.n	742 <ringbuffer_get+0x32>
     752:	46c0      	nop			; (mov r8, r8)
     754:	00001538 	.word	0x00001538
     758:	000006bd 	.word	0x000006bd

0000075c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	0004      	movs	r4, r0
     760:	000d      	movs	r5, r1
	ASSERT(rb);
     762:	1e43      	subs	r3, r0, #1
     764:	4198      	sbcs	r0, r3
     766:	b2c0      	uxtb	r0, r0
     768:	2251      	movs	r2, #81	; 0x51
     76a:	490a      	ldr	r1, [pc, #40]	; (794 <ringbuffer_put+0x38>)
     76c:	4b0a      	ldr	r3, [pc, #40]	; (798 <ringbuffer_put+0x3c>)
     76e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     770:	6863      	ldr	r3, [r4, #4]
     772:	68e2      	ldr	r2, [r4, #12]
     774:	4013      	ands	r3, r2
     776:	6822      	ldr	r2, [r4, #0]
     778:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     77a:	68e3      	ldr	r3, [r4, #12]
     77c:	68a2      	ldr	r2, [r4, #8]
     77e:	1a9a      	subs	r2, r3, r2
     780:	6861      	ldr	r1, [r4, #4]
     782:	428a      	cmp	r2, r1
     784:	d901      	bls.n	78a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     786:	1a59      	subs	r1, r3, r1
     788:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     78a:	3301      	adds	r3, #1
     78c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     78e:	2000      	movs	r0, #0
     790:	bd70      	pop	{r4, r5, r6, pc}
     792:	46c0      	nop			; (mov r8, r8)
     794:	00001538 	.word	0x00001538
     798:	000006bd 	.word	0x000006bd

0000079c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     79c:	b510      	push	{r4, lr}
     79e:	0004      	movs	r4, r0
	ASSERT(rb);
     7a0:	1e43      	subs	r3, r0, #1
     7a2:	4198      	sbcs	r0, r3
     7a4:	b2c0      	uxtb	r0, r0
     7a6:	2267      	movs	r2, #103	; 0x67
     7a8:	4903      	ldr	r1, [pc, #12]	; (7b8 <ringbuffer_num+0x1c>)
     7aa:	4b04      	ldr	r3, [pc, #16]	; (7bc <ringbuffer_num+0x20>)
     7ac:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     7ae:	68e0      	ldr	r0, [r4, #12]
     7b0:	68a3      	ldr	r3, [r4, #8]
     7b2:	1ac0      	subs	r0, r0, r3
}
     7b4:	bd10      	pop	{r4, pc}
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	00001538 	.word	0x00001538
     7bc:	000006bd 	.word	0x000006bd

000007c0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     7c0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     7c2:	4a06      	ldr	r2, [pc, #24]	; (7dc <_sbrk+0x1c>)
     7c4:	6812      	ldr	r2, [r2, #0]
     7c6:	2a00      	cmp	r2, #0
     7c8:	d004      	beq.n	7d4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     7ca:	4a04      	ldr	r2, [pc, #16]	; (7dc <_sbrk+0x1c>)
     7cc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     7ce:	18c3      	adds	r3, r0, r3
     7d0:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     7d2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     7d4:	4902      	ldr	r1, [pc, #8]	; (7e0 <_sbrk+0x20>)
     7d6:	4a01      	ldr	r2, [pc, #4]	; (7dc <_sbrk+0x1c>)
     7d8:	6011      	str	r1, [r2, #0]
     7da:	e7f6      	b.n	7ca <_sbrk+0xa>
     7dc:	200000d8 	.word	0x200000d8
     7e0:	20002140 	.word	0x20002140

000007e4 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     7e4:	b510      	push	{r4, lr}
     7e6:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
     7e8:	20c8      	movs	r0, #200	; 0xc8
     7ea:	0040      	lsls	r0, r0, #1
     7ec:	4358      	muls	r0, r3
     7ee:	3002      	adds	r0, #2
     7f0:	2103      	movs	r1, #3
     7f2:	4b03      	ldr	r3, [pc, #12]	; (800 <_get_cycles_for_ms+0x1c>)
     7f4:	4798      	blx	r3
     7f6:	0083      	lsls	r3, r0, #2
     7f8:	181b      	adds	r3, r3, r0
     7fa:	0058      	lsls	r0, r3, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     7fc:	bd10      	pop	{r4, pc}
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	0000085b 	.word	0x0000085b

00000804 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     804:	3901      	subs	r1, #1
     806:	d8fd      	bhi.n	804 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     808:	4770      	bx	lr
	...

0000080c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     80c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     80e:	4b08      	ldr	r3, [pc, #32]	; (830 <_init_chip+0x24>)
     810:	685a      	ldr	r2, [r3, #4]
     812:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     814:	4b07      	ldr	r3, [pc, #28]	; (834 <_init_chip+0x28>)
     816:	4798      	blx	r3
	_oscctrl_init_sources();
     818:	4b07      	ldr	r3, [pc, #28]	; (838 <_init_chip+0x2c>)
     81a:	4798      	blx	r3
	_mclk_init();
     81c:	4b07      	ldr	r3, [pc, #28]	; (83c <_init_chip+0x30>)
     81e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     820:	4b07      	ldr	r3, [pc, #28]	; (840 <_init_chip+0x34>)
     822:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     824:	20ff      	movs	r0, #255	; 0xff
     826:	4b07      	ldr	r3, [pc, #28]	; (844 <_init_chip+0x38>)
     828:	4798      	blx	r3

	_div_init();
     82a:	4b07      	ldr	r3, [pc, #28]	; (848 <_init_chip+0x3c>)
     82c:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     82e:	bd10      	pop	{r4, pc}
     830:	41004000 	.word	0x41004000
     834:	000008fd 	.word	0x000008fd
     838:	00000919 	.word	0x00000919
     83c:	000008f1 	.word	0x000008f1
     840:	00000955 	.word	0x00000955
     844:	000008cd 	.word	0x000008cd
     848:	0000084d 	.word	0x0000084d

0000084c <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     84c:	2290      	movs	r2, #144	; 0x90
     84e:	05d2      	lsls	r2, r2, #23
     850:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     852:	2102      	movs	r1, #2
     854:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     856:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     858:	4770      	bx	lr

0000085a <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
     85a:	b510      	push	{r4, lr}
     85c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     85e:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
     862:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     864:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     866:	2390      	movs	r3, #144	; 0x90
     868:	05db      	lsls	r3, r3, #23
     86a:	781a      	ldrb	r2, [r3, #0]
     86c:	2401      	movs	r4, #1
     86e:	43a2      	bics	r2, r4
     870:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     872:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     874:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     876:	2390      	movs	r3, #144	; 0x90
     878:	05db      	lsls	r3, r3, #23
     87a:	791b      	ldrb	r3, [r3, #4]
     87c:	07db      	lsls	r3, r3, #31
     87e:	d4fa      	bmi.n	876 <__aeabi_uidiv+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
     880:	2390      	movs	r3, #144	; 0x90
     882:	05db      	lsls	r3, r3, #23
     884:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
     886:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     888:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     88c:	b002      	add	sp, #8
     88e:	bd10      	pop	{r4, pc}

00000890 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
     890:	b510      	push	{r4, lr}
     892:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     894:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
     898:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     89a:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
     89c:	2390      	movs	r3, #144	; 0x90
     89e:	05db      	lsls	r3, r3, #23
     8a0:	781a      	ldrb	r2, [r3, #0]
     8a2:	2401      	movs	r4, #1
     8a4:	43a2      	bics	r2, r4
     8a6:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
     8a8:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
     8aa:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
     8ac:	2390      	movs	r3, #144	; 0x90
     8ae:	05db      	lsls	r3, r3, #23
     8b0:	791b      	ldrb	r3, [r3, #4]
     8b2:	07db      	lsls	r3, r3, #31
     8b4:	d4fa      	bmi.n	8ac <__aeabi_uidivmod+0x1c>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
     8b6:	4b04      	ldr	r3, [pc, #16]	; (8c8 <__aeabi_uidivmod+0x38>)
     8b8:	6818      	ldr	r0, [r3, #0]
     8ba:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
     8bc:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     8be:	f383 8810 	msr	PRIMASK, r3
	return res;
}
     8c2:	b002      	add	sp, #8
     8c4:	bd10      	pop	{r4, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	48000010 	.word	0x48000010

000008cc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     8cc:	07c3      	lsls	r3, r0, #31
     8ce:	d507      	bpl.n	8e0 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     8d0:	4a04      	ldr	r2, [pc, #16]	; (8e4 <_gclk_init_generators_by_fref+0x18>)
     8d2:	4b05      	ldr	r3, [pc, #20]	; (8e8 <_gclk_init_generators_by_fref+0x1c>)
     8d4:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     8d6:	4b04      	ldr	r3, [pc, #16]	; (8e8 <_gclk_init_generators_by_fref+0x1c>)
     8d8:	685a      	ldr	r2, [r3, #4]
     8da:	4b04      	ldr	r3, [pc, #16]	; (8ec <_gclk_init_generators_by_fref+0x20>)
     8dc:	421a      	tst	r2, r3
     8de:	d1fa      	bne.n	8d6 <_gclk_init_generators_by_fref+0xa>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     8e0:	4770      	bx	lr
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	00010106 	.word	0x00010106
     8e8:	40001c00 	.word	0x40001c00
     8ec:	000007fd 	.word	0x000007fd

000008f0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     8f0:	2201      	movs	r2, #1
     8f2:	4b01      	ldr	r3, [pc, #4]	; (8f8 <_mclk_init+0x8>)
     8f4:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     8f6:	4770      	bx	lr
     8f8:	40000800 	.word	0x40000800

000008fc <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     8fc:	4a05      	ldr	r2, [pc, #20]	; (914 <_osc32kctrl_init_sources+0x18>)
     8fe:	69d3      	ldr	r3, [r2, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
     900:	0a1b      	lsrs	r3, r3, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     902:	021b      	lsls	r3, r3, #8
     904:	21f8      	movs	r1, #248	; 0xf8
     906:	0149      	lsls	r1, r1, #5
     908:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     90a:	61d3      	str	r3, [r2, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     90c:	2301      	movs	r3, #1
     90e:	6113      	str	r3, [r2, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     910:	4770      	bx	lr
     912:	46c0      	nop			; (mov r8, r8)
     914:	40001400 	.word	0x40001400

00000918 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
     918:	4b0d      	ldr	r3, [pc, #52]	; (950 <_oscctrl_init_sources+0x38>)
     91a:	2202      	movs	r2, #2
     91c:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
     91e:	3209      	adds	r2, #9
     920:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
     922:	4b0b      	ldr	r3, [pc, #44]	; (950 <_oscctrl_init_sources+0x38>)
     924:	699b      	ldr	r3, [r3, #24]
     926:	075b      	lsls	r3, r3, #29
     928:	d4fb      	bmi.n	922 <_oscctrl_init_sources+0xa>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
     92a:	4b09      	ldr	r3, [pc, #36]	; (950 <_oscctrl_init_sources+0x38>)
     92c:	699b      	ldr	r3, [r3, #24]
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
     92e:	075b      	lsls	r3, r3, #29
     930:	d4fb      	bmi.n	92a <_oscctrl_init_sources+0x12>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
     932:	2207      	movs	r2, #7
     934:	4b06      	ldr	r3, [pc, #24]	; (950 <_oscctrl_init_sources+0x38>)
     936:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
     938:	4b05      	ldr	r3, [pc, #20]	; (950 <_oscctrl_init_sources+0x38>)
     93a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
     93c:	06db      	lsls	r3, r3, #27
     93e:	d5fb      	bpl.n	938 <_oscctrl_init_sources+0x20>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
     940:	4a03      	ldr	r2, [pc, #12]	; (950 <_oscctrl_init_sources+0x38>)
     942:	7d13      	ldrb	r3, [r2, #20]
     944:	2180      	movs	r1, #128	; 0x80
     946:	4249      	negs	r1, r1
     948:	430b      	orrs	r3, r1
     94a:	b2db      	uxtb	r3, r3
     94c:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     94e:	4770      	bx	lr
     950:	40001000 	.word	0x40001000

00000954 <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     954:	4770      	bx	lr
	...

00000958 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     958:	4b02      	ldr	r3, [pc, #8]	; (964 <_sercom_get_hardware_index+0xc>)
     95a:	469c      	mov	ip, r3
     95c:	4460      	add	r0, ip
     95e:	0a80      	lsrs	r0, r0, #10
     960:	b2c0      	uxtb	r0, r0
}
     962:	4770      	bx	lr
     964:	bdfffc00 	.word	0xbdfffc00

00000968 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     968:	b510      	push	{r4, lr}
	void *hw = device->hw;
     96a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     96c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     96e:	07db      	lsls	r3, r3, #31
     970:	d502      	bpl.n	978 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     972:	7da3      	ldrb	r3, [r4, #22]
     974:	07db      	lsls	r3, r3, #31
     976:	d40f      	bmi.n	998 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     978:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     97a:	079b      	lsls	r3, r3, #30
     97c:	d502      	bpl.n	984 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     97e:	7da3      	ldrb	r3, [r4, #22]
     980:	079b      	lsls	r3, r3, #30
     982:	d40e      	bmi.n	9a2 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     984:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     986:	075b      	lsls	r3, r3, #29
     988:	d515      	bpl.n	9b6 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     98a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     98c:	2337      	movs	r3, #55	; 0x37
     98e:	421a      	tst	r2, r3
     990:	d00c      	beq.n	9ac <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     992:	3348      	adds	r3, #72	; 0x48
     994:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
     996:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     998:	2301      	movs	r3, #1
     99a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     99c:	6803      	ldr	r3, [r0, #0]
     99e:	4798      	blx	r3
     9a0:	e7f9      	b.n	996 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     9a2:	2302      	movs	r3, #2
     9a4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     9a6:	6883      	ldr	r3, [r0, #8]
     9a8:	4798      	blx	r3
     9aa:	e7f4      	b.n	996 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     9ac:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     9ae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     9b0:	b2c9      	uxtb	r1, r1
     9b2:	4798      	blx	r3
     9b4:	e7ef      	b.n	996 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     9b6:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     9b8:	09db      	lsrs	r3, r3, #7
     9ba:	d0ec      	beq.n	996 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     9bc:	2380      	movs	r3, #128	; 0x80
     9be:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
     9c0:	68c3      	ldr	r3, [r0, #12]
     9c2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     9c4:	8b63      	ldrh	r3, [r4, #26]
     9c6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     9c8:	8363      	strh	r3, [r4, #26]
     9ca:	e7e4      	b.n	996 <_sercom_usart_interrupt_handler+0x2e>

000009cc <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
     9cc:	4b03      	ldr	r3, [pc, #12]	; (9dc <_sercom_init_irq_param+0x10>)
     9ce:	4298      	cmp	r0, r3
     9d0:	d000      	beq.n	9d4 <_sercom_init_irq_param+0x8>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}
}
     9d2:	4770      	bx	lr
		_sercom4_dev = (struct _usart_async_device *)dev;
     9d4:	4b02      	ldr	r3, [pc, #8]	; (9e0 <_sercom_init_irq_param+0x14>)
     9d6:	6019      	str	r1, [r3, #0]
}
     9d8:	e7fb      	b.n	9d2 <_sercom_init_irq_param+0x6>
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	42001400 	.word	0x42001400
     9e0:	200000dc 	.word	0x200000dc

000009e4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     9e4:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     9e6:	4b02      	ldr	r3, [pc, #8]	; (9f0 <_sercom_get_irq_num+0xc>)
     9e8:	4798      	blx	r3
     9ea:	3009      	adds	r0, #9
     9ec:	b2c0      	uxtb	r0, r0
}
     9ee:	bd10      	pop	{r4, pc}
     9f0:	00000959 	.word	0x00000959

000009f4 <_get_sercom_index>:
{
     9f4:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9f6:	4b0b      	ldr	r3, [pc, #44]	; (a24 <_get_sercom_index+0x30>)
     9f8:	4798      	blx	r3
     9fa:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     9fc:	2000      	movs	r0, #0
     9fe:	2800      	cmp	r0, #0
     a00:	d006      	beq.n	a10 <_get_sercom_index+0x1c>
	ASSERT(false);
     a02:	4a09      	ldr	r2, [pc, #36]	; (a28 <_get_sercom_index+0x34>)
     a04:	4909      	ldr	r1, [pc, #36]	; (a2c <_get_sercom_index+0x38>)
     a06:	2000      	movs	r0, #0
     a08:	4b09      	ldr	r3, [pc, #36]	; (a30 <_get_sercom_index+0x3c>)
     a0a:	4798      	blx	r3
	return 0;
     a0c:	2000      	movs	r0, #0
}
     a0e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     a10:	0083      	lsls	r3, r0, #2
     a12:	181b      	adds	r3, r3, r0
     a14:	0099      	lsls	r1, r3, #2
     a16:	4b07      	ldr	r3, [pc, #28]	; (a34 <_get_sercom_index+0x40>)
     a18:	5ccb      	ldrb	r3, [r1, r3]
     a1a:	429a      	cmp	r2, r3
     a1c:	d0f7      	beq.n	a0e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a1e:	3001      	adds	r0, #1
     a20:	b2c0      	uxtb	r0, r0
     a22:	e7ec      	b.n	9fe <_get_sercom_index+0xa>
     a24:	00000959 	.word	0x00000959
     a28:	0000025e 	.word	0x0000025e
     a2c:	000015ac 	.word	0x000015ac
     a30:	000006bd 	.word	0x000006bd
     a34:	0000155c 	.word	0x0000155c

00000a38 <_usart_init>:
{
     a38:	b570      	push	{r4, r5, r6, lr}
     a3a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     a3c:	4b38      	ldr	r3, [pc, #224]	; (b20 <_usart_init+0xe8>)
     a3e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     a40:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     a42:	07db      	lsls	r3, r3, #31
     a44:	d41d      	bmi.n	a82 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     a46:	0083      	lsls	r3, r0, #2
     a48:	181b      	adds	r3, r3, r0
     a4a:	009a      	lsls	r2, r3, #2
     a4c:	4b35      	ldr	r3, [pc, #212]	; (b24 <_usart_init+0xec>)
     a4e:	189b      	adds	r3, r3, r2
     a50:	685a      	ldr	r2, [r3, #4]
     a52:	231c      	movs	r3, #28
     a54:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a56:	69e3      	ldr	r3, [r4, #28]
     a58:	079b      	lsls	r3, r3, #30
     a5a:	d1fc      	bne.n	a56 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a5c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a5e:	079b      	lsls	r3, r3, #30
     a60:	d509      	bpl.n	a76 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a62:	6823      	ldr	r3, [r4, #0]
     a64:	2102      	movs	r1, #2
     a66:	438b      	bics	r3, r1
     a68:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a6a:	69e3      	ldr	r3, [r4, #28]
     a6c:	079b      	lsls	r3, r3, #30
     a6e:	d1fc      	bne.n	a6a <_usart_init+0x32>
     a70:	69e3      	ldr	r3, [r4, #28]
     a72:	079b      	lsls	r3, r3, #30
     a74:	d4fc      	bmi.n	a70 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     a76:	2301      	movs	r3, #1
     a78:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a7a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a7c:	69e3      	ldr	r3, [r4, #28]
     a7e:	079b      	lsls	r3, r3, #30
     a80:	d1fc      	bne.n	a7c <_usart_init+0x44>
     a82:	69e3      	ldr	r3, [r4, #28]
     a84:	07db      	lsls	r3, r3, #31
     a86:	d4fc      	bmi.n	a82 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     a88:	0083      	lsls	r3, r0, #2
     a8a:	181b      	adds	r3, r3, r0
     a8c:	009a      	lsls	r2, r3, #2
     a8e:	4b25      	ldr	r3, [pc, #148]	; (b24 <_usart_init+0xec>)
     a90:	189b      	adds	r3, r3, r2
     a92:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a94:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a96:	69e3      	ldr	r3, [r4, #28]
     a98:	079b      	lsls	r3, r3, #30
     a9a:	d1fc      	bne.n	a96 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     a9c:	0083      	lsls	r3, r0, #2
     a9e:	181b      	adds	r3, r3, r0
     aa0:	009a      	lsls	r2, r3, #2
     aa2:	4b20      	ldr	r3, [pc, #128]	; (b24 <_usart_init+0xec>)
     aa4:	189b      	adds	r3, r3, r2
     aa6:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
     aa8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aaa:	69e3      	ldr	r3, [r4, #28]
     aac:	075b      	lsls	r3, r3, #29
     aae:	d1fc      	bne.n	aaa <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     ab0:	0083      	lsls	r3, r0, #2
     ab2:	181b      	adds	r3, r3, r0
     ab4:	009a      	lsls	r2, r3, #2
     ab6:	4b1b      	ldr	r3, [pc, #108]	; (b24 <_usart_init+0xec>)
     ab8:	189b      	adds	r3, r3, r2
     aba:	685b      	ldr	r3, [r3, #4]
     abc:	049a      	lsls	r2, r3, #18
     abe:	d40b      	bmi.n	ad8 <_usart_init+0xa0>
     ac0:	22c0      	movs	r2, #192	; 0xc0
     ac2:	01d2      	lsls	r2, r2, #7
     ac4:	4213      	tst	r3, r2
     ac6:	d107      	bne.n	ad8 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     ac8:	0083      	lsls	r3, r0, #2
     aca:	181b      	adds	r3, r3, r0
     acc:	009a      	lsls	r2, r3, #2
     ace:	4b15      	ldr	r3, [pc, #84]	; (b24 <_usart_init+0xec>)
     ad0:	189b      	adds	r3, r3, r2
     ad2:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
     ad4:	81a3      	strh	r3, [r4, #12]
     ad6:	e015      	b.n	b04 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     ad8:	0083      	lsls	r3, r0, #2
     ada:	181b      	adds	r3, r3, r0
     adc:	009a      	lsls	r2, r3, #2
     ade:	4911      	ldr	r1, [pc, #68]	; (b24 <_usart_init+0xec>)
     ae0:	1889      	adds	r1, r1, r2
     ae2:	898a      	ldrh	r2, [r1, #12]
     ae4:	89a3      	ldrh	r3, [r4, #12]
     ae6:	04d2      	lsls	r2, r2, #19
     ae8:	0cd2      	lsrs	r2, r2, #19
     aea:	0b5b      	lsrs	r3, r3, #13
     aec:	035b      	lsls	r3, r3, #13
     aee:	4313      	orrs	r3, r2
     af0:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     af2:	7b8b      	ldrb	r3, [r1, #14]
     af4:	2207      	movs	r2, #7
     af6:	401a      	ands	r2, r3
     af8:	89a3      	ldrh	r3, [r4, #12]
     afa:	0352      	lsls	r2, r2, #13
     afc:	04db      	lsls	r3, r3, #19
     afe:	0cdb      	lsrs	r3, r3, #19
     b00:	4313      	orrs	r3, r2
     b02:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     b04:	4a07      	ldr	r2, [pc, #28]	; (b24 <_usart_init+0xec>)
     b06:	0083      	lsls	r3, r0, #2
     b08:	181d      	adds	r5, r3, r0
     b0a:	00a9      	lsls	r1, r5, #2
     b0c:	000d      	movs	r5, r1
     b0e:	1851      	adds	r1, r2, r1
     b10:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
     b12:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     b14:	1952      	adds	r2, r2, r5
     b16:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b18:	2330      	movs	r3, #48	; 0x30
     b1a:	54e2      	strb	r2, [r4, r3]
}
     b1c:	2000      	movs	r0, #0
     b1e:	bd70      	pop	{r4, r5, r6, pc}
     b20:	000009f5 	.word	0x000009f5
     b24:	0000155c 	.word	0x0000155c

00000b28 <_usart_async_init>:
{
     b28:	b570      	push	{r4, r5, r6, lr}
     b2a:	0006      	movs	r6, r0
     b2c:	000c      	movs	r4, r1
	ASSERT(device);
     b2e:	1e43      	subs	r3, r0, #1
     b30:	4198      	sbcs	r0, r3
     b32:	b2c0      	uxtb	r0, r0
     b34:	22c4      	movs	r2, #196	; 0xc4
     b36:	4919      	ldr	r1, [pc, #100]	; (b9c <_usart_async_init+0x74>)
     b38:	4b19      	ldr	r3, [pc, #100]	; (ba0 <_usart_async_init+0x78>)
     b3a:	4798      	blx	r3
	init_status = _usart_init(hw);
     b3c:	0020      	movs	r0, r4
     b3e:	4b19      	ldr	r3, [pc, #100]	; (ba4 <_usart_async_init+0x7c>)
     b40:	4798      	blx	r3
     b42:	1e05      	subs	r5, r0, #0
	if (init_status) {
     b44:	d001      	beq.n	b4a <_usart_async_init+0x22>
}
     b46:	0028      	movs	r0, r5
     b48:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     b4a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
     b4c:	0031      	movs	r1, r6
     b4e:	0020      	movs	r0, r4
     b50:	4b15      	ldr	r3, [pc, #84]	; (ba8 <_usart_async_init+0x80>)
     b52:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
     b54:	0020      	movs	r0, r4
     b56:	4b15      	ldr	r3, [pc, #84]	; (bac <_usart_async_init+0x84>)
     b58:	4798      	blx	r3
     b5a:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     b5c:	2b00      	cmp	r3, #0
     b5e:	db0a      	blt.n	b76 <_usart_async_init+0x4e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b60:	211f      	movs	r1, #31
     b62:	4001      	ands	r1, r0
     b64:	2201      	movs	r2, #1
     b66:	408a      	lsls	r2, r1
     b68:	2180      	movs	r1, #128	; 0x80
     b6a:	4c11      	ldr	r4, [pc, #68]	; (bb0 <_usart_async_init+0x88>)
     b6c:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     b6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     b72:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     b76:	2b00      	cmp	r3, #0
     b78:	db07      	blt.n	b8a <_usart_async_init+0x62>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b7a:	211f      	movs	r1, #31
     b7c:	4001      	ands	r1, r0
     b7e:	2201      	movs	r2, #1
     b80:	408a      	lsls	r2, r1
     b82:	21c0      	movs	r1, #192	; 0xc0
     b84:	0049      	lsls	r1, r1, #1
     b86:	4c0a      	ldr	r4, [pc, #40]	; (bb0 <_usart_async_init+0x88>)
     b88:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
     b8a:	2b00      	cmp	r3, #0
     b8c:	dbdb      	blt.n	b46 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b8e:	231f      	movs	r3, #31
     b90:	4018      	ands	r0, r3
     b92:	3b1e      	subs	r3, #30
     b94:	4083      	lsls	r3, r0
     b96:	4a06      	ldr	r2, [pc, #24]	; (bb0 <_usart_async_init+0x88>)
     b98:	6013      	str	r3, [r2, #0]
     b9a:	e7d4      	b.n	b46 <_usart_async_init+0x1e>
     b9c:	000015ac 	.word	0x000015ac
     ba0:	000006bd 	.word	0x000006bd
     ba4:	00000a39 	.word	0x00000a39
     ba8:	000009cd 	.word	0x000009cd
     bac:	000009e5 	.word	0x000009e5
     bb0:	e000e100 	.word	0xe000e100

00000bb4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     bb4:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     bb6:	6813      	ldr	r3, [r2, #0]
     bb8:	2102      	movs	r1, #2
     bba:	430b      	orrs	r3, r1
     bbc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bbe:	69d3      	ldr	r3, [r2, #28]
     bc0:	079b      	lsls	r3, r3, #30
     bc2:	d1fc      	bne.n	bbe <_usart_async_enable+0xa>
}
     bc4:	4770      	bx	lr

00000bc6 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     bc6:	6983      	ldr	r3, [r0, #24]
     bc8:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     bca:	8519      	strh	r1, [r3, #40]	; 0x28
}
     bcc:	4770      	bx	lr

00000bce <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     bce:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     bd0:	2201      	movs	r2, #1
     bd2:	759a      	strb	r2, [r3, #22]
}
     bd4:	4770      	bx	lr

00000bd6 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     bd6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     bd8:	2202      	movs	r2, #2
     bda:	759a      	strb	r2, [r3, #22]
}
     bdc:	4770      	bx	lr
	...

00000be0 <_usart_async_set_irq_state>:
{
     be0:	b570      	push	{r4, r5, r6, lr}
     be2:	0004      	movs	r4, r0
     be4:	000d      	movs	r5, r1
     be6:	0016      	movs	r6, r2
	ASSERT(device);
     be8:	1e43      	subs	r3, r0, #1
     bea:	4198      	sbcs	r0, r3
     bec:	b2c0      	uxtb	r0, r0
     bee:	4a17      	ldr	r2, [pc, #92]	; (c4c <_usart_async_set_irq_state+0x6c>)
     bf0:	4917      	ldr	r1, [pc, #92]	; (c50 <_usart_async_set_irq_state+0x70>)
     bf2:	4b18      	ldr	r3, [pc, #96]	; (c54 <_usart_async_set_irq_state+0x74>)
     bf4:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
     bf6:	2d00      	cmp	r5, #0
     bf8:	d00b      	beq.n	c12 <_usart_async_set_irq_state+0x32>
     bfa:	2d02      	cmp	r5, #2
     bfc:	d009      	beq.n	c12 <_usart_async_set_irq_state+0x32>
	} else if (USART_ASYNC_RX_DONE == type) {
     bfe:	2d01      	cmp	r5, #1
     c00:	d018      	beq.n	c34 <_usart_async_set_irq_state+0x54>
	} else if (USART_ASYNC_ERROR == type) {
     c02:	2d03      	cmp	r5, #3
     c04:	d10f      	bne.n	c26 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
     c06:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     c08:	2e00      	cmp	r6, #0
     c0a:	d01c      	beq.n	c46 <_usart_async_set_irq_state+0x66>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
     c0c:	2280      	movs	r2, #128	; 0x80
     c0e:	759a      	strb	r2, [r3, #22]
}
     c10:	e009      	b.n	c26 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
     c12:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     c14:	2e00      	cmp	r6, #0
     c16:	d107      	bne.n	c28 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     c18:	2201      	movs	r2, #1
     c1a:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
     c1c:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     c1e:	2e00      	cmp	r6, #0
     c20:	d105      	bne.n	c2e <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     c22:	2202      	movs	r2, #2
     c24:	751a      	strb	r2, [r3, #20]
}
     c26:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     c28:	2201      	movs	r2, #1
     c2a:	759a      	strb	r2, [r3, #22]
     c2c:	e7f6      	b.n	c1c <_usart_async_set_irq_state+0x3c>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     c2e:	2202      	movs	r2, #2
     c30:	759a      	strb	r2, [r3, #22]
     c32:	e7f8      	b.n	c26 <_usart_async_set_irq_state+0x46>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
     c34:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
     c36:	2e00      	cmp	r6, #0
     c38:	d102      	bne.n	c40 <_usart_async_set_irq_state+0x60>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
     c3a:	2204      	movs	r2, #4
     c3c:	751a      	strb	r2, [r3, #20]
     c3e:	e7f2      	b.n	c26 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
     c40:	2204      	movs	r2, #4
     c42:	759a      	strb	r2, [r3, #22]
     c44:	e7ef      	b.n	c26 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
     c46:	2280      	movs	r2, #128	; 0x80
     c48:	751a      	strb	r2, [r3, #20]
     c4a:	e7ec      	b.n	c26 <_usart_async_set_irq_state+0x46>
     c4c:	0000021e 	.word	0x0000021e
     c50:	000015ac 	.word	0x000015ac
     c54:	000006bd 	.word	0x000006bd

00000c58 <SERCOM4_Handler>:

	return NULL;
}

void SERCOM4_Handler(void)
{
     c58:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
     c5a:	4b02      	ldr	r3, [pc, #8]	; (c64 <SERCOM4_Handler+0xc>)
     c5c:	6818      	ldr	r0, [r3, #0]
     c5e:	4b02      	ldr	r3, [pc, #8]	; (c68 <SERCOM4_Handler+0x10>)
     c60:	4798      	blx	r3
}
     c62:	bd10      	pop	{r4, pc}
     c64:	200000dc 	.word	0x200000dc
     c68:	00000969 	.word	0x00000969

00000c6c <__libc_init_array>:
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	2600      	movs	r6, #0
     c70:	4d0c      	ldr	r5, [pc, #48]	; (ca4 <__libc_init_array+0x38>)
     c72:	4c0d      	ldr	r4, [pc, #52]	; (ca8 <__libc_init_array+0x3c>)
     c74:	1b64      	subs	r4, r4, r5
     c76:	10a4      	asrs	r4, r4, #2
     c78:	42a6      	cmp	r6, r4
     c7a:	d109      	bne.n	c90 <__libc_init_array+0x24>
     c7c:	2600      	movs	r6, #0
     c7e:	f000 fced 	bl	165c <_init>
     c82:	4d0a      	ldr	r5, [pc, #40]	; (cac <__libc_init_array+0x40>)
     c84:	4c0a      	ldr	r4, [pc, #40]	; (cb0 <__libc_init_array+0x44>)
     c86:	1b64      	subs	r4, r4, r5
     c88:	10a4      	asrs	r4, r4, #2
     c8a:	42a6      	cmp	r6, r4
     c8c:	d105      	bne.n	c9a <__libc_init_array+0x2e>
     c8e:	bd70      	pop	{r4, r5, r6, pc}
     c90:	00b3      	lsls	r3, r6, #2
     c92:	58eb      	ldr	r3, [r5, r3]
     c94:	4798      	blx	r3
     c96:	3601      	adds	r6, #1
     c98:	e7ee      	b.n	c78 <__libc_init_array+0xc>
     c9a:	00b3      	lsls	r3, r6, #2
     c9c:	58eb      	ldr	r3, [r5, r3]
     c9e:	4798      	blx	r3
     ca0:	3601      	adds	r6, #1
     ca2:	e7f2      	b.n	c8a <__libc_init_array+0x1e>
     ca4:	00001668 	.word	0x00001668
     ca8:	00001668 	.word	0x00001668
     cac:	00001668 	.word	0x00001668
     cb0:	0000166c 	.word	0x0000166c

00000cb4 <siprintf>:
     cb4:	b40e      	push	{r1, r2, r3}
     cb6:	b510      	push	{r4, lr}
     cb8:	b09d      	sub	sp, #116	; 0x74
     cba:	a902      	add	r1, sp, #8
     cbc:	9002      	str	r0, [sp, #8]
     cbe:	6108      	str	r0, [r1, #16]
     cc0:	480b      	ldr	r0, [pc, #44]	; (cf0 <siprintf+0x3c>)
     cc2:	2482      	movs	r4, #130	; 0x82
     cc4:	6088      	str	r0, [r1, #8]
     cc6:	6148      	str	r0, [r1, #20]
     cc8:	2001      	movs	r0, #1
     cca:	4240      	negs	r0, r0
     ccc:	ab1f      	add	r3, sp, #124	; 0x7c
     cce:	81c8      	strh	r0, [r1, #14]
     cd0:	4808      	ldr	r0, [pc, #32]	; (cf4 <siprintf+0x40>)
     cd2:	cb04      	ldmia	r3!, {r2}
     cd4:	00a4      	lsls	r4, r4, #2
     cd6:	6800      	ldr	r0, [r0, #0]
     cd8:	9301      	str	r3, [sp, #4]
     cda:	818c      	strh	r4, [r1, #12]
     cdc:	f000 f8cc 	bl	e78 <_svfiprintf_r>
     ce0:	2300      	movs	r3, #0
     ce2:	9a02      	ldr	r2, [sp, #8]
     ce4:	7013      	strb	r3, [r2, #0]
     ce6:	b01d      	add	sp, #116	; 0x74
     ce8:	bc10      	pop	{r4}
     cea:	bc08      	pop	{r3}
     cec:	b003      	add	sp, #12
     cee:	4718      	bx	r3
     cf0:	7fffffff 	.word	0x7fffffff
     cf4:	20000000 	.word	0x20000000

00000cf8 <_malloc_r>:
     cf8:	2303      	movs	r3, #3
     cfa:	b570      	push	{r4, r5, r6, lr}
     cfc:	1ccd      	adds	r5, r1, #3
     cfe:	439d      	bics	r5, r3
     d00:	3508      	adds	r5, #8
     d02:	0006      	movs	r6, r0
     d04:	2d0c      	cmp	r5, #12
     d06:	d21e      	bcs.n	d46 <_malloc_r+0x4e>
     d08:	250c      	movs	r5, #12
     d0a:	42a9      	cmp	r1, r5
     d0c:	d81d      	bhi.n	d4a <_malloc_r+0x52>
     d0e:	0030      	movs	r0, r6
     d10:	f000 fb76 	bl	1400 <__malloc_lock>
     d14:	4a25      	ldr	r2, [pc, #148]	; (dac <_malloc_r+0xb4>)
     d16:	6814      	ldr	r4, [r2, #0]
     d18:	0021      	movs	r1, r4
     d1a:	2900      	cmp	r1, #0
     d1c:	d119      	bne.n	d52 <_malloc_r+0x5a>
     d1e:	4c24      	ldr	r4, [pc, #144]	; (db0 <_malloc_r+0xb8>)
     d20:	6823      	ldr	r3, [r4, #0]
     d22:	2b00      	cmp	r3, #0
     d24:	d103      	bne.n	d2e <_malloc_r+0x36>
     d26:	0030      	movs	r0, r6
     d28:	f000 fb32 	bl	1390 <_sbrk_r>
     d2c:	6020      	str	r0, [r4, #0]
     d2e:	0029      	movs	r1, r5
     d30:	0030      	movs	r0, r6
     d32:	f000 fb2d 	bl	1390 <_sbrk_r>
     d36:	1c43      	adds	r3, r0, #1
     d38:	d12c      	bne.n	d94 <_malloc_r+0x9c>
     d3a:	230c      	movs	r3, #12
     d3c:	0030      	movs	r0, r6
     d3e:	6033      	str	r3, [r6, #0]
     d40:	f000 fb5f 	bl	1402 <__malloc_unlock>
     d44:	e003      	b.n	d4e <_malloc_r+0x56>
     d46:	2d00      	cmp	r5, #0
     d48:	dadf      	bge.n	d0a <_malloc_r+0x12>
     d4a:	230c      	movs	r3, #12
     d4c:	6033      	str	r3, [r6, #0]
     d4e:	2000      	movs	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	680b      	ldr	r3, [r1, #0]
     d54:	1b5b      	subs	r3, r3, r5
     d56:	d41a      	bmi.n	d8e <_malloc_r+0x96>
     d58:	2b0b      	cmp	r3, #11
     d5a:	d903      	bls.n	d64 <_malloc_r+0x6c>
     d5c:	600b      	str	r3, [r1, #0]
     d5e:	18cc      	adds	r4, r1, r3
     d60:	6025      	str	r5, [r4, #0]
     d62:	e003      	b.n	d6c <_malloc_r+0x74>
     d64:	428c      	cmp	r4, r1
     d66:	d10e      	bne.n	d86 <_malloc_r+0x8e>
     d68:	6863      	ldr	r3, [r4, #4]
     d6a:	6013      	str	r3, [r2, #0]
     d6c:	0030      	movs	r0, r6
     d6e:	f000 fb48 	bl	1402 <__malloc_unlock>
     d72:	0020      	movs	r0, r4
     d74:	2207      	movs	r2, #7
     d76:	300b      	adds	r0, #11
     d78:	1d23      	adds	r3, r4, #4
     d7a:	4390      	bics	r0, r2
     d7c:	1ac3      	subs	r3, r0, r3
     d7e:	d0e7      	beq.n	d50 <_malloc_r+0x58>
     d80:	425a      	negs	r2, r3
     d82:	50e2      	str	r2, [r4, r3]
     d84:	e7e4      	b.n	d50 <_malloc_r+0x58>
     d86:	684b      	ldr	r3, [r1, #4]
     d88:	6063      	str	r3, [r4, #4]
     d8a:	000c      	movs	r4, r1
     d8c:	e7ee      	b.n	d6c <_malloc_r+0x74>
     d8e:	000c      	movs	r4, r1
     d90:	6849      	ldr	r1, [r1, #4]
     d92:	e7c2      	b.n	d1a <_malloc_r+0x22>
     d94:	2303      	movs	r3, #3
     d96:	1cc4      	adds	r4, r0, #3
     d98:	439c      	bics	r4, r3
     d9a:	42a0      	cmp	r0, r4
     d9c:	d0e0      	beq.n	d60 <_malloc_r+0x68>
     d9e:	1a21      	subs	r1, r4, r0
     da0:	0030      	movs	r0, r6
     da2:	f000 faf5 	bl	1390 <_sbrk_r>
     da6:	1c43      	adds	r3, r0, #1
     da8:	d1da      	bne.n	d60 <_malloc_r+0x68>
     daa:	e7c6      	b.n	d3a <_malloc_r+0x42>
     dac:	200000e0 	.word	0x200000e0
     db0:	200000e4 	.word	0x200000e4

00000db4 <__ssputs_r>:
     db4:	b5f0      	push	{r4, r5, r6, r7, lr}
     db6:	688e      	ldr	r6, [r1, #8]
     db8:	b085      	sub	sp, #20
     dba:	0007      	movs	r7, r0
     dbc:	000c      	movs	r4, r1
     dbe:	9203      	str	r2, [sp, #12]
     dc0:	9301      	str	r3, [sp, #4]
     dc2:	429e      	cmp	r6, r3
     dc4:	d839      	bhi.n	e3a <__ssputs_r+0x86>
     dc6:	2390      	movs	r3, #144	; 0x90
     dc8:	898a      	ldrh	r2, [r1, #12]
     dca:	00db      	lsls	r3, r3, #3
     dcc:	421a      	tst	r2, r3
     dce:	d034      	beq.n	e3a <__ssputs_r+0x86>
     dd0:	2503      	movs	r5, #3
     dd2:	6909      	ldr	r1, [r1, #16]
     dd4:	6823      	ldr	r3, [r4, #0]
     dd6:	1a5b      	subs	r3, r3, r1
     dd8:	9302      	str	r3, [sp, #8]
     dda:	6963      	ldr	r3, [r4, #20]
     ddc:	9802      	ldr	r0, [sp, #8]
     dde:	435d      	muls	r5, r3
     de0:	0feb      	lsrs	r3, r5, #31
     de2:	195d      	adds	r5, r3, r5
     de4:	9b01      	ldr	r3, [sp, #4]
     de6:	106d      	asrs	r5, r5, #1
     de8:	3301      	adds	r3, #1
     dea:	181b      	adds	r3, r3, r0
     dec:	42ab      	cmp	r3, r5
     dee:	d900      	bls.n	df2 <__ssputs_r+0x3e>
     df0:	001d      	movs	r5, r3
     df2:	0553      	lsls	r3, r2, #21
     df4:	d532      	bpl.n	e5c <__ssputs_r+0xa8>
     df6:	0029      	movs	r1, r5
     df8:	0038      	movs	r0, r7
     dfa:	f7ff ff7d 	bl	cf8 <_malloc_r>
     dfe:	1e06      	subs	r6, r0, #0
     e00:	d109      	bne.n	e16 <__ssputs_r+0x62>
     e02:	230c      	movs	r3, #12
     e04:	603b      	str	r3, [r7, #0]
     e06:	2340      	movs	r3, #64	; 0x40
     e08:	2001      	movs	r0, #1
     e0a:	89a2      	ldrh	r2, [r4, #12]
     e0c:	4240      	negs	r0, r0
     e0e:	4313      	orrs	r3, r2
     e10:	81a3      	strh	r3, [r4, #12]
     e12:	b005      	add	sp, #20
     e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e16:	9a02      	ldr	r2, [sp, #8]
     e18:	6921      	ldr	r1, [r4, #16]
     e1a:	f000 fad6 	bl	13ca <memcpy>
     e1e:	89a3      	ldrh	r3, [r4, #12]
     e20:	4a14      	ldr	r2, [pc, #80]	; (e74 <__ssputs_r+0xc0>)
     e22:	401a      	ands	r2, r3
     e24:	2380      	movs	r3, #128	; 0x80
     e26:	4313      	orrs	r3, r2
     e28:	81a3      	strh	r3, [r4, #12]
     e2a:	9b02      	ldr	r3, [sp, #8]
     e2c:	6126      	str	r6, [r4, #16]
     e2e:	18f6      	adds	r6, r6, r3
     e30:	6026      	str	r6, [r4, #0]
     e32:	6165      	str	r5, [r4, #20]
     e34:	9e01      	ldr	r6, [sp, #4]
     e36:	1aed      	subs	r5, r5, r3
     e38:	60a5      	str	r5, [r4, #8]
     e3a:	9b01      	ldr	r3, [sp, #4]
     e3c:	42b3      	cmp	r3, r6
     e3e:	d200      	bcs.n	e42 <__ssputs_r+0x8e>
     e40:	001e      	movs	r6, r3
     e42:	0032      	movs	r2, r6
     e44:	9903      	ldr	r1, [sp, #12]
     e46:	6820      	ldr	r0, [r4, #0]
     e48:	f000 fac8 	bl	13dc <memmove>
     e4c:	68a3      	ldr	r3, [r4, #8]
     e4e:	2000      	movs	r0, #0
     e50:	1b9b      	subs	r3, r3, r6
     e52:	60a3      	str	r3, [r4, #8]
     e54:	6823      	ldr	r3, [r4, #0]
     e56:	199e      	adds	r6, r3, r6
     e58:	6026      	str	r6, [r4, #0]
     e5a:	e7da      	b.n	e12 <__ssputs_r+0x5e>
     e5c:	002a      	movs	r2, r5
     e5e:	0038      	movs	r0, r7
     e60:	f000 fb1a 	bl	1498 <_realloc_r>
     e64:	1e06      	subs	r6, r0, #0
     e66:	d1e0      	bne.n	e2a <__ssputs_r+0x76>
     e68:	6921      	ldr	r1, [r4, #16]
     e6a:	0038      	movs	r0, r7
     e6c:	f000 faca 	bl	1404 <_free_r>
     e70:	e7c7      	b.n	e02 <__ssputs_r+0x4e>
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	fffffb7f 	.word	0xfffffb7f

00000e78 <_svfiprintf_r>:
     e78:	b5f0      	push	{r4, r5, r6, r7, lr}
     e7a:	b09f      	sub	sp, #124	; 0x7c
     e7c:	9002      	str	r0, [sp, #8]
     e7e:	9305      	str	r3, [sp, #20]
     e80:	898b      	ldrh	r3, [r1, #12]
     e82:	000f      	movs	r7, r1
     e84:	0016      	movs	r6, r2
     e86:	061b      	lsls	r3, r3, #24
     e88:	d511      	bpl.n	eae <_svfiprintf_r+0x36>
     e8a:	690b      	ldr	r3, [r1, #16]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d10e      	bne.n	eae <_svfiprintf_r+0x36>
     e90:	2140      	movs	r1, #64	; 0x40
     e92:	f7ff ff31 	bl	cf8 <_malloc_r>
     e96:	6038      	str	r0, [r7, #0]
     e98:	6138      	str	r0, [r7, #16]
     e9a:	2800      	cmp	r0, #0
     e9c:	d105      	bne.n	eaa <_svfiprintf_r+0x32>
     e9e:	230c      	movs	r3, #12
     ea0:	9a02      	ldr	r2, [sp, #8]
     ea2:	3801      	subs	r0, #1
     ea4:	6013      	str	r3, [r2, #0]
     ea6:	b01f      	add	sp, #124	; 0x7c
     ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eaa:	2340      	movs	r3, #64	; 0x40
     eac:	617b      	str	r3, [r7, #20]
     eae:	2300      	movs	r3, #0
     eb0:	ad06      	add	r5, sp, #24
     eb2:	616b      	str	r3, [r5, #20]
     eb4:	3320      	adds	r3, #32
     eb6:	766b      	strb	r3, [r5, #25]
     eb8:	3310      	adds	r3, #16
     eba:	76ab      	strb	r3, [r5, #26]
     ebc:	0034      	movs	r4, r6
     ebe:	7823      	ldrb	r3, [r4, #0]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d147      	bne.n	f54 <_svfiprintf_r+0xdc>
     ec4:	1ba3      	subs	r3, r4, r6
     ec6:	9304      	str	r3, [sp, #16]
     ec8:	d00d      	beq.n	ee6 <_svfiprintf_r+0x6e>
     eca:	1ba3      	subs	r3, r4, r6
     ecc:	0032      	movs	r2, r6
     ece:	0039      	movs	r1, r7
     ed0:	9802      	ldr	r0, [sp, #8]
     ed2:	f7ff ff6f 	bl	db4 <__ssputs_r>
     ed6:	1c43      	adds	r3, r0, #1
     ed8:	d100      	bne.n	edc <_svfiprintf_r+0x64>
     eda:	e0b5      	b.n	1048 <_svfiprintf_r+0x1d0>
     edc:	696a      	ldr	r2, [r5, #20]
     ede:	9b04      	ldr	r3, [sp, #16]
     ee0:	4694      	mov	ip, r2
     ee2:	4463      	add	r3, ip
     ee4:	616b      	str	r3, [r5, #20]
     ee6:	7823      	ldrb	r3, [r4, #0]
     ee8:	2b00      	cmp	r3, #0
     eea:	d100      	bne.n	eee <_svfiprintf_r+0x76>
     eec:	e0ac      	b.n	1048 <_svfiprintf_r+0x1d0>
     eee:	2201      	movs	r2, #1
     ef0:	2300      	movs	r3, #0
     ef2:	4252      	negs	r2, r2
     ef4:	606a      	str	r2, [r5, #4]
     ef6:	a902      	add	r1, sp, #8
     ef8:	3254      	adds	r2, #84	; 0x54
     efa:	1852      	adds	r2, r2, r1
     efc:	3401      	adds	r4, #1
     efe:	602b      	str	r3, [r5, #0]
     f00:	60eb      	str	r3, [r5, #12]
     f02:	60ab      	str	r3, [r5, #8]
     f04:	7013      	strb	r3, [r2, #0]
     f06:	65ab      	str	r3, [r5, #88]	; 0x58
     f08:	4e58      	ldr	r6, [pc, #352]	; (106c <_svfiprintf_r+0x1f4>)
     f0a:	2205      	movs	r2, #5
     f0c:	7821      	ldrb	r1, [r4, #0]
     f0e:	0030      	movs	r0, r6
     f10:	f000 fa50 	bl	13b4 <memchr>
     f14:	1c62      	adds	r2, r4, #1
     f16:	2800      	cmp	r0, #0
     f18:	d120      	bne.n	f5c <_svfiprintf_r+0xe4>
     f1a:	6829      	ldr	r1, [r5, #0]
     f1c:	06cb      	lsls	r3, r1, #27
     f1e:	d504      	bpl.n	f2a <_svfiprintf_r+0xb2>
     f20:	2353      	movs	r3, #83	; 0x53
     f22:	ae02      	add	r6, sp, #8
     f24:	3020      	adds	r0, #32
     f26:	199b      	adds	r3, r3, r6
     f28:	7018      	strb	r0, [r3, #0]
     f2a:	070b      	lsls	r3, r1, #28
     f2c:	d504      	bpl.n	f38 <_svfiprintf_r+0xc0>
     f2e:	2353      	movs	r3, #83	; 0x53
     f30:	202b      	movs	r0, #43	; 0x2b
     f32:	ae02      	add	r6, sp, #8
     f34:	199b      	adds	r3, r3, r6
     f36:	7018      	strb	r0, [r3, #0]
     f38:	7823      	ldrb	r3, [r4, #0]
     f3a:	2b2a      	cmp	r3, #42	; 0x2a
     f3c:	d016      	beq.n	f6c <_svfiprintf_r+0xf4>
     f3e:	2000      	movs	r0, #0
     f40:	210a      	movs	r1, #10
     f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f44:	7822      	ldrb	r2, [r4, #0]
     f46:	3a30      	subs	r2, #48	; 0x30
     f48:	2a09      	cmp	r2, #9
     f4a:	d955      	bls.n	ff8 <_svfiprintf_r+0x180>
     f4c:	2800      	cmp	r0, #0
     f4e:	d015      	beq.n	f7c <_svfiprintf_r+0x104>
     f50:	9309      	str	r3, [sp, #36]	; 0x24
     f52:	e013      	b.n	f7c <_svfiprintf_r+0x104>
     f54:	2b25      	cmp	r3, #37	; 0x25
     f56:	d0b5      	beq.n	ec4 <_svfiprintf_r+0x4c>
     f58:	3401      	adds	r4, #1
     f5a:	e7b0      	b.n	ebe <_svfiprintf_r+0x46>
     f5c:	2301      	movs	r3, #1
     f5e:	1b80      	subs	r0, r0, r6
     f60:	4083      	lsls	r3, r0
     f62:	6829      	ldr	r1, [r5, #0]
     f64:	0014      	movs	r4, r2
     f66:	430b      	orrs	r3, r1
     f68:	602b      	str	r3, [r5, #0]
     f6a:	e7cd      	b.n	f08 <_svfiprintf_r+0x90>
     f6c:	9b05      	ldr	r3, [sp, #20]
     f6e:	1d18      	adds	r0, r3, #4
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	9005      	str	r0, [sp, #20]
     f74:	2b00      	cmp	r3, #0
     f76:	db39      	blt.n	fec <_svfiprintf_r+0x174>
     f78:	9309      	str	r3, [sp, #36]	; 0x24
     f7a:	0014      	movs	r4, r2
     f7c:	7823      	ldrb	r3, [r4, #0]
     f7e:	2b2e      	cmp	r3, #46	; 0x2e
     f80:	d10b      	bne.n	f9a <_svfiprintf_r+0x122>
     f82:	7863      	ldrb	r3, [r4, #1]
     f84:	1c62      	adds	r2, r4, #1
     f86:	2b2a      	cmp	r3, #42	; 0x2a
     f88:	d13e      	bne.n	1008 <_svfiprintf_r+0x190>
     f8a:	9b05      	ldr	r3, [sp, #20]
     f8c:	3402      	adds	r4, #2
     f8e:	1d1a      	adds	r2, r3, #4
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	9205      	str	r2, [sp, #20]
     f94:	2b00      	cmp	r3, #0
     f96:	db34      	blt.n	1002 <_svfiprintf_r+0x18a>
     f98:	9307      	str	r3, [sp, #28]
     f9a:	4e35      	ldr	r6, [pc, #212]	; (1070 <_svfiprintf_r+0x1f8>)
     f9c:	7821      	ldrb	r1, [r4, #0]
     f9e:	2203      	movs	r2, #3
     fa0:	0030      	movs	r0, r6
     fa2:	f000 fa07 	bl	13b4 <memchr>
     fa6:	2800      	cmp	r0, #0
     fa8:	d006      	beq.n	fb8 <_svfiprintf_r+0x140>
     faa:	2340      	movs	r3, #64	; 0x40
     fac:	1b80      	subs	r0, r0, r6
     fae:	4083      	lsls	r3, r0
     fb0:	682a      	ldr	r2, [r5, #0]
     fb2:	3401      	adds	r4, #1
     fb4:	4313      	orrs	r3, r2
     fb6:	602b      	str	r3, [r5, #0]
     fb8:	7821      	ldrb	r1, [r4, #0]
     fba:	2206      	movs	r2, #6
     fbc:	482d      	ldr	r0, [pc, #180]	; (1074 <_svfiprintf_r+0x1fc>)
     fbe:	1c66      	adds	r6, r4, #1
     fc0:	7629      	strb	r1, [r5, #24]
     fc2:	f000 f9f7 	bl	13b4 <memchr>
     fc6:	2800      	cmp	r0, #0
     fc8:	d046      	beq.n	1058 <_svfiprintf_r+0x1e0>
     fca:	4b2b      	ldr	r3, [pc, #172]	; (1078 <_svfiprintf_r+0x200>)
     fcc:	2b00      	cmp	r3, #0
     fce:	d12f      	bne.n	1030 <_svfiprintf_r+0x1b8>
     fd0:	6829      	ldr	r1, [r5, #0]
     fd2:	9b05      	ldr	r3, [sp, #20]
     fd4:	2207      	movs	r2, #7
     fd6:	05c9      	lsls	r1, r1, #23
     fd8:	d528      	bpl.n	102c <_svfiprintf_r+0x1b4>
     fda:	189b      	adds	r3, r3, r2
     fdc:	4393      	bics	r3, r2
     fde:	3308      	adds	r3, #8
     fe0:	9305      	str	r3, [sp, #20]
     fe2:	696b      	ldr	r3, [r5, #20]
     fe4:	9a03      	ldr	r2, [sp, #12]
     fe6:	189b      	adds	r3, r3, r2
     fe8:	616b      	str	r3, [r5, #20]
     fea:	e767      	b.n	ebc <_svfiprintf_r+0x44>
     fec:	425b      	negs	r3, r3
     fee:	60eb      	str	r3, [r5, #12]
     ff0:	2302      	movs	r3, #2
     ff2:	430b      	orrs	r3, r1
     ff4:	602b      	str	r3, [r5, #0]
     ff6:	e7c0      	b.n	f7a <_svfiprintf_r+0x102>
     ff8:	434b      	muls	r3, r1
     ffa:	3401      	adds	r4, #1
     ffc:	189b      	adds	r3, r3, r2
     ffe:	2001      	movs	r0, #1
    1000:	e7a0      	b.n	f44 <_svfiprintf_r+0xcc>
    1002:	2301      	movs	r3, #1
    1004:	425b      	negs	r3, r3
    1006:	e7c7      	b.n	f98 <_svfiprintf_r+0x120>
    1008:	2300      	movs	r3, #0
    100a:	0014      	movs	r4, r2
    100c:	200a      	movs	r0, #10
    100e:	001a      	movs	r2, r3
    1010:	606b      	str	r3, [r5, #4]
    1012:	7821      	ldrb	r1, [r4, #0]
    1014:	3930      	subs	r1, #48	; 0x30
    1016:	2909      	cmp	r1, #9
    1018:	d903      	bls.n	1022 <_svfiprintf_r+0x1aa>
    101a:	2b00      	cmp	r3, #0
    101c:	d0bd      	beq.n	f9a <_svfiprintf_r+0x122>
    101e:	9207      	str	r2, [sp, #28]
    1020:	e7bb      	b.n	f9a <_svfiprintf_r+0x122>
    1022:	4342      	muls	r2, r0
    1024:	3401      	adds	r4, #1
    1026:	1852      	adds	r2, r2, r1
    1028:	2301      	movs	r3, #1
    102a:	e7f2      	b.n	1012 <_svfiprintf_r+0x19a>
    102c:	3307      	adds	r3, #7
    102e:	e7d5      	b.n	fdc <_svfiprintf_r+0x164>
    1030:	ab05      	add	r3, sp, #20
    1032:	9300      	str	r3, [sp, #0]
    1034:	003a      	movs	r2, r7
    1036:	4b11      	ldr	r3, [pc, #68]	; (107c <_svfiprintf_r+0x204>)
    1038:	0029      	movs	r1, r5
    103a:	9802      	ldr	r0, [sp, #8]
    103c:	e000      	b.n	1040 <_svfiprintf_r+0x1c8>
    103e:	bf00      	nop
    1040:	9003      	str	r0, [sp, #12]
    1042:	9b03      	ldr	r3, [sp, #12]
    1044:	3301      	adds	r3, #1
    1046:	d1cc      	bne.n	fe2 <_svfiprintf_r+0x16a>
    1048:	89bb      	ldrh	r3, [r7, #12]
    104a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    104c:	065b      	lsls	r3, r3, #25
    104e:	d400      	bmi.n	1052 <_svfiprintf_r+0x1da>
    1050:	e729      	b.n	ea6 <_svfiprintf_r+0x2e>
    1052:	2001      	movs	r0, #1
    1054:	4240      	negs	r0, r0
    1056:	e726      	b.n	ea6 <_svfiprintf_r+0x2e>
    1058:	ab05      	add	r3, sp, #20
    105a:	9300      	str	r3, [sp, #0]
    105c:	003a      	movs	r2, r7
    105e:	4b07      	ldr	r3, [pc, #28]	; (107c <_svfiprintf_r+0x204>)
    1060:	0029      	movs	r1, r5
    1062:	9802      	ldr	r0, [sp, #8]
    1064:	f000 f87a 	bl	115c <_printf_i>
    1068:	e7ea      	b.n	1040 <_svfiprintf_r+0x1c8>
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	00001628 	.word	0x00001628
    1070:	0000162e 	.word	0x0000162e
    1074:	00001632 	.word	0x00001632
    1078:	00000000 	.word	0x00000000
    107c:	00000db5 	.word	0x00000db5

00001080 <_printf_common>:
    1080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1082:	0015      	movs	r5, r2
    1084:	9301      	str	r3, [sp, #4]
    1086:	688a      	ldr	r2, [r1, #8]
    1088:	690b      	ldr	r3, [r1, #16]
    108a:	9000      	str	r0, [sp, #0]
    108c:	000c      	movs	r4, r1
    108e:	4293      	cmp	r3, r2
    1090:	da00      	bge.n	1094 <_printf_common+0x14>
    1092:	0013      	movs	r3, r2
    1094:	0022      	movs	r2, r4
    1096:	602b      	str	r3, [r5, #0]
    1098:	3243      	adds	r2, #67	; 0x43
    109a:	7812      	ldrb	r2, [r2, #0]
    109c:	2a00      	cmp	r2, #0
    109e:	d001      	beq.n	10a4 <_printf_common+0x24>
    10a0:	3301      	adds	r3, #1
    10a2:	602b      	str	r3, [r5, #0]
    10a4:	6823      	ldr	r3, [r4, #0]
    10a6:	069b      	lsls	r3, r3, #26
    10a8:	d502      	bpl.n	10b0 <_printf_common+0x30>
    10aa:	682b      	ldr	r3, [r5, #0]
    10ac:	3302      	adds	r3, #2
    10ae:	602b      	str	r3, [r5, #0]
    10b0:	2706      	movs	r7, #6
    10b2:	6823      	ldr	r3, [r4, #0]
    10b4:	401f      	ands	r7, r3
    10b6:	d027      	beq.n	1108 <_printf_common+0x88>
    10b8:	0023      	movs	r3, r4
    10ba:	3343      	adds	r3, #67	; 0x43
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	1e5a      	subs	r2, r3, #1
    10c0:	4193      	sbcs	r3, r2
    10c2:	6822      	ldr	r2, [r4, #0]
    10c4:	0692      	lsls	r2, r2, #26
    10c6:	d430      	bmi.n	112a <_printf_common+0xaa>
    10c8:	0022      	movs	r2, r4
    10ca:	9901      	ldr	r1, [sp, #4]
    10cc:	3243      	adds	r2, #67	; 0x43
    10ce:	9800      	ldr	r0, [sp, #0]
    10d0:	9e08      	ldr	r6, [sp, #32]
    10d2:	47b0      	blx	r6
    10d4:	1c43      	adds	r3, r0, #1
    10d6:	d025      	beq.n	1124 <_printf_common+0xa4>
    10d8:	2306      	movs	r3, #6
    10da:	6820      	ldr	r0, [r4, #0]
    10dc:	682a      	ldr	r2, [r5, #0]
    10de:	68e1      	ldr	r1, [r4, #12]
    10e0:	4003      	ands	r3, r0
    10e2:	2500      	movs	r5, #0
    10e4:	2b04      	cmp	r3, #4
    10e6:	d103      	bne.n	10f0 <_printf_common+0x70>
    10e8:	1a8d      	subs	r5, r1, r2
    10ea:	43eb      	mvns	r3, r5
    10ec:	17db      	asrs	r3, r3, #31
    10ee:	401d      	ands	r5, r3
    10f0:	68a3      	ldr	r3, [r4, #8]
    10f2:	6922      	ldr	r2, [r4, #16]
    10f4:	4293      	cmp	r3, r2
    10f6:	dd01      	ble.n	10fc <_printf_common+0x7c>
    10f8:	1a9b      	subs	r3, r3, r2
    10fa:	18ed      	adds	r5, r5, r3
    10fc:	2700      	movs	r7, #0
    10fe:	42bd      	cmp	r5, r7
    1100:	d120      	bne.n	1144 <_printf_common+0xc4>
    1102:	2000      	movs	r0, #0
    1104:	e010      	b.n	1128 <_printf_common+0xa8>
    1106:	3701      	adds	r7, #1
    1108:	68e3      	ldr	r3, [r4, #12]
    110a:	682a      	ldr	r2, [r5, #0]
    110c:	1a9b      	subs	r3, r3, r2
    110e:	429f      	cmp	r7, r3
    1110:	dad2      	bge.n	10b8 <_printf_common+0x38>
    1112:	0022      	movs	r2, r4
    1114:	2301      	movs	r3, #1
    1116:	3219      	adds	r2, #25
    1118:	9901      	ldr	r1, [sp, #4]
    111a:	9800      	ldr	r0, [sp, #0]
    111c:	9e08      	ldr	r6, [sp, #32]
    111e:	47b0      	blx	r6
    1120:	1c43      	adds	r3, r0, #1
    1122:	d1f0      	bne.n	1106 <_printf_common+0x86>
    1124:	2001      	movs	r0, #1
    1126:	4240      	negs	r0, r0
    1128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    112a:	2030      	movs	r0, #48	; 0x30
    112c:	18e1      	adds	r1, r4, r3
    112e:	3143      	adds	r1, #67	; 0x43
    1130:	7008      	strb	r0, [r1, #0]
    1132:	0021      	movs	r1, r4
    1134:	1c5a      	adds	r2, r3, #1
    1136:	3145      	adds	r1, #69	; 0x45
    1138:	7809      	ldrb	r1, [r1, #0]
    113a:	18a2      	adds	r2, r4, r2
    113c:	3243      	adds	r2, #67	; 0x43
    113e:	3302      	adds	r3, #2
    1140:	7011      	strb	r1, [r2, #0]
    1142:	e7c1      	b.n	10c8 <_printf_common+0x48>
    1144:	0022      	movs	r2, r4
    1146:	2301      	movs	r3, #1
    1148:	321a      	adds	r2, #26
    114a:	9901      	ldr	r1, [sp, #4]
    114c:	9800      	ldr	r0, [sp, #0]
    114e:	9e08      	ldr	r6, [sp, #32]
    1150:	47b0      	blx	r6
    1152:	1c43      	adds	r3, r0, #1
    1154:	d0e6      	beq.n	1124 <_printf_common+0xa4>
    1156:	3701      	adds	r7, #1
    1158:	e7d1      	b.n	10fe <_printf_common+0x7e>
	...

0000115c <_printf_i>:
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}
    115e:	b08b      	sub	sp, #44	; 0x2c
    1160:	9206      	str	r2, [sp, #24]
    1162:	000a      	movs	r2, r1
    1164:	3243      	adds	r2, #67	; 0x43
    1166:	9307      	str	r3, [sp, #28]
    1168:	9005      	str	r0, [sp, #20]
    116a:	9204      	str	r2, [sp, #16]
    116c:	7e0a      	ldrb	r2, [r1, #24]
    116e:	000c      	movs	r4, r1
    1170:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1172:	2a6e      	cmp	r2, #110	; 0x6e
    1174:	d100      	bne.n	1178 <_printf_i+0x1c>
    1176:	e08f      	b.n	1298 <_printf_i+0x13c>
    1178:	d817      	bhi.n	11aa <_printf_i+0x4e>
    117a:	2a63      	cmp	r2, #99	; 0x63
    117c:	d02c      	beq.n	11d8 <_printf_i+0x7c>
    117e:	d808      	bhi.n	1192 <_printf_i+0x36>
    1180:	2a00      	cmp	r2, #0
    1182:	d100      	bne.n	1186 <_printf_i+0x2a>
    1184:	e099      	b.n	12ba <_printf_i+0x15e>
    1186:	2a58      	cmp	r2, #88	; 0x58
    1188:	d054      	beq.n	1234 <_printf_i+0xd8>
    118a:	0026      	movs	r6, r4
    118c:	3642      	adds	r6, #66	; 0x42
    118e:	7032      	strb	r2, [r6, #0]
    1190:	e029      	b.n	11e6 <_printf_i+0x8a>
    1192:	2a64      	cmp	r2, #100	; 0x64
    1194:	d001      	beq.n	119a <_printf_i+0x3e>
    1196:	2a69      	cmp	r2, #105	; 0x69
    1198:	d1f7      	bne.n	118a <_printf_i+0x2e>
    119a:	6821      	ldr	r1, [r4, #0]
    119c:	681a      	ldr	r2, [r3, #0]
    119e:	0608      	lsls	r0, r1, #24
    11a0:	d523      	bpl.n	11ea <_printf_i+0x8e>
    11a2:	1d11      	adds	r1, r2, #4
    11a4:	6019      	str	r1, [r3, #0]
    11a6:	6815      	ldr	r5, [r2, #0]
    11a8:	e025      	b.n	11f6 <_printf_i+0x9a>
    11aa:	2a73      	cmp	r2, #115	; 0x73
    11ac:	d100      	bne.n	11b0 <_printf_i+0x54>
    11ae:	e088      	b.n	12c2 <_printf_i+0x166>
    11b0:	d808      	bhi.n	11c4 <_printf_i+0x68>
    11b2:	2a6f      	cmp	r2, #111	; 0x6f
    11b4:	d029      	beq.n	120a <_printf_i+0xae>
    11b6:	2a70      	cmp	r2, #112	; 0x70
    11b8:	d1e7      	bne.n	118a <_printf_i+0x2e>
    11ba:	2220      	movs	r2, #32
    11bc:	6809      	ldr	r1, [r1, #0]
    11be:	430a      	orrs	r2, r1
    11c0:	6022      	str	r2, [r4, #0]
    11c2:	e003      	b.n	11cc <_printf_i+0x70>
    11c4:	2a75      	cmp	r2, #117	; 0x75
    11c6:	d020      	beq.n	120a <_printf_i+0xae>
    11c8:	2a78      	cmp	r2, #120	; 0x78
    11ca:	d1de      	bne.n	118a <_printf_i+0x2e>
    11cc:	0022      	movs	r2, r4
    11ce:	2178      	movs	r1, #120	; 0x78
    11d0:	3245      	adds	r2, #69	; 0x45
    11d2:	7011      	strb	r1, [r2, #0]
    11d4:	4a6c      	ldr	r2, [pc, #432]	; (1388 <_printf_i+0x22c>)
    11d6:	e030      	b.n	123a <_printf_i+0xde>
    11d8:	000e      	movs	r6, r1
    11da:	681a      	ldr	r2, [r3, #0]
    11dc:	3642      	adds	r6, #66	; 0x42
    11de:	1d11      	adds	r1, r2, #4
    11e0:	6019      	str	r1, [r3, #0]
    11e2:	6813      	ldr	r3, [r2, #0]
    11e4:	7033      	strb	r3, [r6, #0]
    11e6:	2301      	movs	r3, #1
    11e8:	e079      	b.n	12de <_printf_i+0x182>
    11ea:	0649      	lsls	r1, r1, #25
    11ec:	d5d9      	bpl.n	11a2 <_printf_i+0x46>
    11ee:	1d11      	adds	r1, r2, #4
    11f0:	6019      	str	r1, [r3, #0]
    11f2:	2300      	movs	r3, #0
    11f4:	5ed5      	ldrsh	r5, [r2, r3]
    11f6:	2d00      	cmp	r5, #0
    11f8:	da03      	bge.n	1202 <_printf_i+0xa6>
    11fa:	232d      	movs	r3, #45	; 0x2d
    11fc:	9a04      	ldr	r2, [sp, #16]
    11fe:	426d      	negs	r5, r5
    1200:	7013      	strb	r3, [r2, #0]
    1202:	4b62      	ldr	r3, [pc, #392]	; (138c <_printf_i+0x230>)
    1204:	270a      	movs	r7, #10
    1206:	9303      	str	r3, [sp, #12]
    1208:	e02f      	b.n	126a <_printf_i+0x10e>
    120a:	6820      	ldr	r0, [r4, #0]
    120c:	6819      	ldr	r1, [r3, #0]
    120e:	0605      	lsls	r5, r0, #24
    1210:	d503      	bpl.n	121a <_printf_i+0xbe>
    1212:	1d08      	adds	r0, r1, #4
    1214:	6018      	str	r0, [r3, #0]
    1216:	680d      	ldr	r5, [r1, #0]
    1218:	e005      	b.n	1226 <_printf_i+0xca>
    121a:	0640      	lsls	r0, r0, #25
    121c:	d5f9      	bpl.n	1212 <_printf_i+0xb6>
    121e:	680d      	ldr	r5, [r1, #0]
    1220:	1d08      	adds	r0, r1, #4
    1222:	6018      	str	r0, [r3, #0]
    1224:	b2ad      	uxth	r5, r5
    1226:	4b59      	ldr	r3, [pc, #356]	; (138c <_printf_i+0x230>)
    1228:	2708      	movs	r7, #8
    122a:	9303      	str	r3, [sp, #12]
    122c:	2a6f      	cmp	r2, #111	; 0x6f
    122e:	d018      	beq.n	1262 <_printf_i+0x106>
    1230:	270a      	movs	r7, #10
    1232:	e016      	b.n	1262 <_printf_i+0x106>
    1234:	3145      	adds	r1, #69	; 0x45
    1236:	700a      	strb	r2, [r1, #0]
    1238:	4a54      	ldr	r2, [pc, #336]	; (138c <_printf_i+0x230>)
    123a:	9203      	str	r2, [sp, #12]
    123c:	681a      	ldr	r2, [r3, #0]
    123e:	6821      	ldr	r1, [r4, #0]
    1240:	1d10      	adds	r0, r2, #4
    1242:	6018      	str	r0, [r3, #0]
    1244:	6815      	ldr	r5, [r2, #0]
    1246:	0608      	lsls	r0, r1, #24
    1248:	d522      	bpl.n	1290 <_printf_i+0x134>
    124a:	07cb      	lsls	r3, r1, #31
    124c:	d502      	bpl.n	1254 <_printf_i+0xf8>
    124e:	2320      	movs	r3, #32
    1250:	4319      	orrs	r1, r3
    1252:	6021      	str	r1, [r4, #0]
    1254:	2710      	movs	r7, #16
    1256:	2d00      	cmp	r5, #0
    1258:	d103      	bne.n	1262 <_printf_i+0x106>
    125a:	2320      	movs	r3, #32
    125c:	6822      	ldr	r2, [r4, #0]
    125e:	439a      	bics	r2, r3
    1260:	6022      	str	r2, [r4, #0]
    1262:	0023      	movs	r3, r4
    1264:	2200      	movs	r2, #0
    1266:	3343      	adds	r3, #67	; 0x43
    1268:	701a      	strb	r2, [r3, #0]
    126a:	6863      	ldr	r3, [r4, #4]
    126c:	60a3      	str	r3, [r4, #8]
    126e:	2b00      	cmp	r3, #0
    1270:	db5c      	blt.n	132c <_printf_i+0x1d0>
    1272:	2204      	movs	r2, #4
    1274:	6821      	ldr	r1, [r4, #0]
    1276:	4391      	bics	r1, r2
    1278:	6021      	str	r1, [r4, #0]
    127a:	2d00      	cmp	r5, #0
    127c:	d158      	bne.n	1330 <_printf_i+0x1d4>
    127e:	9e04      	ldr	r6, [sp, #16]
    1280:	2b00      	cmp	r3, #0
    1282:	d064      	beq.n	134e <_printf_i+0x1f2>
    1284:	0026      	movs	r6, r4
    1286:	9b03      	ldr	r3, [sp, #12]
    1288:	3642      	adds	r6, #66	; 0x42
    128a:	781b      	ldrb	r3, [r3, #0]
    128c:	7033      	strb	r3, [r6, #0]
    128e:	e05e      	b.n	134e <_printf_i+0x1f2>
    1290:	0648      	lsls	r0, r1, #25
    1292:	d5da      	bpl.n	124a <_printf_i+0xee>
    1294:	b2ad      	uxth	r5, r5
    1296:	e7d8      	b.n	124a <_printf_i+0xee>
    1298:	6809      	ldr	r1, [r1, #0]
    129a:	681a      	ldr	r2, [r3, #0]
    129c:	0608      	lsls	r0, r1, #24
    129e:	d505      	bpl.n	12ac <_printf_i+0x150>
    12a0:	1d11      	adds	r1, r2, #4
    12a2:	6019      	str	r1, [r3, #0]
    12a4:	6813      	ldr	r3, [r2, #0]
    12a6:	6962      	ldr	r2, [r4, #20]
    12a8:	601a      	str	r2, [r3, #0]
    12aa:	e006      	b.n	12ba <_printf_i+0x15e>
    12ac:	0649      	lsls	r1, r1, #25
    12ae:	d5f7      	bpl.n	12a0 <_printf_i+0x144>
    12b0:	1d11      	adds	r1, r2, #4
    12b2:	6019      	str	r1, [r3, #0]
    12b4:	6813      	ldr	r3, [r2, #0]
    12b6:	8aa2      	ldrh	r2, [r4, #20]
    12b8:	801a      	strh	r2, [r3, #0]
    12ba:	2300      	movs	r3, #0
    12bc:	9e04      	ldr	r6, [sp, #16]
    12be:	6123      	str	r3, [r4, #16]
    12c0:	e054      	b.n	136c <_printf_i+0x210>
    12c2:	681a      	ldr	r2, [r3, #0]
    12c4:	1d11      	adds	r1, r2, #4
    12c6:	6019      	str	r1, [r3, #0]
    12c8:	6816      	ldr	r6, [r2, #0]
    12ca:	2100      	movs	r1, #0
    12cc:	6862      	ldr	r2, [r4, #4]
    12ce:	0030      	movs	r0, r6
    12d0:	f000 f870 	bl	13b4 <memchr>
    12d4:	2800      	cmp	r0, #0
    12d6:	d001      	beq.n	12dc <_printf_i+0x180>
    12d8:	1b80      	subs	r0, r0, r6
    12da:	6060      	str	r0, [r4, #4]
    12dc:	6863      	ldr	r3, [r4, #4]
    12de:	6123      	str	r3, [r4, #16]
    12e0:	2300      	movs	r3, #0
    12e2:	9a04      	ldr	r2, [sp, #16]
    12e4:	7013      	strb	r3, [r2, #0]
    12e6:	e041      	b.n	136c <_printf_i+0x210>
    12e8:	6923      	ldr	r3, [r4, #16]
    12ea:	0032      	movs	r2, r6
    12ec:	9906      	ldr	r1, [sp, #24]
    12ee:	9805      	ldr	r0, [sp, #20]
    12f0:	9d07      	ldr	r5, [sp, #28]
    12f2:	47a8      	blx	r5
    12f4:	1c43      	adds	r3, r0, #1
    12f6:	d043      	beq.n	1380 <_printf_i+0x224>
    12f8:	6823      	ldr	r3, [r4, #0]
    12fa:	2500      	movs	r5, #0
    12fc:	079b      	lsls	r3, r3, #30
    12fe:	d40f      	bmi.n	1320 <_printf_i+0x1c4>
    1300:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1302:	68e0      	ldr	r0, [r4, #12]
    1304:	4298      	cmp	r0, r3
    1306:	da3d      	bge.n	1384 <_printf_i+0x228>
    1308:	0018      	movs	r0, r3
    130a:	e03b      	b.n	1384 <_printf_i+0x228>
    130c:	0022      	movs	r2, r4
    130e:	2301      	movs	r3, #1
    1310:	3219      	adds	r2, #25
    1312:	9906      	ldr	r1, [sp, #24]
    1314:	9805      	ldr	r0, [sp, #20]
    1316:	9e07      	ldr	r6, [sp, #28]
    1318:	47b0      	blx	r6
    131a:	1c43      	adds	r3, r0, #1
    131c:	d030      	beq.n	1380 <_printf_i+0x224>
    131e:	3501      	adds	r5, #1
    1320:	68e3      	ldr	r3, [r4, #12]
    1322:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1324:	1a9b      	subs	r3, r3, r2
    1326:	429d      	cmp	r5, r3
    1328:	dbf0      	blt.n	130c <_printf_i+0x1b0>
    132a:	e7e9      	b.n	1300 <_printf_i+0x1a4>
    132c:	2d00      	cmp	r5, #0
    132e:	d0a9      	beq.n	1284 <_printf_i+0x128>
    1330:	9e04      	ldr	r6, [sp, #16]
    1332:	0028      	movs	r0, r5
    1334:	0039      	movs	r1, r7
    1336:	f7ff faab 	bl	890 <__aeabi_uidivmod>
    133a:	9b03      	ldr	r3, [sp, #12]
    133c:	3e01      	subs	r6, #1
    133e:	5c5b      	ldrb	r3, [r3, r1]
    1340:	0028      	movs	r0, r5
    1342:	7033      	strb	r3, [r6, #0]
    1344:	0039      	movs	r1, r7
    1346:	f7ff fa88 	bl	85a <__aeabi_uidiv>
    134a:	1e05      	subs	r5, r0, #0
    134c:	d1f1      	bne.n	1332 <_printf_i+0x1d6>
    134e:	2f08      	cmp	r7, #8
    1350:	d109      	bne.n	1366 <_printf_i+0x20a>
    1352:	6823      	ldr	r3, [r4, #0]
    1354:	07db      	lsls	r3, r3, #31
    1356:	d506      	bpl.n	1366 <_printf_i+0x20a>
    1358:	6863      	ldr	r3, [r4, #4]
    135a:	6922      	ldr	r2, [r4, #16]
    135c:	4293      	cmp	r3, r2
    135e:	dc02      	bgt.n	1366 <_printf_i+0x20a>
    1360:	2330      	movs	r3, #48	; 0x30
    1362:	3e01      	subs	r6, #1
    1364:	7033      	strb	r3, [r6, #0]
    1366:	9b04      	ldr	r3, [sp, #16]
    1368:	1b9b      	subs	r3, r3, r6
    136a:	6123      	str	r3, [r4, #16]
    136c:	9b07      	ldr	r3, [sp, #28]
    136e:	aa09      	add	r2, sp, #36	; 0x24
    1370:	9300      	str	r3, [sp, #0]
    1372:	0021      	movs	r1, r4
    1374:	9b06      	ldr	r3, [sp, #24]
    1376:	9805      	ldr	r0, [sp, #20]
    1378:	f7ff fe82 	bl	1080 <_printf_common>
    137c:	1c43      	adds	r3, r0, #1
    137e:	d1b3      	bne.n	12e8 <_printf_i+0x18c>
    1380:	2001      	movs	r0, #1
    1382:	4240      	negs	r0, r0
    1384:	b00b      	add	sp, #44	; 0x2c
    1386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1388:	0000164a 	.word	0x0000164a
    138c:	00001639 	.word	0x00001639

00001390 <_sbrk_r>:
    1390:	2300      	movs	r3, #0
    1392:	b570      	push	{r4, r5, r6, lr}
    1394:	4c06      	ldr	r4, [pc, #24]	; (13b0 <_sbrk_r+0x20>)
    1396:	0005      	movs	r5, r0
    1398:	0008      	movs	r0, r1
    139a:	6023      	str	r3, [r4, #0]
    139c:	f7ff fa10 	bl	7c0 <_sbrk>
    13a0:	1c43      	adds	r3, r0, #1
    13a2:	d103      	bne.n	13ac <_sbrk_r+0x1c>
    13a4:	6823      	ldr	r3, [r4, #0]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d000      	beq.n	13ac <_sbrk_r+0x1c>
    13aa:	602b      	str	r3, [r5, #0]
    13ac:	bd70      	pop	{r4, r5, r6, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	20000138 	.word	0x20000138

000013b4 <memchr>:
    13b4:	b2c9      	uxtb	r1, r1
    13b6:	1882      	adds	r2, r0, r2
    13b8:	4290      	cmp	r0, r2
    13ba:	d101      	bne.n	13c0 <memchr+0xc>
    13bc:	2000      	movs	r0, #0
    13be:	4770      	bx	lr
    13c0:	7803      	ldrb	r3, [r0, #0]
    13c2:	428b      	cmp	r3, r1
    13c4:	d0fb      	beq.n	13be <memchr+0xa>
    13c6:	3001      	adds	r0, #1
    13c8:	e7f6      	b.n	13b8 <memchr+0x4>

000013ca <memcpy>:
    13ca:	2300      	movs	r3, #0
    13cc:	b510      	push	{r4, lr}
    13ce:	429a      	cmp	r2, r3
    13d0:	d100      	bne.n	13d4 <memcpy+0xa>
    13d2:	bd10      	pop	{r4, pc}
    13d4:	5ccc      	ldrb	r4, [r1, r3]
    13d6:	54c4      	strb	r4, [r0, r3]
    13d8:	3301      	adds	r3, #1
    13da:	e7f8      	b.n	13ce <memcpy+0x4>

000013dc <memmove>:
    13dc:	b510      	push	{r4, lr}
    13de:	4288      	cmp	r0, r1
    13e0:	d902      	bls.n	13e8 <memmove+0xc>
    13e2:	188b      	adds	r3, r1, r2
    13e4:	4298      	cmp	r0, r3
    13e6:	d308      	bcc.n	13fa <memmove+0x1e>
    13e8:	2300      	movs	r3, #0
    13ea:	429a      	cmp	r2, r3
    13ec:	d007      	beq.n	13fe <memmove+0x22>
    13ee:	5ccc      	ldrb	r4, [r1, r3]
    13f0:	54c4      	strb	r4, [r0, r3]
    13f2:	3301      	adds	r3, #1
    13f4:	e7f9      	b.n	13ea <memmove+0xe>
    13f6:	5c8b      	ldrb	r3, [r1, r2]
    13f8:	5483      	strb	r3, [r0, r2]
    13fa:	3a01      	subs	r2, #1
    13fc:	d2fb      	bcs.n	13f6 <memmove+0x1a>
    13fe:	bd10      	pop	{r4, pc}

00001400 <__malloc_lock>:
    1400:	4770      	bx	lr

00001402 <__malloc_unlock>:
    1402:	4770      	bx	lr

00001404 <_free_r>:
    1404:	b570      	push	{r4, r5, r6, lr}
    1406:	0005      	movs	r5, r0
    1408:	2900      	cmp	r1, #0
    140a:	d010      	beq.n	142e <_free_r+0x2a>
    140c:	1f0c      	subs	r4, r1, #4
    140e:	6823      	ldr	r3, [r4, #0]
    1410:	2b00      	cmp	r3, #0
    1412:	da00      	bge.n	1416 <_free_r+0x12>
    1414:	18e4      	adds	r4, r4, r3
    1416:	0028      	movs	r0, r5
    1418:	f7ff fff2 	bl	1400 <__malloc_lock>
    141c:	4a1d      	ldr	r2, [pc, #116]	; (1494 <_free_r+0x90>)
    141e:	6813      	ldr	r3, [r2, #0]
    1420:	2b00      	cmp	r3, #0
    1422:	d105      	bne.n	1430 <_free_r+0x2c>
    1424:	6063      	str	r3, [r4, #4]
    1426:	6014      	str	r4, [r2, #0]
    1428:	0028      	movs	r0, r5
    142a:	f7ff ffea 	bl	1402 <__malloc_unlock>
    142e:	bd70      	pop	{r4, r5, r6, pc}
    1430:	42a3      	cmp	r3, r4
    1432:	d909      	bls.n	1448 <_free_r+0x44>
    1434:	6821      	ldr	r1, [r4, #0]
    1436:	1860      	adds	r0, r4, r1
    1438:	4283      	cmp	r3, r0
    143a:	d1f3      	bne.n	1424 <_free_r+0x20>
    143c:	6818      	ldr	r0, [r3, #0]
    143e:	685b      	ldr	r3, [r3, #4]
    1440:	1841      	adds	r1, r0, r1
    1442:	6021      	str	r1, [r4, #0]
    1444:	e7ee      	b.n	1424 <_free_r+0x20>
    1446:	0013      	movs	r3, r2
    1448:	685a      	ldr	r2, [r3, #4]
    144a:	2a00      	cmp	r2, #0
    144c:	d001      	beq.n	1452 <_free_r+0x4e>
    144e:	42a2      	cmp	r2, r4
    1450:	d9f9      	bls.n	1446 <_free_r+0x42>
    1452:	6819      	ldr	r1, [r3, #0]
    1454:	1858      	adds	r0, r3, r1
    1456:	42a0      	cmp	r0, r4
    1458:	d10b      	bne.n	1472 <_free_r+0x6e>
    145a:	6820      	ldr	r0, [r4, #0]
    145c:	1809      	adds	r1, r1, r0
    145e:	1858      	adds	r0, r3, r1
    1460:	6019      	str	r1, [r3, #0]
    1462:	4282      	cmp	r2, r0
    1464:	d1e0      	bne.n	1428 <_free_r+0x24>
    1466:	6810      	ldr	r0, [r2, #0]
    1468:	6852      	ldr	r2, [r2, #4]
    146a:	1841      	adds	r1, r0, r1
    146c:	6019      	str	r1, [r3, #0]
    146e:	605a      	str	r2, [r3, #4]
    1470:	e7da      	b.n	1428 <_free_r+0x24>
    1472:	42a0      	cmp	r0, r4
    1474:	d902      	bls.n	147c <_free_r+0x78>
    1476:	230c      	movs	r3, #12
    1478:	602b      	str	r3, [r5, #0]
    147a:	e7d5      	b.n	1428 <_free_r+0x24>
    147c:	6821      	ldr	r1, [r4, #0]
    147e:	1860      	adds	r0, r4, r1
    1480:	4282      	cmp	r2, r0
    1482:	d103      	bne.n	148c <_free_r+0x88>
    1484:	6810      	ldr	r0, [r2, #0]
    1486:	6852      	ldr	r2, [r2, #4]
    1488:	1841      	adds	r1, r0, r1
    148a:	6021      	str	r1, [r4, #0]
    148c:	6062      	str	r2, [r4, #4]
    148e:	605c      	str	r4, [r3, #4]
    1490:	e7ca      	b.n	1428 <_free_r+0x24>
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	200000e0 	.word	0x200000e0

00001498 <_realloc_r>:
    1498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    149a:	0007      	movs	r7, r0
    149c:	000d      	movs	r5, r1
    149e:	0016      	movs	r6, r2
    14a0:	2900      	cmp	r1, #0
    14a2:	d105      	bne.n	14b0 <_realloc_r+0x18>
    14a4:	0011      	movs	r1, r2
    14a6:	f7ff fc27 	bl	cf8 <_malloc_r>
    14aa:	0004      	movs	r4, r0
    14ac:	0020      	movs	r0, r4
    14ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14b0:	2a00      	cmp	r2, #0
    14b2:	d103      	bne.n	14bc <_realloc_r+0x24>
    14b4:	f7ff ffa6 	bl	1404 <_free_r>
    14b8:	0034      	movs	r4, r6
    14ba:	e7f7      	b.n	14ac <_realloc_r+0x14>
    14bc:	f000 f812 	bl	14e4 <_malloc_usable_size_r>
    14c0:	002c      	movs	r4, r5
    14c2:	4286      	cmp	r6, r0
    14c4:	d9f2      	bls.n	14ac <_realloc_r+0x14>
    14c6:	0031      	movs	r1, r6
    14c8:	0038      	movs	r0, r7
    14ca:	f7ff fc15 	bl	cf8 <_malloc_r>
    14ce:	1e04      	subs	r4, r0, #0
    14d0:	d0ec      	beq.n	14ac <_realloc_r+0x14>
    14d2:	0029      	movs	r1, r5
    14d4:	0032      	movs	r2, r6
    14d6:	f7ff ff78 	bl	13ca <memcpy>
    14da:	0029      	movs	r1, r5
    14dc:	0038      	movs	r0, r7
    14de:	f7ff ff91 	bl	1404 <_free_r>
    14e2:	e7e3      	b.n	14ac <_realloc_r+0x14>

000014e4 <_malloc_usable_size_r>:
    14e4:	1f0b      	subs	r3, r1, #4
    14e6:	681b      	ldr	r3, [r3, #0]
    14e8:	1f18      	subs	r0, r3, #4
    14ea:	2b00      	cmp	r3, #0
    14ec:	da01      	bge.n	14f2 <_malloc_usable_size_r+0xe>
    14ee:	580b      	ldr	r3, [r1, r0]
    14f0:	18c0      	adds	r0, r0, r3
    14f2:	4770      	bx	lr
    14f4:	616f6c46 	.word	0x616f6c46
    14f8:	203a2074 	.word	0x203a2074
    14fc:	0a0d6625 	.word	0x0a0d6625
    1500:	00000000 